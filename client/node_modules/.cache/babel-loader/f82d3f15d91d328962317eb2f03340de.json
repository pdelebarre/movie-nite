{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nimport { EJSON } from \"bson\";\nimport { keys, objectTypes } from \"./constants\";\nimport { getterForProperty, createMethods } from \"./util\";\nimport { promisify } from \"../utils\";\nexport default class User {\n  logOut() {\n    return promisify(cb => this._logOut(cb));\n  }\n\n  async callFunction(name, args, service) {\n    const stringifiedArgs = EJSON.stringify(args, {\n      relaxed: false\n    });\n    const result = await promisify(cb => this._callFunction(name, stringifiedArgs, service, cb));\n    return EJSON.parse(result);\n  }\n\n  get functions() {\n    return new Proxy(this, {\n      get(target, name, receiver) {\n        if (typeof name === \"string\" && name !== \"inspect\") {\n          return function (...args) {\n            return target.callFunction(name, args);\n          };\n        } else {\n          return Reflect.get(target, name, receiver);\n        }\n      }\n\n    });\n  }\n\n  get customData() {\n    return EJSON.parse(this._customData);\n  }\n\n}\ncreateMethods(User.prototype, objectTypes.USER, [\"_logOut\", \"_sessionForOnDiskPath\", \"_deleteUser\", \"_linkCredentials\", \"_callFunction\", \"_pushRegister\", \"_pushDeregister\", \"_makeStreamingRequest\" // \"_newWatchStream\", // TODO expose WatchStream type via RN debug API\n]);\nObject.defineProperties(User.prototype, {\n  id: {\n    get: getterForProperty(\"id\")\n  },\n  accessToken: {\n    get: getterForProperty(\"accessToken\")\n  },\n  refreshToken: {\n    get: getterForProperty(\"refreshToken\")\n  },\n  profile: {\n    get: getterForProperty(\"profile\")\n  },\n  identities: {\n    get: getterForProperty(\"identities\")\n  },\n  providerType: {\n    get: getterForProperty(\"providerType\")\n  },\n  isLoggedIn: {\n    get: getterForProperty(\"isLoggedIn\")\n  },\n  state: {\n    get: getterForProperty(\"state\")\n  },\n  apiKeys: {\n    get: getterForProperty(\"apiKeys\")\n  },\n  deviceId: {\n    get: getterForProperty(\"deviceId\")\n  },\n  _customData: {\n    get: getterForProperty(\"_customData\")\n  }\n});\nexport function createUser(realmId, info) {\n  const userProxy = Object.create(User.prototype); // FIXME: This is currently necessary because util/createMethod expects\n  // the realm id to be present on any object that is used over rpc\n\n  userProxy[keys.realm] = \"(User object)\";\n  userProxy[keys.id] = info.id;\n  userProxy[keys.type] = objectTypes.USER;\n  return userProxy;\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/user.js"],"names":["EJSON","keys","objectTypes","getterForProperty","createMethods","promisify","User","logOut","cb","_logOut","callFunction","name","args","service","stringifiedArgs","stringify","relaxed","result","_callFunction","parse","functions","Proxy","get","target","receiver","Reflect","customData","_customData","prototype","USER","Object","defineProperties","id","accessToken","refreshToken","profile","identities","providerType","isLoggedIn","state","apiKeys","deviceId","createUser","realmId","info","userProxy","create","realm","type"],"mappings":"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","sourcesContent":["\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nimport { EJSON } from \"bson\";\n\nimport { keys, objectTypes } from \"./constants\";\nimport { getterForProperty, createMethods } from \"./util\";\nimport { promisify } from \"../utils\";\n\nexport default class User {\n    logOut() {\n        return promisify(cb => this._logOut(cb));\n    }\n\n    async callFunction(name, args, service) {\n        const stringifiedArgs = EJSON.stringify(args, { relaxed: false });\n        const result = await promisify(cb => this._callFunction(name, stringifiedArgs, service, cb));\n        return EJSON.parse(result);\n    }\n\n    get functions() {\n        return new Proxy(this, {\n            get(target, name, receiver) {\n                if (typeof name === \"string\" && name !== \"inspect\") {\n                    return function (...args) {\n                        return target.callFunction(name, args);\n                    };\n                } else {\n                    return Reflect.get(target, name, receiver);\n                }\n            },\n        });\n    }\n\n    get customData() {\n        return EJSON.parse(this._customData);\n    }\n}\n\ncreateMethods(User.prototype, objectTypes.USER, [\n    \"_logOut\",\n    \"_sessionForOnDiskPath\",\n    \"_deleteUser\",\n    \"_linkCredentials\",\n    \"_callFunction\",\n    \"_pushRegister\",\n    \"_pushDeregister\",\n    \"_makeStreamingRequest\",\n    // \"_newWatchStream\", // TODO expose WatchStream type via RN debug API\n]);\n\nObject.defineProperties(User.prototype, {\n    id: { get: getterForProperty(\"id\") },\n    accessToken: { get: getterForProperty(\"accessToken\") },\n    refreshToken: { get: getterForProperty(\"refreshToken\") },\n    profile: { get: getterForProperty(\"profile\") },\n    identities: { get: getterForProperty(\"identities\") },\n    providerType: { get: getterForProperty(\"providerType\") },\n    isLoggedIn: { get: getterForProperty(\"isLoggedIn\") },\n    state: { get: getterForProperty(\"state\") },\n    apiKeys: { get: getterForProperty(\"apiKeys\") },\n    deviceId: { get: getterForProperty(\"deviceId\") },\n    _customData: { get: getterForProperty(\"_customData\") },\n});\n\nexport function createUser(realmId, info) {\n    const userProxy = Object.create(User.prototype);\n\n    // FIXME: This is currently necessary because util/createMethod expects\n    // the realm id to be present on any object that is used over rpc\n    userProxy[keys.realm] = \"(User object)\";\n    userProxy[keys.id] = info.id;\n    userProxy[keys.type] = objectTypes.USER;\n\n    return userProxy;\n}\n"]},"metadata":{},"sourceType":"module"}