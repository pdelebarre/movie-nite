{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\nimport { useEasybase } from \"easybase-react\";\nimport ebconfig from \"../ebconfig.js\";\nimport { useState, useEffect } from \"react\";\nimport GENRES from \"../resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id); // console.log(\"genre\",result);\n\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nconst Main = () => {\n  _s();\n\n  const [refresh, setRefresh] = useState(false);\n  const table = useEasybase({\n    ebconfig\n  }).db(\"MOVIES\");\n  const {\n    db,\n    e,\n    useReturn\n  } = useEasybase(); // 1st param is a function, returning a `db().return` instance without having been executed\n  // 2nd param is dependencies that cause a re-fetch when changed\n\n  const {\n    frame\n  } = useReturn(() => db().return(), [refresh]);\n  console.log(\"List of movies\");\n  console.log(frame);\n\n  const headers = /*#__PURE__*/_jsxDEV(\"thead\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"watched\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"poster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this); // use easybase's hooks to access the data.\n  //   const { Frame, useFrameEffect, configureFrame, sync } = useEasybase();\n  //   // const [movies, setMovies] = useState([]);\n  //   useEffect(() => {\n  //     // configureFrame sets up our Frame to access the appropriate list of data.\n  //     // in this case, it's only showing the first 10 rows, for the table LISTOFDATA\n  //     configureFrame({ limit: 10, offset: 0, tableName: \"MOVIES\" });\n  //     sync();\n  //     // this *should* be [configureFrame, sync] because we want the useEffect hook to fire if\n  //     // those values change. However, easybase-react *always* updates them, so we need to pass\n  //     // an empty array. And then disable the warning in the linter. I consider this a bug in easybase.\n  //     // eslint-disable-next-line\n  //   }, []);\n  //   useFrameEffect(() => {\n  //     console.log(\"Frame changed!\");\n  //   });\n  //   useEffect(() => {\n  //     mounted();\n  //   }, [])\n  //   const { frame } = useReturn(() => {\n  //     console.log(\"getting data...\");\n  //     db(\"MOVIES\").return();\n  //     console.log(`movies`, frame);\n  //   }, []);\n  //   const movieExists = (id) => {\n  //     return movies.some((movie) => {\n  //       return movie.id === id;\n  //     });\n  //   };\n  //   const addMovie = async (movie) => {\n  //     //     if (movieExists(movie.id)) {\n  //     //       console.log(`duplicate!`, movie);\n  //     //       return;\n  //     //     }\n  //     let genres = getGenres(movie.genre_ids);\n  //     let newMovie = {\n  //       ...movie,\n  //       genres: genres,\n  //       watched: false,\n  //     };\n  //     Frame().push({\n  //       title: newMovie.title,\n  //       genres: newMovie.genres,\n  //       posterpath: newMovie.poster_path,\n  //       watched: newMovie.watched,\n  //       overview: newMovie.overview,\n  //       voteaverage: Number(newMovie.vote_average),\n  //       id: newMovie.id,\n  //     });\n  //     sync();\n  //   };\n  // const delMovie = async (id) => {\n  //   let singleRecord = table.return().one() // Select returns a unique identifier called _key\n  //     await table.delete().where({ _key: singleRecord._key }).one()\n  // };\n\n\n  const markWatched = async id => {\n    let singleRecord = await table.return().where(e.eq(\"id\", id)).one();\n    let watched = singleRecord.watched;\n    await table.where({\n      _key: singleRecord._key\n    }).set({\n      watched: !watched\n    }).one();\n    setRefresh(st => !st);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.movies,\n      children: [headers, /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: frame.map((movie, index) => {\n          return /*#__PURE__*/_jsxDEV(Movie, {\n            movie: movie // delMovie={delMovie}\n            ,\n            markWatched: markWatched // index={movie[\"_key\"]}\n\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"wY68LVVTBtZS4goVhPCXXDaSs+A=\", true, function () {\n  return [useEasybase, useEasybase];\n});\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js"],"names":["React","SearchMovie","classes","Movie","useEasybase","ebconfig","useState","useEffect","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","Main","refresh","setRefresh","table","db","e","useReturn","frame","return","headers","markWatched","singleRecord","where","eq","one","watched","_key","set","st","container","movies","movie","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\n\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\n\nimport { useEasybase } from \"easybase-react\";\n\nimport ebconfig from \"../ebconfig.js\";\n\nimport { useState, useEffect } from \"react\";\n\nimport GENRES from \"../resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    // console.log(\"genre\",result);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nconst Main = () => {\n  const [refresh, setRefresh] = useState(false);\n\n  const table = useEasybase({ ebconfig }).db(\"MOVIES\");\n\n  const { db, e, useReturn } = useEasybase();\n\n  // 1st param is a function, returning a `db().return` instance without having been executed\n  // 2nd param is dependencies that cause a re-fetch when changed\n  const { frame } = useReturn(() => db().return(), [refresh]);\n\n  console.log(\"List of movies\");\n  console.log(frame);\n\n  const headers = (\n    <thead>\n      <tr>\n        <th>watched</th>\n        <th>title</th>\n        <th>genre</th>\n        <th>poster</th>\n        <th>delete</th>\n      </tr>\n    </thead>\n  );\n\n  // use easybase's hooks to access the data.\n  //   const { Frame, useFrameEffect, configureFrame, sync } = useEasybase();\n  //   // const [movies, setMovies] = useState([]);\n\n  //   useEffect(() => {\n  //     // configureFrame sets up our Frame to access the appropriate list of data.\n  //     // in this case, it's only showing the first 10 rows, for the table LISTOFDATA\n  //     configureFrame({ limit: 10, offset: 0, tableName: \"MOVIES\" });\n  //     sync();\n  //     // this *should* be [configureFrame, sync] because we want the useEffect hook to fire if\n  //     // those values change. However, easybase-react *always* updates them, so we need to pass\n  //     // an empty array. And then disable the warning in the linter. I consider this a bug in easybase.\n  //     // eslint-disable-next-line\n  //   }, []);\n\n  //   useFrameEffect(() => {\n  //     console.log(\"Frame changed!\");\n  //   });\n\n  //   useEffect(() => {\n  //     mounted();\n  //   }, [])\n\n  //   const { frame } = useReturn(() => {\n  //     console.log(\"getting data...\");\n  //     db(\"MOVIES\").return();\n  //     console.log(`movies`, frame);\n  //   }, []);\n\n  //   const movieExists = (id) => {\n  //     return movies.some((movie) => {\n  //       return movie.id === id;\n  //     });\n  //   };\n\n  //   const addMovie = async (movie) => {\n  //     //     if (movieExists(movie.id)) {\n  //     //       console.log(`duplicate!`, movie);\n  //     //       return;\n  //     //     }\n\n  //     let genres = getGenres(movie.genre_ids);\n\n  //     let newMovie = {\n  //       ...movie,\n  //       genres: genres,\n  //       watched: false,\n  //     };\n\n  //     Frame().push({\n  //       title: newMovie.title,\n  //       genres: newMovie.genres,\n  //       posterpath: newMovie.poster_path,\n  //       watched: newMovie.watched,\n  //       overview: newMovie.overview,\n  //       voteaverage: Number(newMovie.vote_average),\n  //       id: newMovie.id,\n  //     });\n\n  //     sync();\n  //   };\n\n    // const delMovie = async (id) => {\n      \n    //   let singleRecord = table.return().one() // Select returns a unique identifier called _key\n\n    //     await table.delete().where({ _key: singleRecord._key }).one()\n    // };\n\n  const markWatched = async (id) => {\n\n    let singleRecord = await table.return().where(e.eq(\"id\", id)).one();\n    let watched = singleRecord.watched;\n\n    await table\n      .where({ _key: singleRecord._key })\n      .set({ watched: !watched })\n      .one();\n\n    setRefresh(st => !st);\n  };\n\n  return (\n    <div className={classes.container}>\n      {/* <SearchMovie onSelect={addMovie} /> */}\n      {/* <Movies movies={Frame()} delMovie={delMovie} markWatched={markWatched} /> */}\n\n      <table className={classes.movies}>\n        {headers}\n        <tbody>\n          {frame.map((movie, index) => {\n            return (\n              <Movie\n                key={movie.id}\n                movie={movie}\n                // delMovie={delMovie}\n                markWatched={markWatched}\n                // index={movie[\"_key\"]}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}