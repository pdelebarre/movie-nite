{"ast":null,"code":"const {\n  unaryPre,\n  unaryPost,\n  unaryFunction,\n  binary,\n  ternary,\n  nary,\n  naryFunction,\n  oneValue,\n  compositeValue,\n  membership,\n  quantifiedComparison,\n  dateBinary\n} = require('./util'); // value\n\n\nconst value = {\n  arg: compositeValue,\n  row: compositeValue,\n  unknown: oneValue,\n  boolean: oneValue,\n  number: oneValue,\n  string: oneValue,\n  array: oneValue,\n  json: oneValue,\n  table: oneValue\n}; // boolean\n\nconst boolean = {\n  // logical\n  and: nary('and'),\n  or: nary('or'),\n  not: unaryFunction('not'),\n  // comparison\n  isTrue: unaryPost('is true'),\n  isNotTrue: unaryPost('is not true'),\n  isFalse: unaryPost('is false'),\n  isNotFalse: unaryPost('is not false'),\n  isUnknown: unaryPost('is unknown'),\n  isNotUnknown: unaryPost('is not unknown')\n}; // comparison\n\nconst comparison = {\n  // binary comparison\n  eq: binary('='),\n  neq: binary('<>'),\n  lt: binary('<'),\n  gt: binary('>'),\n  lte: binary('<='),\n  gte: binary('>='),\n  // misc\n  between: ternary('between', 'and'),\n  isDistinctFrom: binary('is distinct from'),\n  isNotDistinctFrom: binary('is not distinct from'),\n  isNull: unaryPost('is null'),\n  isNotNull: unaryPost('is not null'),\n  in: membership('in'),\n  notIn: membership('not in'),\n  // quantified any\n  eqAny: quantifiedComparison('= any'),\n  neqAny: quantifiedComparison('<> any'),\n  ltAny: quantifiedComparison('< any'),\n  gtAny: quantifiedComparison('> any'),\n  lteAny: quantifiedComparison('<= any'),\n  gteAny: quantifiedComparison('>= any'),\n  // quantified all\n  eqAll: quantifiedComparison('= all'),\n  neqAll: quantifiedComparison('<> all'),\n  ltAll: quantifiedComparison('< all'),\n  gtAll: quantifiedComparison('> all'),\n  lteAll: quantifiedComparison('<= all'),\n  gteAll: quantifiedComparison('>= all')\n}; // dates\n\nconst dateComparison = {\n  // dateEq: dateBinary('='),\n  // dateNeq: dateBinary('<>'),\n  dateLt: dateBinary('<'),\n  dateGt: dateBinary('>'),\n  dateLte: dateBinary('<='),\n  dateGte: dateBinary('>=')\n}; // math\n\nconst math = {\n  add: binary('+'),\n  sub: binary('-'),\n  mul: binary('*'),\n  div: binary('/'),\n  mod: binary('%'),\n  exp: binary('%'),\n  sqrt: unaryPre('|/'),\n  cbrt: unaryPre('||/'),\n  fact: unaryPre('!!'),\n  abs: unaryFunction('abs')\n}; // string\n\nconst string = {\n  like: binary('like'),\n  notLike: binary('not like')\n};\nconst array = {\n  unnest: naryFunction('unnest')\n};\nmodule.exports = { ...value,\n  ...boolean,\n  ...comparison,\n  ...math,\n  ...array,\n  ...dateComparison,\n  ...string\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-expression/index.js"],"names":["unaryPre","unaryPost","unaryFunction","binary","ternary","nary","naryFunction","oneValue","compositeValue","membership","quantifiedComparison","dateBinary","require","value","arg","row","unknown","boolean","number","string","array","json","table","and","or","not","isTrue","isNotTrue","isFalse","isNotFalse","isUnknown","isNotUnknown","comparison","eq","neq","lt","gt","lte","gte","between","isDistinctFrom","isNotDistinctFrom","isNull","isNotNull","in","notIn","eqAny","neqAny","ltAny","gtAny","lteAny","gteAny","eqAll","neqAll","ltAll","gtAll","lteAll","gteAll","dateComparison","dateLt","dateGt","dateLte","dateGte","math","add","sub","mul","div","mod","exp","sqrt","cbrt","fact","abs","like","notLike","unnest","module","exports"],"mappings":"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","sourcesContent":["const {\n    unaryPre,\n    unaryPost,\n    unaryFunction,\n    binary,\n    ternary,\n    nary,\n    naryFunction,\n    oneValue,\n    compositeValue,\n    membership,\n    quantifiedComparison,\n    dateBinary\n} = require('./util')\n\n// value\nconst value = {\n    arg: compositeValue,\n    row: compositeValue,\n    unknown: oneValue,\n    boolean: oneValue,\n    number: oneValue,\n    string: oneValue,\n    array: oneValue,\n    json: oneValue,\n    table: oneValue\n}\n\n// boolean\nconst boolean = {\n    // logical\n    and: nary('and'),\n    or: nary('or'),\n    not: unaryFunction('not'),\n    // comparison\n    isTrue: unaryPost('is true'),\n    isNotTrue: unaryPost('is not true'),\n    isFalse: unaryPost('is false'),\n    isNotFalse: unaryPost('is not false'),\n    isUnknown: unaryPost('is unknown'),\n    isNotUnknown: unaryPost('is not unknown')\n}\n\n// comparison\nconst comparison = {\n    // binary comparison\n    eq: binary('='),\n    neq: binary('<>'),\n    lt: binary('<'),\n    gt: binary('>'),\n    lte: binary('<='),\n    gte: binary('>='),\n    // misc\n    between: ternary('between', 'and'),\n    isDistinctFrom: binary('is distinct from'),\n    isNotDistinctFrom: binary('is not distinct from'),\n    isNull: unaryPost('is null'),\n    isNotNull: unaryPost('is not null'),\n    in: membership('in'),\n    notIn: membership('not in'),\n    // quantified any\n    eqAny: quantifiedComparison('= any'),\n    neqAny: quantifiedComparison('<> any'),\n    ltAny: quantifiedComparison('< any'),\n    gtAny: quantifiedComparison('> any'),\n    lteAny: quantifiedComparison('<= any'),\n    gteAny: quantifiedComparison('>= any'),\n    // quantified all\n    eqAll: quantifiedComparison('= all'),\n    neqAll: quantifiedComparison('<> all'),\n    ltAll: quantifiedComparison('< all'),\n    gtAll: quantifiedComparison('> all'),\n    lteAll: quantifiedComparison('<= all'),\n    gteAll: quantifiedComparison('>= all')\n}\n\n// dates\nconst dateComparison = {\n    // dateEq: dateBinary('='),\n    // dateNeq: dateBinary('<>'),\n    dateLt: dateBinary('<'),\n    dateGt: dateBinary('>'),\n    dateLte: dateBinary('<='),\n    dateGte: dateBinary('>=')\n}\n\n// math\nconst math = {\n    add: binary('+'),\n    sub: binary('-'),\n    mul: binary('*'),\n    div: binary('/'),\n    mod: binary('%'),\n    exp: binary('%'),\n    sqrt: unaryPre('|/'),\n    cbrt: unaryPre('||/'),\n    fact: unaryPre('!!'),\n    abs: unaryFunction('abs')\n}\n\n// string\nconst string = {\n    like: binary('like'),\n    notLike: binary('not like')\n}\n\nconst array = {\n    unnest: naryFunction('unnest')\n}\n\nmodule.exports = {\n    ...value,\n    ...boolean,\n    ...comparison,\n    ...math,\n    ...array,\n    ...dateComparison,\n    ...string\n}\n"]},"metadata":{},"sourceType":"script"}