{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\"; // import {addMovies} from \"./Database\";\n\nimport * as Realm from \"realm-web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REALM_APP_ID = \"realm-movie-nite-dtfju\"; // e.g. myapp-abcde\n\nconst app = new Realm.App({\n  id: REALM_APP_ID\n});\nconst mongodb = app.currentUser.mongoClient(\"mongodb-atlas\");\nconst movies = mongodb.db(\"movie-nite\").collection(\"movies\");\n\nasync function loginApiKey(apiKey) {\n  // Create an API Key credential\n  const credentials = Realm.Credentials.apiKey(apiKey);\n\n  try {\n    // Authenticate the user\n    const user = await app.logIn(credentials); // `App.currentUser` updates to match the logged in user\n    //assert(user.id === app.currentUser.id)\n\n    return user;\n  } catch (err) {\n    console.error(\"Failed to log in\", err);\n  }\n}\n\nloginApiKey(\"769c567e-9fd7-4b62-a289-6d5738b75c7c\").then(user => {\n  console.log(\"Successfully logged in!\", user);\n}); // Declare Schema\n\nconst MovieSchema = {\n  name: \"Movies\",\n  properties: {\n    id: \"int\",\n    title: \"string\",\n    genres: \"string\",\n    overview: \"string\",\n    posterpath: \"string\",\n    voteaverage: \"int\",\n    watched: \"boolean\"\n  }\n};\n\nconst addMovies = () => {\n  for (let i = 0; i < 3; i++) {\n    movies.insertOne({\n      title: \"Harry Putter \" + i,\n      overview: \"bla bla\"\n    });\n  }\n}; // Create a component that displays the given user's details\n\n\nfunction UserDetail({\n  user\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Logged in with anonymous id: \", user.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n} // Create a component that lets an anonymous user log in\n\n\n_c = UserDetail;\n\nfunction Login({\n  setUser\n}) {\n  const loginAnonymous = async () => {\n    const user = await app.logIn(Realm.Credentials.anonymous());\n    setUser(user);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: loginAnonymous,\n    children: \"Log In\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = Login;\n\nconst App = () => {\n  _s();\n\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser); // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addMovies,\n      children: \"Add movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"yE/SCzRsbiEzF1U/zuUFg5M1hPU=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"UserDetail\");\n$RefreshReg$(_c2, \"Login\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["React","Movies","Realm","REALM_APP_ID","app","App","id","mongodb","currentUser","mongoClient","movies","db","collection","loginApiKey","apiKey","credentials","Credentials","user","logIn","err","console","error","then","log","MovieSchema","name","properties","title","genres","overview","posterpath","voteaverage","watched","addMovies","i","insertOne","UserDetail","Login","setUser","loginAnonymous","anonymous","useState"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\n// import {addMovies} from \"./Database\";\n\nimport * as Realm from \"realm-web\";\n\nconst REALM_APP_ID = \"realm-movie-nite-dtfju\"; // e.g. myapp-abcde\nconst app = new Realm.App({ id: REALM_APP_ID });\nconst mongodb = app.currentUser.mongoClient(\"mongodb-atlas\");\nconst movies = mongodb.db(\"movie-nite\").collection(\"movies\");\n\n\n\nasync function loginApiKey(apiKey) {\n  // Create an API Key credential\n  const credentials = Realm.Credentials.apiKey(apiKey);\n  try {\n    // Authenticate the user\n    const user = await app.logIn(credentials);\n    // `App.currentUser` updates to match the logged in user\n    //assert(user.id === app.currentUser.id)\n    return user\n  } catch(err) {\n    console.error(\"Failed to log in\", err);\n  }\n}\nloginApiKey(\"769c567e-9fd7-4b62-a289-6d5738b75c7c\").then(user => {\n  console.log(\"Successfully logged in!\", user)\n})\n\n// Declare Schema\nconst MovieSchema = {\n  name: \"Movies\",\n  properties: {\n    id: \"int\",\n    title: \"string\",\n    genres: \"string\",\n    overview: \"string\",\n    posterpath: \"string\",\n    voteaverage: \"int\",\n    watched: \"boolean\",\n  },\n};\n\nconst addMovies = () => {\n     for (let i = 0; i < 3; i++) {\n      movies.insertOne({\n          title: \"Harry Putter \" + i,\n          overview: \"bla bla\",\n        }\n      );\n    }\n \n};\n\n// Create a component that displays the given user's details\nfunction UserDetail({ user }) {\n  return (\n    <div>\n      <h1>Logged in with anonymous id: {user.id}</h1>\n    </div>\n  );\n}\n\n// Create a component that lets an anonymous user log in\nfunction Login({ setUser }) {\n  const loginAnonymous = async () => {\n    const user = await app.logIn(Realm.Credentials.anonymous());\n    setUser(user);\n  };\n  return <button onClick={loginAnonymous}>Log In</button>;\n}\n\nconst App = () => {\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser);\n\n  // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n  return (\n    <div className=\"App\">\n      {/* <div className=\"App-header\">\n        {user ? <UserDetail user={user} /> : <Login setUser={setUser} />}\n      </div> */}\n      <button type=\"button\" onClick={addMovies}>\n        Add movies\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}