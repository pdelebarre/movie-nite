{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nimport { keys, objectTypes } from \"./constants\";\nimport { createMethods, getterForProperty } from \"./util\";\nimport { setVersions, createAppRPC, _logInRPC } from \"./rpc\";\nimport { promisify } from \"../utils\";\n\nfunction setupApp(app, info) {\n  app[keys.id] = info.id;\n  app[keys.realm] = \"(App object)\";\n  app[keys.type] = objectTypes.APP;\n}\n\nexport default class App {\n  constructor(config) {\n    let info = createAppRPC(config);\n    setupApp(this, info);\n  }\n  /**\n   * Invokes the RPC client to set versions.\n   * @todo Turn this into a call to the static App._setVersions method if the RPC layer supported invoking remote static methods.\n   * @param {object} versions An object containing package and platform names and versions.\n   */\n\n\n  static _setVersions(versions) {\n    return setVersions(versions);\n  }\n\n  logIn(credentials) {\n    return promisify(cb => this._logIn(credentials, cb));\n  }\n\n}\ncreateMethods(App.prototype, objectTypes.APP, [\"_logIn\", \"switchUser\"], true);\nObject.defineProperties(App.prototype, {\n  currentUser: {\n    get: getterForProperty(\"currentUser\")\n  },\n  allUsers: {\n    get: getterForProperty(\"allUsers\")\n  },\n  emailPasswordAuth: {\n    get: getterForProperty(\"emailPasswordAuth\")\n  }\n});\nexport function createApp(realmId, info) {\n  const appProxy = Object.create(App.prototype); // FIXME: This is currently necessary because util/createMethod expects\n  // the realm id to be present on any object that is used over rpc\n\n  appProxy[keys.realm] = \"(App object)\";\n  appProxy[keys.id] = info.id;\n  appProxy[keys.type] = objectTypes.APP;\n  Object.assign(appProxy, info.data);\n  return appProxy;\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/app.js"],"names":["keys","objectTypes","createMethods","getterForProperty","setVersions","createAppRPC","_logInRPC","promisify","setupApp","app","info","id","realm","type","APP","App","constructor","config","_setVersions","versions","logIn","credentials","cb","_logIn","prototype","Object","defineProperties","currentUser","get","allUsers","emailPasswordAuth","createApp","realmId","appProxy","create","assign","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASA,IAAT,EAAeC,WAAf,QAAkC,aAAlC;AACA,SAASC,aAAT,EAAwBC,iBAAxB,QAAiD,QAAjD;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,SAApC,QAAqD,OAArD;AACA,SAASC,SAAT,QAA0B,UAA1B;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AACzBD,EAAAA,GAAG,CAACT,IAAI,CAACW,EAAN,CAAH,GAAeD,IAAI,CAACC,EAApB;AACAF,EAAAA,GAAG,CAACT,IAAI,CAACY,KAAN,CAAH,GAAkB,cAAlB;AACAH,EAAAA,GAAG,CAACT,IAAI,CAACa,IAAN,CAAH,GAAiBZ,WAAW,CAACa,GAA7B;AACH;;AAED,eAAe,MAAMC,GAAN,CAAU;AACrBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,QAAIP,IAAI,GAAGL,YAAY,CAACY,MAAD,CAAvB;AACAT,IAAAA,QAAQ,CAAC,IAAD,EAAOE,IAAP,CAAR;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACuB,SAAZQ,YAAY,CAACC,QAAD,EAAW;AAC1B,WAAOf,WAAW,CAACe,QAAD,CAAlB;AACH;;AAEDC,EAAAA,KAAK,CAACC,WAAD,EAAc;AACf,WAAOd,SAAS,CAACe,EAAE,IAAI,KAAKC,MAAL,CAAYF,WAAZ,EAAyBC,EAAzB,CAAP,CAAhB;AACH;;AAjBoB;AAoBzBpB,aAAa,CAACa,GAAG,CAACS,SAAL,EAAgBvB,WAAW,CAACa,GAA5B,EAAiC,CAC1C,QAD0C,EAE1C,YAF0C,CAAjC,EAGV,IAHU,CAAb;AAKAW,MAAM,CAACC,gBAAP,CAAwBX,GAAG,CAACS,SAA5B,EAAuC;AACnCG,EAAAA,WAAW,EAAE;AAAEC,IAAAA,GAAG,EAAEzB,iBAAiB,CAAC,aAAD;AAAxB,GADsB;AAEnC0B,EAAAA,QAAQ,EAAE;AAAED,IAAAA,GAAG,EAAEzB,iBAAiB,CAAC,UAAD;AAAxB,GAFyB;AAGnC2B,EAAAA,iBAAiB,EAAE;AAAEF,IAAAA,GAAG,EAAEzB,iBAAiB,CAAC,mBAAD;AAAxB;AAHgB,CAAvC;AAMA,OAAO,SAAS4B,SAAT,CAAmBC,OAAnB,EAA4BtB,IAA5B,EAAkC;AACrC,QAAMuB,QAAQ,GAAGR,MAAM,CAACS,MAAP,CAAcnB,GAAG,CAACS,SAAlB,CAAjB,CADqC,CAGrC;AACA;;AACAS,EAAAA,QAAQ,CAACjC,IAAI,CAACY,KAAN,CAAR,GAAuB,cAAvB;AAEAqB,EAAAA,QAAQ,CAACjC,IAAI,CAACW,EAAN,CAAR,GAAoBD,IAAI,CAACC,EAAzB;AACAsB,EAAAA,QAAQ,CAACjC,IAAI,CAACa,IAAN,CAAR,GAAsBZ,WAAW,CAACa,GAAlC;AACAW,EAAAA,MAAM,CAACU,MAAP,CAAcF,QAAd,EAAwBvB,IAAI,CAAC0B,IAA7B;AAEA,SAAOH,QAAP;AACH","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nimport { keys, objectTypes } from \"./constants\";\nimport { createMethods, getterForProperty } from \"./util\";\nimport { setVersions, createAppRPC, _logInRPC } from \"./rpc\";\nimport { promisify } from \"../utils\";\n\nfunction setupApp(app, info) {\n    app[keys.id] = info.id;\n    app[keys.realm] = \"(App object)\";\n    app[keys.type] = objectTypes.APP;\n}\n\nexport default class App {\n    constructor(config) {\n        let info = createAppRPC(config);\n        setupApp(this, info);\n    }\n\n    /**\n     * Invokes the RPC client to set versions.\n     * @todo Turn this into a call to the static App._setVersions method if the RPC layer supported invoking remote static methods.\n     * @param {object} versions An object containing package and platform names and versions.\n     */\n    static _setVersions(versions) {\n        return setVersions(versions);\n    }\n\n    logIn(credentials) {\n        return promisify(cb => this._logIn(credentials, cb));\n    }\n}\n\ncreateMethods(App.prototype, objectTypes.APP, [\n    \"_logIn\",\n    \"switchUser\"\n], true);\n\nObject.defineProperties(App.prototype, {\n    currentUser: { get: getterForProperty(\"currentUser\") },\n    allUsers: { get: getterForProperty(\"allUsers\") },\n    emailPasswordAuth: { get: getterForProperty(\"emailPasswordAuth\") },\n});\n\nexport function createApp(realmId, info) {\n    const appProxy = Object.create(App.prototype);\n\n    // FIXME: This is currently necessary because util/createMethod expects\n    // the realm id to be present on any object that is used over rpc\n    appProxy[keys.realm] = \"(App object)\";\n\n    appProxy[keys.id] = info.id;\n    appProxy[keys.type] = objectTypes.APP;\n    Object.assign(appProxy, info.data);\n\n    return appProxy;\n}"]},"metadata":{},"sourceType":"module"}