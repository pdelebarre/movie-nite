{"ast":null,"code":"var _slicedToArray = require(\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _require = require('../lib-util'),\n    buildTaggedTemplate = _require.buildTaggedTemplate;\n\nvar dateToYYYYMMDD = function dateToYYYYMMDD(d) {\n  return [d.getFullYear(), ('0' + (d.getMonth() + 1)).slice(-2), ('0' + d.getDate()).slice(-2)].join('-');\n};\n\nvar _build = function build(ctx, arg) {\n  // compiled expression string\n  if (arg.exp) return arg.exp; // tagged template argument\n\n  if (arg.tag) return buildTaggedTemplate(ctx, arg.tag); // expression, subquery or fragment argument\n\n  return ctx.build(arg.arg);\n};\n\nvar unaryPre = function unaryPre(op) {\n  return {\n    minArgs: 1,\n    maxArgs: 1,\n    build: function build(ctx, args) {\n      return \"(\".concat(op, \" \").concat(_build(ctx, args[0]), \")\");\n    }\n  };\n};\n\nvar unaryPost = function unaryPost(op) {\n  return {\n    minArgs: 1,\n    maxArgs: 1,\n    build: function build(ctx, args) {\n      return \"(\".concat(_build(ctx, args[0]), \" \").concat(op, \")\");\n    }\n  };\n};\n\nvar unaryFunction = function unaryFunction(op) {\n  return {\n    minArgs: 1,\n    maxArgs: 1,\n    build: function build(ctx, args) {\n      return \"\".concat(op, \"(\").concat(_build(ctx, args[0]), \")\");\n    }\n  };\n};\n\nvar binary = function binary(op) {\n  return {\n    minArgs: 2,\n    maxArgs: 2,\n    build: function build(ctx, args) {\n      return \"(\".concat(_build(ctx, args[0]), \" \").concat(op, \" \").concat(_build(ctx, args[1]), \")\");\n    }\n  };\n};\n\nvar dateBinary = function dateBinary(op) {\n  return {\n    minArgs: 2,\n    maxArgs: 2,\n    build: function build(ctx, args) {\n      var inDate = args[1].arg;\n\n      if (typeof inDate.getMonth === 'function') {\n        args[1].arg = dateToYYYYMMDD(inDate);\n      }\n\n      return \"date(\".concat(_build(ctx, args[0]), \", 'YYYY-MM-DD') \").concat(op, \" \").concat(_build(ctx, args[1]));\n    }\n  };\n};\n\nvar ternary = function ternary(op1, op2) {\n  return {\n    minArgs: 3,\n    maxArgs: 3,\n    build: function build(ctx, args) {\n      return \"(\".concat(_build(ctx, args[0]), \" \").concat(op1, \" \").concat(_build(ctx, args[1]), \" \").concat(op2, \" \").concat(_build(ctx, args[2]), \")\");\n    }\n  };\n};\n\nvar nary = function nary(op) {\n  return {\n    minArgs: 1,\n    maxArgs: Number.MAX_SAFE_INTEGER,\n    build: function build(ctx, args) {\n      if (args.length === 1) return _build(ctx, args[0]);\n      var txt = '(';\n\n      for (var i = 0; i < args.length; ++i) {\n        if (i !== 0) txt += \" \".concat(op, \" \");\n        txt += _build(ctx, args[i]);\n      }\n\n      return txt + ')';\n    }\n  };\n};\n\nvar naryFunction = function naryFunction(fn) {\n  return {\n    minArgs: 1,\n    maxArgs: Number.MAX_SAFE_INTEGER,\n    build: function build(ctx, args) {\n      var txt = \"\".concat(fn, \"(\");\n\n      for (var i = 0; i < args.length; ++i) {\n        if (i !== 0) txt += \", \";\n        txt += _build(ctx, args[i]);\n      }\n\n      return txt + ')';\n    }\n  };\n};\n\nvar oneValue = {\n  minArgs: 1,\n  maxArgs: 1,\n  build: function build(ctx, args) {\n    return _build(ctx, args[0]);\n  }\n};\nvar compositeValue = {\n  minArgs: 1,\n  maxArgs: Number.MAX_SAFE_INTEGER,\n  build: function build(ctx, args) {\n    if (args.length === 1) return _build(ctx, args[0]);\n    var txt = '';\n\n    for (var i = 0; i < args.length; ++i) {\n      if (i !== 0) txt += ', ';\n      txt += _build(ctx, args[i]);\n    }\n\n    return args.length > 1 ? \"(\".concat(txt, \")\") : txt;\n  }\n};\n\nvar buildValuesList = function buildValuesList(ctx, values) {\n  if (values.length === 0) throw Error('Error: .in operation values list empty');\n  var txt = '(';\n\n  for (var i = 0; i < values.length; ++i) {\n    if (i !== 0) txt += ', ';\n    txt += ctx.build(values[i]);\n  }\n\n  return txt + ')';\n};\n\nvar membership = function membership(op) {\n  return {\n    minArgs: 2,\n    maxArgs: 2,\n    build: function build(ctx, _ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          arg1 = _ref2[0],\n          arg2 = _ref2[1];\n\n      return \"(\".concat(_build(ctx, arg1), \" \").concat(op, \" \").concat(Array.isArray(arg2.arg) ? buildValuesList(ctx, arg2.arg) : _build(ctx, arg2), \")\");\n    }\n  };\n};\n\nvar quantifiedComparison = function quantifiedComparison(op) {\n  return {\n    minArgs: 2,\n    maxArgs: 2,\n    build: function build(ctx, args) {\n      return \"(\".concat(_build(ctx, args[0]), \" \").concat(op, \"(\").concat(_build(ctx, args[1]), \"))\");\n    }\n  };\n};\n\nmodule.exports = {\n  build: _build,\n  unaryFunction: unaryFunction,\n  unaryPre: unaryPre,\n  unaryPost: unaryPost,\n  binary: binary,\n  ternary: ternary,\n  nary: nary,\n  naryFunction: naryFunction,\n  oneValue: oneValue,\n  compositeValue: compositeValue,\n  membership: membership,\n  quantifiedComparison: quantifiedComparison,\n  dateBinary: dateBinary\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-expression/util.js"],"names":["require","buildTaggedTemplate","dateToYYYYMMDD","d","getFullYear","getMonth","slice","getDate","join","build","ctx","arg","exp","tag","unaryPre","op","minArgs","maxArgs","args","unaryPost","unaryFunction","binary","dateBinary","inDate","ternary","op1","op2","nary","Number","MAX_SAFE_INTEGER","length","txt","i","naryFunction","fn","oneValue","compositeValue","buildValuesList","values","Error","membership","arg1","arg2","Array","isArray","quantifiedComparison","module","exports"],"mappings":"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","sourcesContent":["const { buildTaggedTemplate } = require('../lib-util')\n\nconst dateToYYYYMMDD = d => [\n    d.getFullYear(),\n    ('0' + (d.getMonth() + 1)).slice(-2),\n    ('0' + d.getDate()).slice(-2)\n].join('-');\n\nconst build = (ctx, arg) => {\n    // compiled expression string\n    if (arg.exp) return arg.exp\n    // tagged template argument\n    if (arg.tag) return buildTaggedTemplate(ctx, arg.tag)\n    // expression, subquery or fragment argument\n    return ctx.build(arg.arg)\n}\n\nconst unaryPre = op => ({\n    minArgs: 1,\n    maxArgs: 1,\n    build: (ctx, args) => `(${op} ${build(ctx, args[0])})`\n})\n\nconst unaryPost = op => ({\n    minArgs: 1,\n    maxArgs: 1,\n    build: (ctx, args) => `(${build(ctx, args[0])} ${op})`\n})\n\nconst unaryFunction = op => ({\n    minArgs: 1,\n    maxArgs: 1,\n    build: (ctx, args) => `${op}(${build(ctx, args[0])})`\n})\n\nconst binary = op => ({\n    minArgs: 2,\n    maxArgs: 2,\n    build: (ctx, args) => `(${build(ctx, args[0])} ${op} ${build(ctx, args[1])})`\n})\n\nconst dateBinary = op => ({\n    minArgs: 2,\n    maxArgs: 2,\n    build: (ctx, args) => {\n        const inDate = args[1].arg;\n        if (typeof inDate.getMonth === 'function') {\n            args[1].arg = dateToYYYYMMDD(inDate);\n        }\n        return `date(${build(ctx, args[0])}, 'YYYY-MM-DD') ${op} ${build(ctx, args[1])}`\n    }\n})\n\n\nconst ternary = (op1, op2) => ({\n    minArgs: 3,\n    maxArgs: 3,\n    build: (ctx, args) =>\n        `(${build(ctx, args[0])} ${op1} ${build(ctx, args[1])} ${op2} ${build(\n            ctx,\n            args[2]\n        )})`\n})\n\nconst nary = op => ({\n    minArgs: 1,\n    maxArgs: Number.MAX_SAFE_INTEGER,\n    build: (ctx, args) => {\n        if (args.length === 1) return build(ctx, args[0])\n        let txt = '('\n        for (let i = 0; i < args.length; ++i) {\n            if (i !== 0) txt += ` ${op} `\n            txt += build(ctx, args[i])\n        }\n        return txt + ')'\n    }\n})\n\nconst naryFunction = fn => ({\n    minArgs: 1,\n    maxArgs: Number.MAX_SAFE_INTEGER,\n    build: (ctx, args) => {\n        let txt = `${fn}(`\n        for (let i = 0; i < args.length; ++i) {\n            if (i !== 0) txt += `, `\n            txt += build(ctx, args[i])\n        }\n        return txt + ')'\n    }\n})\n\nconst oneValue = {\n    minArgs: 1,\n    maxArgs: 1,\n    build: (ctx, args) => build(ctx, args[0])\n}\n\nconst compositeValue = {\n    minArgs: 1,\n    maxArgs: Number.MAX_SAFE_INTEGER,\n    build: (ctx, args) => {\n        if (args.length === 1) return build(ctx, args[0])\n        let txt = ''\n        for (let i = 0; i < args.length; ++i) {\n            if (i !== 0) txt += ', '\n            txt += build(ctx, args[i])\n        }\n        return args.length > 1 ? `(${txt})` : txt\n    }\n}\n\nconst buildValuesList = (ctx, values) => {\n    if (values.length === 0) throw Error('Error: .in operation values list empty')\n    let txt = '('\n    for (let i = 0; i < values.length; ++i) {\n        if (i !== 0) txt += ', '\n        txt += ctx.build(values[i])\n    }\n    return txt + ')'\n}\n\nconst membership = op => ({\n    minArgs: 2,\n    maxArgs: 2,\n    build: (ctx, [arg1, arg2]) =>\n        `(${build(ctx, arg1)} ${op} ${Array.isArray(arg2.arg)\n            ? buildValuesList(ctx, arg2.arg)\n            : build(ctx, arg2)\n        })`\n})\n\nconst quantifiedComparison = op => ({\n    minArgs: 2,\n    maxArgs: 2,\n    build: (ctx, args) => `(${build(ctx, args[0])} ${op}(${build(ctx, args[1])}))`\n})\n\nmodule.exports = {\n    build,\n    unaryFunction,\n    unaryPre,\n    unaryPost,\n    binary,\n    ternary,\n    nary,\n    naryFunction,\n    oneValue,\n    compositeValue,\n    membership,\n    quantifiedComparison,\n    dateBinary\n}\n"]},"metadata":{},"sourceType":"script"}