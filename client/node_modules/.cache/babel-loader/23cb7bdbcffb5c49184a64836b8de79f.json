{"ast":null,"code":"var _objectSpread = require(\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _require = require('../lib-sq'),\n    methods = _require.methods,\n    queries = _require.queries,\n    query = _require.query,\n    clauses = _require.clauses,\n    common = _require.common;\n\nvar fromItems = common.fromItems,\n    expressions = common.expressions;\nvar wth = clauses.wth,\n    from = clauses.from,\n    where = clauses.where,\n    group = clauses.group,\n    having = clauses.having,\n    setop = clauses.setop,\n    order = clauses.order,\n    limit = clauses.limit,\n    offset = clauses.offset,\n    returning = clauses.returning,\n    set = clauses.set;\nvar postgresMethods = {\n  distinctOn: {\n    updateContext: function updateContext(ctx, args) {\n      if (ctx.distinct) {\n        ctx.distinct.push(args);\n      } else {\n        ctx.distinct = [args];\n      }\n    }\n  }\n}; // SELECT supports .distinctOn(...expressions)\n\nvar select = function select(ctx) {\n  var txt = 'select ';\n\n  if (ctx.distinct) {\n    txt += 'distinct ';\n\n    if (ctx.distinct.length) {\n      txt += \"on (\".concat(expressions(ctx, ctx.distinct), \") \");\n    }\n  }\n\n  txt += expressions(ctx, ctx.ret) || '*';\n  return txt;\n}; // DELETE: first .from call is used in the DELETE clause\n// subsequent .from calls are used in the USING clause\n\n\nvar del = function del(ctx) {\n  var txt = fromItems(ctx, ctx.frm, 0, 1);\n  return txt && \"delete from \".concat(txt);\n};\n\nvar using = function using(ctx) {\n  var txt = fromItems(ctx, ctx.frm, 1);\n  return txt && \"using \".concat(txt);\n}; // UPDATE: first .from call is used in the UPDATE clause\n// subsequent .from calls are used in the FROM clause\n\n\nvar update = function update(ctx) {\n  var txt = fromItems(ctx, ctx.frm, 0, 1);\n  return txt && \"update \".concat(txt);\n};\n\nvar updateFrom = function updateFrom(ctx) {\n  var txt = fromItems(ctx, ctx.frm, 1);\n  return txt && \"from \".concat(txt);\n};\n\nmodule.exports = {\n  methods: _objectSpread(_objectSpread({}, methods), postgresMethods),\n  queries: _objectSpread(_objectSpread({}, queries), {}, {\n    select: query(wth, select, from, where, group, having, setop, order, limit, offset),\n    delete: query(wth, del, using, where, returning),\n    update: query(wth, update, set, updateFrom, where, returning)\n  }),\n  properties: {\n    rollup: {\n      value: function value() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return {\n          type: 'rollup',\n          args: args\n        };\n      }\n    },\n    cube: {\n      value: function value() {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return {\n          type: 'cube',\n          args: args\n        };\n      }\n    },\n    groupingSets: {\n      value: function value() {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return {\n          type: 'grouping sets',\n          args: args\n        };\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/dialect-postgres/query.js"],"names":["require","methods","queries","query","clauses","common","fromItems","expressions","wth","from","where","group","having","setop","order","limit","offset","returning","set","postgresMethods","distinctOn","updateContext","ctx","args","distinct","push","select","txt","length","ret","del","frm","using","update","updateFrom","module","exports","delete","properties","rollup","value","type","cube","groupingSets"],"mappings":"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","sourcesContent":["const { methods, queries, query, clauses, common } = require('../lib-sq')\n\nconst { fromItems, expressions } = common\nconst {\n  wth,\n  from,\n  where,\n  group,\n  having,\n  setop,\n  order,\n  limit,\n  offset,\n  returning,\n  set\n} = clauses\n\nconst postgresMethods = {\n  distinctOn: {\n    updateContext: (ctx, args) => {\n      if (ctx.distinct) {\n        ctx.distinct.push(args)\n      } else {\n        ctx.distinct = [args]\n      }\n    }\n  }\n}\n\n// SELECT supports .distinctOn(...expressions)\nconst select = ctx => {\n  let txt = 'select '\n  if (ctx.distinct) {\n    txt += 'distinct '\n    if (ctx.distinct.length) {\n      txt += `on (${expressions(ctx, ctx.distinct)}) `\n    }\n  }\n  txt += expressions(ctx, ctx.ret) || '*'\n  return txt\n}\n// DELETE: first .from call is used in the DELETE clause\n// subsequent .from calls are used in the USING clause\nconst del = ctx => {\n  const txt = fromItems(ctx, ctx.frm, 0, 1)\n  return txt && `delete from ${txt}`\n}\nconst using = ctx => {\n  const txt = fromItems(ctx, ctx.frm, 1)\n  return txt && `using ${txt}`\n}\n// UPDATE: first .from call is used in the UPDATE clause\n// subsequent .from calls are used in the FROM clause\nconst update = ctx => {\n  const txt = fromItems(ctx, ctx.frm, 0, 1)\n  return txt && `update ${txt}`\n}\nconst updateFrom = ctx => {\n  const txt = fromItems(ctx, ctx.frm, 1)\n  return txt && `from ${txt}`\n}\n\nmodule.exports = {\n  methods: { ...methods, ...postgresMethods },\n  queries: {\n    ...queries,\n    select: query(\n      wth,\n      select,\n      from,\n      where,\n      group,\n      having,\n      setop,\n      order,\n      limit,\n      offset\n    ),\n    delete: query(wth, del, using, where, returning),\n    update: query(wth, update, set, updateFrom, where, returning)\n  },\n  properties: {\n    rollup: {\n      value: (...args) => {\n        return {\n          type: 'rollup',\n          args\n        }\n      }\n    },\n    cube: {\n      value: (...args) => {\n        return {\n          type: 'cube',\n          args\n        }\n      }\n    },\n    groupingSets: {\n      value: (...args) => {\n        return {\n          type: 'grouping sets',\n          args\n        }\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}