{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useMongoDB } from \"./store/mongodb\";\nimport { useRealmApp } from \"./store/realm\";\nimport LogInForm from \"./components/LoginForm\";\nimport MovieList from \"./components/MovieList\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport { Pane } from \"evergreen-ui\";\nimport TestMongo from \"./tests/TestMongo\";\nimport GENRES from \"./resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  _s();\n\n  const {\n    logIn,\n    logOut,\n    user\n  } = useRealmApp();\n  const {\n    db\n  } = useMongoDB();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async ({\n    movie\n  }) => {\n    console.log(`adding `, movie);\n    const genres = getGenres(movie.genre_ids);\n    await db.collection(\"movies\").insertOne({\n      id: movie.id,\n      title: movie.title,\n      genres: genres,\n      posterpath: movie.poster_path,\n      overview: movie.overview,\n      voteaverage: Number(movie.vote_average),\n      watched: false\n    }).then(result => console.log(`Successfully inserted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to insert item: ${err}`));\n  };\n\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      if (user && db) {\n        const authoredMovies = await db.collection(\"movies\").find();\n        setMovies(authoredMovies);\n      }\n    }\n\n    wrapMovieQuery();\n  }, [user, db, refresh]);\n\n  async function handleLogIn() {\n    await logIn(email, password);\n  }\n\n  const selectMovieHandler = () => {\n    setRefresh(st => !st);\n  };\n\n  return user && db && user.state === \"active\" ? /*#__PURE__*/_jsxDEV(Pane, {\n    width: \"90%\",\n    padding: 16,\n    background: \"purpleTint\",\n    borderRadius: 3,\n    elevation: 4,\n    children: [/*#__PURE__*/_jsxDEV(Lycos, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TestMongo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(LogInForm, {\n    email: email,\n    setEmail: setEmail,\n    password: password,\n    setPassword: setPassword,\n    handleLogIn: handleLogIn\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"4D9xjdsPe9fO6EiZUP0BwgotCXc=\", false, function () {\n  return [useRealmApp, useMongoDB];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["React","useState","useEffect","useMongoDB","useRealmApp","LogInForm","MovieList","SearchMovie","Pane","TestMongo","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","App","logIn","logOut","user","db","email","setEmail","password","setPassword","movies","setMovies","refresh","setRefresh","addMovie","movie","genres","collection","insertOne","title","posterpath","poster_path","overview","voteaverage","Number","vote_average","watched","then","insertedId","catch","err","error","wrapMovieQuery","authoredMovies","handleLogIn","selectMovieHandler","st","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useMongoDB } from \"./store/mongodb\";\nimport { useRealmApp } from \"./store/realm\";\n\nimport LogInForm from \"./components/LoginForm\";\nimport MovieList from \"./components/MovieList\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\n\nimport { Pane } from \"evergreen-ui\";\nimport TestMongo from \"./tests/TestMongo\";\n\nimport GENRES from \"./resources/genres\";\n\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  const { logIn, logOut, user } = useRealmApp();\n  const { db } = useMongoDB();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n\n  const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async ({movie}) => {\n    console.log(`adding `, movie);\n\n    const genres = getGenres(movie.genre_ids);\n    await db\n      .collection(\"movies\")\n      .insertOne({\n        id: movie.id,\n        title: movie.title,\n        genres: genres,\n        posterpath: movie.poster_path,\n        overview: movie.overview,\n        voteaverage: Number(movie.vote_average),\n        watched: false,\n      })\n      .then((result) =>\n        console.log(`Successfully inserted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to insert item: ${err}`));\n  };\n\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      if (user && db) {\n        const authoredMovies = await db.collection(\"movies\").find();\n        setMovies(authoredMovies);\n      }\n    }\n    wrapMovieQuery();\n  }, [user, db, refresh]);\n\n\n  async function handleLogIn() {\n    await logIn(email, password);\n  }\n\n  const selectMovieHandler = () => {\n      setRefresh(st => !st);\n  }\n\n  return user && db && user.state === \"active\" ? (\n    <Pane\n      width=\"90%\"\n      padding={16}\n      background=\"purpleTint\"\n      borderRadius={3}\n      elevation={4}\n    >\n      {/* <SearchMovie onClick={selectMovieHandler} onSubmitHandler={addMovie}/> */}\n      {/* <MovieList movies={movies} user={user} logOut={logOut} /> */}\n      <Lycos/>\n      <TestMongo />\n    </Pane>\n  ) : (\n    <LogInForm\n      email={email}\n      setEmail={setEmail}\n      password={password}\n      setPassword={setPassword}\n      handleLogIn={handleLogIn}\n    />\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}