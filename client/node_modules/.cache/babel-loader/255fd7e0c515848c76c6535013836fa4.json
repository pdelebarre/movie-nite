{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieGenres from \"./components/Search/MovieGenres\"; // import DUMMY_MOVIES from \"./resources/dummy_movies\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetchGenres = async e => {\n  e.preventDefault();\n  console.log(\"fetching genres\");\n  const url = `https://api.themoviedb.org/3/genre/movie/list?api_key=5dcf7f28a88be0edc01bbbde06f024ab&language=en-US&id=14`;\n\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    console.log(data);\n    return data.genres;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst getGenres = genre_ids => {\n  let genres = fetchGenres();\n  let genres_array = [];\n  genre_ids.map(id => {\n    genres_array.push(genres[id]);\n  });\n  return genres_array.split(0, 2);\n};\n\nconst App = () => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n\n  const movieExists = id => {\n    return movies.some(movie => {\n      return movie.id === id;\n    });\n  };\n\n  const addMovie = movie => {\n    // console.log(`movie from App`, movie.poster_path);\n    if (movieExists(movie.id)) {\n      console.log(`duplicate!`, movie);\n      return;\n    }\n\n    let genres = getGenres(movie.genre_ids);\n    let newMovie = { // id: movie.id, // uuidv4(),\n      // title: movie.title,\n      // genre: movie.genre, // TODO lookup genre\n      // poster_path: movie.poster_path,\n      ...movie,\n      genres: genres,\n      watched: false\n    };\n    setMovies([...movies, newMovie]);\n  };\n\n  const delMovie = id => {\n    setMovies(movies.filter(movie => movie.id !== id));\n  };\n\n  const markWatched = id => {\n    setMovies(movies.map(movie => movie.id === id ? { ...movie,\n      watched: !movie.watched\n    } : movie));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchMovie, {\n      onSelect: addMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Movies, {\n      movies: movies,\n      delMovie: delMovie,\n      markWatched: markWatched\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"m6SRVq9N0POigGpMlnh/6woD7xI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["useState","Movies","SearchMovie","MovieGenres","fetchGenres","e","preventDefault","console","log","url","res","fetch","data","json","genres","err","error","getGenres","genre_ids","genres_array","map","id","push","split","App","movies","setMovies","movieExists","some","movie","addMovie","newMovie","watched","delMovie","filter","markWatched"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieGenres from \"./components/Search/MovieGenres\";\n// import DUMMY_MOVIES from \"./resources/dummy_movies\";\n\nconst fetchGenres = async (e) => {\n  e.preventDefault();\n  console.log(\"fetching genres\");\n\n  const url = `https://api.themoviedb.org/3/genre/movie/list?api_key=5dcf7f28a88be0edc01bbbde06f024ab&language=en-US&id=14`;\n\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    console.log(data);\n    return data.genres;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst getGenres = (genre_ids) => {\n  let genres = fetchGenres();\n  let genres_array = [];\n  genre_ids.map((id) => {\n    genres_array.push(genres[id]);\n  });\n\n  return genres_array.split(0, 2);\n};\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n\n  const movieExists = (id) => {\n    return movies.some((movie) => {\n      return movie.id === id;\n    });\n  };\n\n  const addMovie = (movie) => {\n    // console.log(`movie from App`, movie.poster_path);\n\n    if (movieExists(movie.id)) {\n      console.log(`duplicate!`, movie);\n      return;\n    }\n\n    let genres = getGenres(movie.genre_ids);\n\n    let newMovie = {\n      // id: movie.id, // uuidv4(),\n      // title: movie.title,\n      // genre: movie.genre, // TODO lookup genre\n      // poster_path: movie.poster_path,\n      ...movie,\n      genres: genres,\n      watched: false,\n    };\n\n    setMovies([...movies, newMovie]);\n  };\n\n  const delMovie = (id) => {\n    setMovies(movies.filter((movie) => movie.id !== id));\n  };\n\n  const markWatched = (id) => {\n    setMovies(\n      movies.map((movie) =>\n        movie.id === id ? { ...movie, watched: !movie.watched } : movie\n      )\n    );\n  };\n\n  return (\n    <div>\n      <SearchMovie onSelect={addMovie} />\n      {/* <MovieForm addMovie={addMovie} /> */}\n      <Movies movies={movies} delMovie={delMovie} markWatched={markWatched} />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}