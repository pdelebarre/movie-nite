{"ast":null,"code":"var _objectSpread = require(\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar createExpressionCompiler = require('./compile');\n\nvar _require = require('../lib-util'),\n    normalKey = _require.normalKey;\n\nvar aggregator = function aggregator(op) {\n  return function (columnName) {\n    return \"\".concat(op, \"(\").concat(normalKey(columnName), \")\");\n  };\n};\n\nmodule.exports = function (_ref) {\n  var defaultContext = _ref.defaultContext,\n      expression = _ref.expression;\n  var expressions = expression.expressions;\n  var newContext = createNewContext(defaultContext);\n  var compile = createExpressionCompiler(expressions);\n\n  var builder = function builder() {}; // must not be object literal\n\n\n  var chain = createChain(builder);\n  Object.defineProperties(builder, _objectSpread(_objectSpread({}, builderProperties({\n    compile: compile,\n    newContext: newContext\n  })), methodProperties({\n    expressions: expressions,\n    chain: chain\n  })));\n  var ret = chain();\n  ret.max = aggregator('max');\n  ret.min = aggregator('min');\n  ret.avg = aggregator('avg');\n  ret.count = aggregator('count');\n  ret.sum = aggregator('sum');\n  return ret;\n};\n\nvar builderProperties = function builderProperties(_ref2) {\n  var compile = _ref2.compile,\n      newContext = _ref2.newContext;\n  return {\n    _build: {\n      value: function value(inherit) {\n        return compile(newContext(inherit), this.current);\n      }\n    },\n    query: {\n      get: function get() {\n        return this._build();\n      }\n    },\n    unparameterized: {\n      get: function get() {\n        return this._build({\n          unparameterized: true\n        }).text;\n      }\n    }\n  };\n};\n\nvar createNewContext = function createNewContext(defaultContext) {\n  var build = defaultContext.build,\n      parameterize = defaultContext.parameterize,\n      escape = defaultContext.escape,\n      mapKey = defaultContext.mapKey;\n  return function (inherit) {\n    var _ref3 = inherit || {},\n        _ref3$params = _ref3.params,\n        params = _ref3$params === void 0 ? [] : _ref3$params,\n        _ref3$unparameterized = _ref3.unparameterized,\n        unparameterized = _ref3$unparameterized === void 0 ? false : _ref3$unparameterized;\n\n    return {\n      // EasyQB instance properties\n      build: build,\n      parameterize: parameterize,\n      escape: escape,\n      mapKey: mapKey,\n      // inherited properties\n      params: params,\n      unparameterized: unparameterized\n    };\n  };\n};\n\nvar createChain = function createChain(prototype) {\n  var chain = function chain(current) {\n    var fn = function fn() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return chain({\n        prev: current,\n        args: args\n      });\n    };\n\n    fn.current = current;\n    Object.setPrototypeOf(fn, prototype);\n    return fn;\n  };\n\n  return chain;\n};\n\nvar methodProperties = function methodProperties(_ref4) {\n  var expressions = _ref4.expressions,\n      chain = _ref4.chain;\n  var properties = {};\n\n  var _loop = function _loop(name) {\n    properties[name] = {\n      get: function get() {\n        return chain({\n          prev: this.current,\n          name: name\n        });\n      }\n    };\n  };\n\n  for (var name in expressions) {\n    _loop(name);\n  }\n\n  return properties;\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/builder-expression/index.js"],"names":["createExpressionCompiler","require","normalKey","aggregator","op","columnName","module","exports","defaultContext","expression","expressions","newContext","createNewContext","compile","builder","chain","createChain","Object","defineProperties","builderProperties","methodProperties","ret","max","min","avg","count","sum","_build","value","inherit","current","query","get","unparameterized","text","build","parameterize","escape","mapKey","params","prototype","fn","args","prev","setPrototypeOf","properties","name"],"mappings":"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","sourcesContent":["const createExpressionCompiler = require('./compile')\nconst { normalKey } = require('../lib-util');\n\nconst aggregator = (op) => (columnName) => `${op}(${normalKey(columnName)})`;\n\nmodule.exports = ({ defaultContext, expression }) => {\n  const { expressions } = expression\n  const newContext = createNewContext(defaultContext)\n  const compile = createExpressionCompiler(expressions)\n  const builder = () => {} // must not be object literal\n  const chain = createChain(builder)\n  Object.defineProperties(builder, {\n    ...builderProperties({ compile, newContext }),\n    ...methodProperties({ expressions, chain }),\n  })\n  const ret = chain();\n  ret.max = aggregator('max');\n  ret.min = aggregator('min');\n  ret.avg = aggregator('avg');\n  ret.count = aggregator('count');\n  ret.sum = aggregator('sum');\n  return ret;\n}\n\nconst builderProperties = ({ compile, newContext }) => ({\n  _build: {\n    value: function(inherit) {\n      return compile(newContext(inherit), this.current)\n    }\n  },\n  query: {\n    get: function() {\n      return this._build()\n    }\n  },\n  unparameterized: {\n    get: function() {\n      return this._build({ unparameterized: true }).text\n    }\n  }\n})\n\nconst createNewContext = defaultContext => {\n  const { build, parameterize, escape, mapKey } = defaultContext\n  return inherit => {\n    const { params = [], unparameterized = false } = inherit || {}\n    return {\n      // EasyQB instance properties\n      build,\n      parameterize,\n      escape,\n      mapKey,\n\n      // inherited properties\n      params,\n      unparameterized\n    }\n  }\n}\n\nconst createChain = prototype => {\n  const chain = current => {\n    const fn = (...args) => chain({ prev: current, args })\n    fn.current = current\n    Object.setPrototypeOf(fn, prototype)\n    return fn\n  }\n  return chain\n}\n\nconst methodProperties = ({ expressions, chain }) => {\n  const properties = {}\n  for (const name in expressions) {\n    properties[name] = {\n      get: function() {\n        return chain({ prev: this.current, name })\n      }\n    }\n  }\n  return properties\n}\n"]},"metadata":{},"sourceType":"script"}