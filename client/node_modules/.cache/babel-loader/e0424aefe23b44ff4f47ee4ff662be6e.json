{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nconst {\n  EJSON\n} = require(\"bson\");\n\nfunction waitForCompletion(session, fn, timeout, timeoutErrorMessage) {\n  const waiter = new Promise((resolve, reject) => {\n    fn.call(session, error => {\n      if (error === undefined) {\n        setTimeout(() => resolve(), 1);\n      } else {\n        setTimeout(() => reject(error), 1);\n      }\n    });\n  });\n\n  if (timeout === undefined) {\n    return waiter;\n  }\n\n  return Promise.race([waiter, new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(timeoutErrorMessage);\n    }, timeout);\n  })]);\n}\n\nconst instanceMethods = {\n  get config() {\n    // Parse the EJSON properties\n    const config = this._config;\n\n    if (config) {\n      return { ...config,\n        partitionValue: EJSON.parse(config.partitionValue)\n      };\n    }\n  },\n\n  uploadAllLocalChanges(timeout) {\n    return waitForCompletion(this, this._waitForUploadCompletion, timeout, `Uploading changes did not complete in ${timeout} ms.`);\n  },\n\n  downloadAllServerChanges(timeout) {\n    return waitForCompletion(this, this._waitForDownloadCompletion, timeout, `Downloading changes did not complete in ${timeout} ms.`);\n  }\n\n};\nconst staticMethods = {// none\n};\nmodule.exports = {\n  static: staticMethods,\n  instance: instanceMethods\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/session.js"],"names":["EJSON","require","waitForCompletion","session","fn","timeout","timeoutErrorMessage","waiter","Promise","resolve","reject","call","error","undefined","setTimeout","race","instanceMethods","config","_config","partitionValue","parse","uploadAllLocalChanges","_waitForUploadCompletion","downloadAllServerChanges","_waitForDownloadCompletion","staticMethods","module","exports","static","instance"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,MAAD,CAAzB;;AAEA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,EAApC,EAAwCC,OAAxC,EAAiDC,mBAAjD,EAAsE;AACpE,QAAMC,MAAM,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5CN,IAAAA,EAAE,CAACO,IAAH,CAAQR,OAAR,EAAkBS,KAAD,IAAW;AACxB,UAAIA,KAAK,KAAKC,SAAd,EAAyB;AACrBC,QAAAA,UAAU,CAAC,MAAML,OAAO,EAAd,EAAkB,CAAlB,CAAV;AACH,OAFD,MAEO;AACHK,QAAAA,UAAU,CAAC,MAAMJ,MAAM,CAACE,KAAD,CAAb,EAAsB,CAAtB,CAAV;AACH;AACJ,KAND;AAOH,GARc,CAAf;;AASA,MAAIP,OAAO,KAAKQ,SAAhB,EAA2B;AACvB,WAAON,MAAP;AACH;;AACD,SAAOC,OAAO,CAACO,IAAR,CAAa,CAChBR,MADgB,EAEhB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BI,IAAAA,UAAU,CAAC,MAAM;AACbJ,MAAAA,MAAM,CAACJ,mBAAD,CAAN;AACH,KAFS,EAEPD,OAFO,CAAV;AAGH,GAJD,CAFgB,CAAb,CAAP;AAQD;;AAED,MAAMW,eAAe,GAAG;AACtB,MAAIC,MAAJ,GAAa;AACX;AACA,UAAMA,MAAM,GAAG,KAAKC,OAApB;;AACA,QAAID,MAAJ,EAAY;AACV,aAAO,EACL,GAAGA,MADE;AAELE,QAAAA,cAAc,EAAEnB,KAAK,CAACoB,KAAN,CAAYH,MAAM,CAACE,cAAnB;AAFX,OAAP;AAID;AACF,GAVqB;;AAYtBE,EAAAA,qBAAqB,CAAChB,OAAD,EAAU;AAC7B,WAAOH,iBAAiB,CAAC,IAAD,EAAO,KAAKoB,wBAAZ,EAAsCjB,OAAtC,EAAgD,yCAAwCA,OAAQ,MAAhG,CAAxB;AACD,GAdqB;;AAgBtBkB,EAAAA,wBAAwB,CAAClB,OAAD,EAAU;AAChC,WAAOH,iBAAiB,CAAC,IAAD,EAAO,KAAKsB,0BAAZ,EAAwCnB,OAAxC,EAAkD,2CAA0CA,OAAQ,MAApG,CAAxB;AACD;;AAlBqB,CAAxB;AAqBA,MAAMoB,aAAa,GAAG,CACpB;AADoB,CAAtB;AAIAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,EAAEH,aADO;AAEfI,EAAAA,QAAQ,EAAEb;AAFK,CAAjB","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nconst { EJSON } = require(\"bson\");\n\nfunction waitForCompletion(session, fn, timeout, timeoutErrorMessage) {\n  const waiter = new Promise((resolve, reject) => {\n      fn.call(session, (error) => {\n          if (error === undefined) {\n              setTimeout(() => resolve(), 1);\n          } else {\n              setTimeout(() => reject(error), 1);\n          }\n      });\n  });\n  if (timeout === undefined) {\n      return waiter;\n  }\n  return Promise.race([\n      waiter,\n      new Promise((resolve, reject) => {\n          setTimeout(() => {\n              reject(timeoutErrorMessage);\n          }, timeout);\n      })\n  ]);\n}\n\nconst instanceMethods = {\n  get config() {\n    // Parse the EJSON properties\n    const config = this._config;\n    if (config) {\n      return {\n        ...config,\n        partitionValue: EJSON.parse(config.partitionValue),\n      };\n    }\n  },\n\n  uploadAllLocalChanges(timeout) {\n    return waitForCompletion(this, this._waitForUploadCompletion, timeout, `Uploading changes did not complete in ${timeout} ms.`);\n  },\n\n  downloadAllServerChanges(timeout) {\n    return waitForCompletion(this, this._waitForDownloadCompletion, timeout, `Downloading changes did not complete in ${timeout} ms.`);\n  },\n}\n\nconst staticMethods = {\n  // none\n};\n\nmodule.exports = {\n  static: staticMethods,\n  instance: instanceMethods,\n};\n"]},"metadata":{},"sourceType":"script"}