{"ast":null,"code":"var _objectSpread = require(\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar createNewContext = require('./context');\n\nvar createQueryBuilder = function createQueryBuilder(_ref) {\n  var defaultContext = _ref.defaultContext,\n      query = _ref.query,\n      e = _ref.e,\n      config = _ref.config;\n  var queries = query.queries,\n      methods = query.methods,\n      properties = query.properties;\n  var newContext = createNewContext(defaultContext);\n  var reducers = createReducers(methods);\n  var updateContext = applyReducers(reducers);\n\n  reducers.extend = function (ctx, args) {\n    var arr = Array.isArray(args[0]) ? args[0] : args;\n\n    for (var i = 0; i < arr.length; ++i) {\n      updateContext(arr[i].method, ctx);\n    }\n  };\n\n  var builder = function builder() {}; // must not be object literal\n\n\n  var chain = createChain(builder);\n  var executeProperties = {\n    one: {\n      value: function () {\n        var _value = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var ret;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return config.oneCallback(this.query, config.tableName, config.userAssociatedRecordsOnly);\n\n                case 2:\n                  ret = _context.sent;\n                  return _context.abrupt(\"return\", ret);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function value() {\n          return _value.apply(this, arguments);\n        }\n\n        return value;\n      }()\n    },\n    all: {\n      value: function () {\n        var _value2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var ret;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return config.allCallback(this.query, config.tableName, config.userAssociatedRecordsOnly);\n\n                case 2:\n                  ret = _context2.sent;\n                  return _context2.abrupt(\"return\", ret);\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function value() {\n          return _value2.apply(this, arguments);\n        }\n\n        return value;\n      }()\n    },\n    _tableName: {\n      get: function get() {\n        return config.tableName;\n      }\n    }\n  }; // EasyQB no access to from\n\n  var _methodProperties = methodProperties({\n    methods: methods,\n    chain: chain\n  });\n\n  delete _methodProperties.from;\n  Object.defineProperties(builder, _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, builderProperties({\n    chain: chain,\n    newContext: newContext,\n    updateContext: updateContext,\n    queries: queries\n  })), _methodProperties), executeProperties), properties), {}, {\n    e: {\n      value: e\n    }\n  }));\n  return chain();\n};\n/** Creates a new builder instance */\n\n\nvar createChain = function createChain(prototype) {\n  var chain = function chain(method) {\n    var fn = function fn() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return chain({\n        name: 'express',\n        args: args,\n        prev: method\n      });\n    };\n\n    fn.method = method;\n    Object.setPrototypeOf(fn, prototype);\n    return fn;\n  };\n\n  return chain;\n};\n/** Creates an object containing all method reducers */\n\n\nvar createReducers = function createReducers(methods) {\n  var reducers = {};\n\n  for (var name in methods) {\n    var _methods$name = methods[name],\n        updateContext = _methods$name.updateContext,\n        _methods$name$propert = _methods$name.properties,\n        properties = _methods$name$propert === void 0 ? {} : _methods$name$propert;\n    reducers[name] = updateContext; // some methods have subproperties, e.g. .unionAll\n\n    for (var key in properties) {\n      reducers[\"\".concat(name, \".\").concat(key)] = properties[key];\n    }\n  }\n\n  return reducers;\n};\n/** Follows a method chain, applying each method's reducer, to ctx */\n\n\nvar applyReducers = function applyReducers(reducers) {\n  return function (method, ctx) {\n    // follow method links to construct methods array (in reverse)\n    var methods = [];\n\n    for (; method !== undefined; method = method.prev) {\n      methods.push(method);\n    } // build methods object by processing methods in call order\n\n\n    var express = {\n      id: 0\n    };\n\n    for (var i = methods.length - 1; i >= 0; --i) {\n      var _method = methods[i];\n\n      reducers[_method.name](ctx, _method.args, express);\n    }\n\n    return ctx;\n  };\n};\n/** Default properties of all SQL Query Builders */\n\n\nvar builderProperties = function builderProperties(_ref2) {\n  var newContext = _ref2.newContext,\n      updateContext = _ref2.updateContext,\n      queries = _ref2.queries;\n  return {\n    _build: {\n      value: function value(inheritedContext) {\n        var ctx = updateContext(this.method, newContext(inheritedContext));\n        return queries[ctx.type](ctx);\n      }\n    },\n    query: {\n      get: function get() {\n        return this._build();\n      }\n    },\n    unparameterized: {\n      get: function get() {\n        return this._build({\n          unparameterized: true\n        }).text;\n      }\n    }\n  };\n};\n/** Builds object containing a property for every query building method */\n\n\nvar methodProperties = function methodProperties(_ref3) {\n  var methods = _ref3.methods,\n      chain = _ref3.chain;\n  var properties = {};\n\n  var _loop = function _loop(name) {\n    var getter = methods[name].getter;\n\n    if (getter) {\n      // add getter methods\n      properties[name] = {\n        get: function get() {\n          return chain({\n            name: name,\n            prev: this.method\n          });\n        }\n      };\n    } else {\n      // add function call methods\n      properties[name] = {\n        value: function value() {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          return chain({\n            name: name,\n            args: args,\n            prev: this.method\n          });\n        }\n      };\n    }\n  };\n\n  for (var name in methods) {\n    _loop(name);\n  }\n\n  return properties;\n};\n\nmodule.exports = createQueryBuilder;","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/builder-sq/index.js"],"names":["createNewContext","require","createQueryBuilder","defaultContext","query","e","config","queries","methods","properties","newContext","reducers","createReducers","updateContext","applyReducers","extend","ctx","args","arr","Array","isArray","i","length","method","builder","chain","createChain","executeProperties","one","value","oneCallback","tableName","userAssociatedRecordsOnly","ret","all","allCallback","_tableName","get","_methodProperties","methodProperties","from","Object","defineProperties","builderProperties","prototype","fn","name","prev","setPrototypeOf","key","undefined","push","express","id","_build","inheritedContext","type","unparameterized","text","getter","module","exports"],"mappings":"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","sourcesContent":["const createNewContext = require('./context')\nconst createQueryBuilder = ({ defaultContext, query, e, config }) => {\n    const { queries, methods, properties } = query\n    const newContext = createNewContext(defaultContext)\n    const reducers = createReducers(methods)\n    const updateContext = applyReducers(reducers)\n    reducers.extend = (ctx, args) => {\n        const arr = Array.isArray(args[0]) ? args[0] : args\n        for (let i = 0; i < arr.length; ++i) {\n            updateContext(arr[i].method, ctx)\n        }\n    }\n    const builder = () => { } // must not be object literal\n    const chain = createChain(builder)\n\n    const executeProperties = {\n        one: {\n            value: async function () {\n                const ret = await config.oneCallback(this.query, config.tableName, config.userAssociatedRecordsOnly)\n                return ret;\n            }\n        },\n        all: {\n            value: async function () {\n                const ret = await config.allCallback(this.query, config.tableName, config.userAssociatedRecordsOnly)\n                return ret;\n            }\n        },\n        _tableName: {\n            get: function () {\n                return config.tableName\n            }\n        }\n    }\n\n    // EasyQB no access to from\n    const _methodProperties = methodProperties({ methods, chain });\n    delete _methodProperties.from;\n\n    Object.defineProperties(builder, {\n        ...builderProperties({ chain, newContext, updateContext, queries }),\n        ..._methodProperties,\n        ...executeProperties,\n        ...properties,\n        e: {\n            value: e\n        }\n    })\n    return chain()\n}\n\n/** Creates a new builder instance */\nconst createChain = prototype => {\n    const chain = method => {\n        const fn = (...args) => chain({ name: 'express', args, prev: method })\n        fn.method = method\n        Object.setPrototypeOf(fn, prototype)\n        return fn\n    }\n    return chain\n}\n\n/** Creates an object containing all method reducers */\nconst createReducers = methods => {\n    const reducers = {}\n    for (const name in methods) {\n        const { updateContext, properties = {} } = methods[name]\n        reducers[name] = updateContext\n        // some methods have subproperties, e.g. .unionAll\n        for (const key in properties) {\n            reducers[`${name}.${key}`] = properties[key]\n        }\n    }\n    return reducers\n}\n\n/** Follows a method chain, applying each method's reducer, to ctx */\nconst applyReducers = reducers => (method, ctx) => {\n    // follow method links to construct methods array (in reverse)\n    const methods = []\n    for (; method !== undefined; method = method.prev) {\n        methods.push(method)\n    }\n    // build methods object by processing methods in call order\n    const express = { id: 0 }\n    for (let i = methods.length - 1; i >= 0; --i) {\n        const method = methods[i]\n        reducers[method.name](ctx, method.args, express)\n    }\n    return ctx\n}\n\n/** Default properties of all SQL Query Builders */\nconst builderProperties = ({ newContext, updateContext, queries }) => ({\n    _build: {\n        value: function (inheritedContext) {\n            const ctx = updateContext(this.method, newContext(inheritedContext))\n            return queries[ctx.type](ctx)\n        }\n    },\n    query: {\n        get: function () {\n            return this._build()\n        }\n    },\n    unparameterized: {\n        get: function () {\n            return this._build({ unparameterized: true }).text\n        }\n    }\n})\n\n/** Builds object containing a property for every query building method */\nconst methodProperties = ({ methods, chain }) => {\n    const properties = {}\n    for (const name in methods) {\n        const { getter } = methods[name]\n        if (getter) {\n            // add getter methods\n            properties[name] = {\n                get: function () {\n                    return chain({ name, prev: this.method })\n                }\n            }\n        } else {\n            // add function call methods\n            properties[name] = {\n                value: function (...args) {\n                    return chain({ name, args, prev: this.method })\n                }\n            }\n        }\n    }\n    return properties\n}\n\nmodule.exports = createQueryBuilder"]},"metadata":{},"sourceType":"script"}