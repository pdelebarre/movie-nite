{"ast":null,"code":"var _require = require('../../lib-util'),\n    isObject = _require.isObject,\n    buildCall = _require.buildCall,\n    mapJoin = _require.mapJoin,\n    objectMapJoin = _require.objectMapJoin;\n\nvar valuesArray = require('../common/values_array');\n\nmodule.exports = function (ctx) {\n  if (ctx.with.length === 0) return;\n  var txt = calls(ctx, ctx.with);\n  return txt && \"with \".concat(ctx.recursive ? 'recursive ' : '').concat(txt);\n};\n\nvar buildArg = function buildArg(ctx, arg) {\n  if (isObject(arg)) return buildObject(ctx, arg);\n  throw Error('Invalid with argument:', arg);\n};\n\nvar buildProperty = function buildProperty(ctx, key, value) {\n  if (typeof value === 'function') {\n    return \"\".concat(ctx.mapKey(key), \" \").concat(ctx.build(value));\n  }\n\n  if (Array.isArray(value)) {\n    var _valuesArray = valuesArray(ctx, value),\n        columns = _valuesArray.columns,\n        values = _valuesArray.values;\n\n    return \"\".concat(ctx.mapKey(key), \"(\").concat(columns, \") (\").concat(values, \")\");\n  }\n\n  throw Error(\"Error: Invalid .with argument\");\n};\n\nvar buildObject = objectMapJoin(buildProperty);\nvar calls = mapJoin(buildCall(mapJoin(buildArg)));","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-sq/clauses/with.js"],"names":["require","isObject","buildCall","mapJoin","objectMapJoin","valuesArray","module","exports","ctx","with","length","txt","calls","recursive","buildArg","arg","buildObject","Error","buildProperty","key","value","mapKey","build","Array","isArray","columns","values"],"mappings":"eAKIA,OAAO,CAAC,gBAAD,C;IAJTC,Q,YAAAA,Q;IACAC,S,YAAAA,S;IACAC,O,YAAAA,O;IACAC,a,YAAAA,a;;AAEF,IAAMC,WAAW,GAAGL,OAAO,CAAC,wBAAD,CAA3B;;AAEAM,MAAM,CAACC,OAAP,GAAiB,UAAAC,GAAG,EAAI;AACtB,MAAIA,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,CAAxB,EAA2B;AAC3B,MAAMC,GAAG,GAAGC,KAAK,CAACJ,GAAD,EAAMA,GAAG,CAACC,IAAV,CAAjB;AACA,SAAOE,GAAG,mBAAYH,GAAG,CAACK,SAAJ,GAAgB,YAAhB,GAA+B,EAA3C,SAAgDF,GAAhD,CAAV;AACD,CAJD;;AAMA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACN,GAAD,EAAMO,GAAN,EAAc;AAC7B,MAAId,QAAQ,CAACc,GAAD,CAAZ,EAAmB,OAAOC,WAAW,CAACR,GAAD,EAAMO,GAAN,CAAlB;AACnB,QAAME,KAAK,CAAC,wBAAD,EAA2BF,GAA3B,CAAX;AACD,CAHD;;AAKA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACV,GAAD,EAAMW,GAAN,EAAWC,KAAX,EAAqB;AACzC,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,qBAAUZ,GAAG,CAACa,MAAJ,CAAWF,GAAX,CAAV,cAA6BX,GAAG,CAACc,KAAJ,CAAUF,KAAV,CAA7B;AACD;;AACD,MAAIG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;AAAA,uBACIf,WAAW,CAACG,GAAD,EAAMY,KAAN,CADf;AAAA,QAChBK,OADgB,gBAChBA,OADgB;AAAA,QACPC,MADO,gBACPA,MADO;;AAExB,qBAAUlB,GAAG,CAACa,MAAJ,CAAWF,GAAX,CAAV,cAA6BM,OAA7B,gBAA0CC,MAA1C;AACD;;AACD,QAAMT,KAAK,iCAAX;AACD,CATD;;AAWA,IAAMD,WAAW,GAAGZ,aAAa,CAACc,aAAD,CAAjC;AACA,IAAMN,KAAK,GAAGT,OAAO,CAACD,SAAS,CAACC,OAAO,CAACW,QAAD,CAAR,CAAV,CAArB","sourcesContent":["const {\n  isObject,\n  buildCall,\n  mapJoin,\n  objectMapJoin\n} = require('../../lib-util')\nconst valuesArray = require('../common/values_array')\n\nmodule.exports = ctx => {\n  if (ctx.with.length === 0) return\n  const txt = calls(ctx, ctx.with)\n  return txt && `with ${ctx.recursive ? 'recursive ' : ''}${txt}`\n}\n\nconst buildArg = (ctx, arg) => {\n  if (isObject(arg)) return buildObject(ctx, arg)\n  throw Error('Invalid with argument:', arg)\n}\n\nconst buildProperty = (ctx, key, value) => {\n  if (typeof value === 'function') {\n    return `${ctx.mapKey(key)} ${ctx.build(value)}`\n  }\n  if (Array.isArray(value)) {\n    const { columns, values } = valuesArray(ctx, value)\n    return `${ctx.mapKey(key)}(${columns}) (${values})`\n  }\n  throw Error(`Error: Invalid .with argument`)\n}\n\nconst buildObject = objectMapJoin(buildProperty)\nconst calls = mapJoin(buildCall(mapJoin(buildArg)))\n"]},"metadata":{},"sourceType":"script"}