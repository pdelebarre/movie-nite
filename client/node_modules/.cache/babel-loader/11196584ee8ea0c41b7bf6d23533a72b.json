{"ast":null,"code":"// parameterizes given argument, function should be attached to ctx\nfunction parameterize(arg) {\n  if (arg === undefined) throw Error('Error: parameter is undefined');\n  return \"$\".concat(this.params.push(arg));\n}\n/** Escapes an argument for use in UNPARAMETERIZED queries. NOT SAFE AT ALL. */\n\n\nvar escape = function escape(arg) {\n  if (arg === undefined) throw Error('Error: parameter is undefined');\n  if (arg === null) return 'null';\n  if (typeof arg === 'string') return escapeLiteral(arg);\n  if (typeof arg === 'number') return '' + arg;\n  if (typeof arg === 'boolean') return '' + arg;\n\n  if (typeof arg === 'object') {\n    if (Array.isArray(arg)) {\n      return \"array[\".concat(arg.map(function (e) {\n        return escape(e);\n      }).join(', '), \"]\");\n    } else {\n      return escapeLiteral(JSON.stringify(arg));\n    }\n  }\n\n  throw Error(\"Invalid argument SQL argument of type '\".concat(typeof arg, \"'\"), arg);\n}; // from https://github.com/brianc/node-postgres/blob/eb076db5d47a29c19d3212feac26cd7b6d257a95/lib/client.js#L351\n\n\nvar escapeLiteral = function escapeLiteral(str) {\n  var hasBackslash = false;\n  var escaped = \"'\";\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i];\n\n    if (c === \"'\") {\n      escaped += c + c;\n    } else if (c === '\\\\') {\n      escaped += c + c;\n      hasBackslash = true;\n    } else {\n      escaped += c;\n    }\n  }\n\n  escaped += \"'\";\n\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped;\n  }\n\n  return escaped;\n};\n\nmodule.exports = {\n  parameterize: parameterize,\n  escape: escape\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/dialect-postgres/parameterize.js"],"names":["parameterize","arg","undefined","Error","params","push","escape","escapeLiteral","Array","isArray","map","e","join","JSON","stringify","str","hasBackslash","escaped","i","length","c","module","exports"],"mappings":"AAAA;AACA,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,MAAIA,GAAG,KAAKC,SAAZ,EAAuB,MAAMC,KAAK,CAAC,+BAAD,CAAX;AACvB,oBAAW,KAAKC,MAAL,CAAYC,IAAZ,CAAiBJ,GAAjB,CAAX;AACH;AAED;;;AACA,IAAMK,MAAM,GAAG,SAATA,MAAS,CAAAL,GAAG,EAAI;AAClB,MAAIA,GAAG,KAAKC,SAAZ,EAAuB,MAAMC,KAAK,CAAC,+BAAD,CAAX;AACvB,MAAIF,GAAG,KAAK,IAAZ,EAAkB,OAAO,MAAP;AAClB,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAOM,aAAa,CAACN,GAAD,CAApB;AAC7B,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAO,KAAKA,GAAZ;AAC7B,MAAI,OAAOA,GAAP,KAAe,SAAnB,EAA8B,OAAO,KAAKA,GAAZ;;AAC9B,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzB,QAAIO,KAAK,CAACC,OAAN,CAAcR,GAAd,CAAJ,EAAwB;AACpB,6BAAgBA,GAAG,CAACS,GAAJ,CAAQ,UAAAC,CAAC;AAAA,eAAIL,MAAM,CAACK,CAAD,CAAV;AAAA,OAAT,EAAwBC,IAAxB,CAA6B,IAA7B,CAAhB;AACH,KAFD,MAEO;AACH,aAAOL,aAAa,CAACM,IAAI,CAACC,SAAL,CAAeb,GAAf,CAAD,CAApB;AACH;AACJ;;AACD,QAAME,KAAK,kDAA2C,OAAOF,GAAlD,QAA0DA,GAA1D,CAAX;AACH,CAdD,C,CAgBA;;;AACA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAAAQ,GAAG,EAAI;AACzB,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,OAAO,GAAG,GAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAME,CAAC,GAAGL,GAAG,CAACG,CAAD,CAAb;;AACA,QAAIE,CAAC,KAAK,GAAV,EAAe;AACXH,MAAAA,OAAO,IAAIG,CAAC,GAAGA,CAAf;AACH,KAFD,MAEO,IAAIA,CAAC,KAAK,IAAV,EAAgB;AACnBH,MAAAA,OAAO,IAAIG,CAAC,GAAGA,CAAf;AACAJ,MAAAA,YAAY,GAAG,IAAf;AACH,KAHM,MAGA;AACHC,MAAAA,OAAO,IAAIG,CAAX;AACH;AACJ;;AACDH,EAAAA,OAAO,IAAI,GAAX;;AACA,MAAID,YAAY,KAAK,IAArB,EAA2B;AACvBC,IAAAA,OAAO,GAAG,OAAOA,OAAjB;AACH;;AACD,SAAOA,OAAP;AACH,CAnBD;;AAqBAI,MAAM,CAACC,OAAP,GAAiB;AACbtB,EAAAA,YAAY,EAAZA,YADa;AAEbM,EAAAA,MAAM,EAANA;AAFa,CAAjB","sourcesContent":["// parameterizes given argument, function should be attached to ctx\nfunction parameterize(arg) {\n    if (arg === undefined) throw Error('Error: parameter is undefined')\n    return `$${this.params.push(arg)}`\n}\n\n/** Escapes an argument for use in UNPARAMETERIZED queries. NOT SAFE AT ALL. */\nconst escape = arg => {\n    if (arg === undefined) throw Error('Error: parameter is undefined')\n    if (arg === null) return 'null'\n    if (typeof arg === 'string') return escapeLiteral(arg)\n    if (typeof arg === 'number') return '' + arg\n    if (typeof arg === 'boolean') return '' + arg\n    if (typeof arg === 'object') {\n        if (Array.isArray(arg)) {\n            return `array[${arg.map(e => escape(e)).join(', ')}]`\n        } else {\n            return escapeLiteral(JSON.stringify(arg))\n        }\n    }\n    throw Error(`Invalid argument SQL argument of type '${typeof arg}'`, arg)\n}\n\n// from https://github.com/brianc/node-postgres/blob/eb076db5d47a29c19d3212feac26cd7b6d257a95/lib/client.js#L351\nconst escapeLiteral = str => {\n    let hasBackslash = false\n    let escaped = \"'\"\n    for (let i = 0; i < str.length; i++) {\n        const c = str[i]\n        if (c === \"'\") {\n            escaped += c + c\n        } else if (c === '\\\\') {\n            escaped += c + c\n            hasBackslash = true\n        } else {\n            escaped += c\n        }\n    }\n    escaped += \"'\"\n    if (hasBackslash === true) {\n        escaped = ' E' + escaped\n    }\n    return escaped\n}\n\nmodule.exports = {\n    parameterize,\n    escape\n}\n"]},"metadata":{},"sourceType":"script"}