{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, position, layout, dimensions } from 'ui-box';\nimport { Button } from '../../buttons';\nimport { Group } from '../../group';\nimport { useId } from '../../hooks';\nimport safeInvoke from '../../lib/safe-invoke';\nimport warning from '../../lib/warning';\nvar SegmentedControl = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function SegmentedControl(props, ref) {\n  var defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      height = props.height,\n      name = props.name,\n      onChange = props.onChange,\n      options = props.options,\n      size = props.size,\n      value = props.value,\n      rest = _objectWithoutProperties(props, [\"defaultValue\", \"disabled\", \"height\", \"name\", \"onChange\", \"options\", \"size\", \"value\"]);\n\n  var groupName = useId('SegmentedControl');\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(true, '<SegmentedControl> is deprecated and will be removed in the next major verison of Evergreen. Prefer Tabs for navigational elements, or form components / button groups for other use cases.');\n  }\n\n  var isControlled = function isControlled() {\n    return typeof value !== 'undefined' && value !== null;\n  };\n\n  var getDefaultValue = function getDefaultValue() {\n    if (isControlled()) {\n      return value;\n    }\n\n    return typeof defaultValue !== 'undefined' && defaultValue !== null ? defaultValue : options[0].value;\n  };\n\n  var _useState = useState(getDefaultValue()),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeValue = _useState2[0],\n      setActiveValue = _useState2[1];\n\n  useEffect(function () {\n    if (isControlled() && value !== activeValue) {\n      setActiveValue(value);\n    }\n  }, [value]);\n  var handleChange = useCallback(function (event) {\n    event.preventDefault();\n    var newValue = event.target.value; // Save a render cycle when it's a controlled input\n\n    if (!isControlled()) {\n      setActiveValue(newValue);\n    }\n\n    safeInvoke(onChange, newValue);\n  }, [onChange]);\n  return /*#__PURE__*/React.createElement(Group, _extends({\n    ref: ref,\n    display: \"flex\"\n  }, rest), options.map(function (option, index) {\n    return /*#__PURE__*/React.createElement(Button, {\n      key: option.value,\n      id: groupName + index,\n      name: name || groupName,\n      value: String(option.value),\n      disabled: disabled,\n      size: size,\n      height: height,\n      isActive: activeValue === String(option.value),\n      onClick: handleChange,\n      flex: \"1\"\n    }, option.label);\n  }));\n}));\nSegmentedControl.propTypes = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, spacing.propTypes), position.propTypes), layout.propTypes), dimensions.propTypes), {}, {\n  /**\n   * The options for the radios of the Segmented Control.\n   */\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node.isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]).isRequired\n  })).isRequired,\n\n  /**\n   * The current value of the Segmented Control when controlled.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n\n  /**\n   * The default value of the Segmented Control when uncontrolled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n\n  /**\n   * Function called when the value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The name of the radio group.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The size of the Segmented Control.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * When true, the Segmented Control is disabled.\n   */\n  disabled: PropTypes.bool\n});\nexport default SegmentedControl;","map":{"version":3,"sources":["../../../src/segmented-control/src/SegmentedControl.js"],"names":["SegmentedControl","memo","forwardRef","defaultValue","disabled","height","name","onChange","options","size","value","rest","props","groupName","useId","process","warning","isControlled","getDefaultValue","activeValue","setActiveValue","useState","useEffect","handleChange","useCallback","event","newValue","safeInvoke","option","String","spacing","position","layout","dimensions","label","PropTypes","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useState, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { spacing, position, layout, dimensions } from 'ui-box'\nimport { Button } from '../../buttons'\nimport { Group } from '../../group'\nimport { useId } from '../../hooks'\nimport safeInvoke from '../../lib/safe-invoke'\nimport warning from '../../lib/warning'\n\nconst SegmentedControl = memo(\n  forwardRef(function SegmentedControl(props, ref) {\n    const { defaultValue, disabled, height, name, onChange, options, size, value, ...rest } = props\n\n    const groupName = useId('SegmentedControl')\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(\n        true,\n        '<SegmentedControl> is deprecated and will be removed in the next major verison of Evergreen. Prefer Tabs for navigational elements, or form components / button groups for other use cases.'\n      )\n    }\n\n    const isControlled = () => {\n      return typeof value !== 'undefined' && value !== null\n    }\n\n    const getDefaultValue = () => {\n      if (isControlled()) {\n        return value\n      }\n\n      return typeof defaultValue !== 'undefined' && defaultValue !== null ? defaultValue : options[0].value\n    }\n\n    const [activeValue, setActiveValue] = useState(getDefaultValue())\n\n    useEffect(() => {\n      if (isControlled() && value !== activeValue) {\n        setActiveValue(value)\n      }\n    }, [value])\n\n    const handleChange = useCallback(\n      event => {\n        event.preventDefault()\n        const newValue = event.target.value\n\n        // Save a render cycle when it's a controlled input\n        if (!isControlled()) {\n          setActiveValue(newValue)\n        }\n\n        safeInvoke(onChange, newValue)\n      },\n      [onChange]\n    )\n\n    return (\n      <Group ref={ref} display=\"flex\" {...rest}>\n        {options.map((option, index) => (\n          <Button\n            key={option.value}\n            id={groupName + index}\n            name={name || groupName}\n            value={String(option.value)}\n            disabled={disabled}\n            size={size}\n            height={height}\n            isActive={activeValue === String(option.value)}\n            onClick={handleChange}\n            flex=\"1\"\n          >\n            {option.label}\n          </Button>\n        ))}\n      </Group>\n    )\n  })\n)\n\nSegmentedControl.propTypes = {\n  /**\n   * Composes some Box APIs.\n   */\n  ...spacing.propTypes,\n  ...position.propTypes,\n  ...layout.propTypes,\n  ...dimensions.propTypes,\n\n  /**\n   * The options for the radios of the Segmented Control.\n   */\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.node.isRequired,\n      value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]).isRequired\n    })\n  ).isRequired,\n\n  /**\n   * The current value of the Segmented Control when controlled.\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n\n  /**\n   * The default value of the Segmented Control when uncontrolled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n\n  /**\n   * Function called when the value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The name of the radio group.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The size of the Segmented Control.\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * When true, the Segmented Control is disabled.\n   */\n  disabled: PropTypes.bool\n}\n\nexport default SegmentedControl\n"]},"metadata":{},"sourceType":"module"}