{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n'use strict';\n\nimport { keys, objectTypes } from './constants';\nimport { getterForProperty, setterForProperty, createMethods, cacheObject } from './util';\nimport * as rpc from './rpc';\nlet registeredConstructors = {};\nlet registeredRealmPaths = {};\nexport default class RealmObject {} // Non-mutating methods:\n\ncreateMethods(RealmObject.prototype, objectTypes.OBJECT, ['isValid', 'objectSchema', 'linkingObjects', 'linkingObjectsCount', '_objectId', '_isSameObject', 'addListener', 'removeListener', 'removeAllListeners']);\nexport function clearRegisteredConstructors() {\n  registeredConstructors = {};\n  registeredRealmPaths = {};\n}\nexport function createObject(realmId, info) {\n  let schema = info.schema;\n  let realmPath = registeredRealmPaths[realmId];\n  let constructor = (registeredConstructors[realmPath] || {})[schema.name];\n  let object = Object.create(constructor ? constructor.prototype : RealmObject.prototype);\n  object[keys.realm] = realmId;\n  object[keys.id] = info.id;\n  object[keys.type] = info.type;\n  schema.properties.forEach(name => {\n    Object.defineProperty(object, name, {\n      enumerable: true,\n      get: getterForProperty(name),\n      set: setterForProperty(name)\n    });\n  });\n\n  if (constructor) {\n    let result = constructor.call(object);\n\n    if (result != null && result != object) {\n      throw new Error('Realm object constructor must not return another value');\n    }\n  }\n\n  for (let key in info.cache) {\n    info.cache[key] = rpc.deserialize(undefined, info.cache[key]);\n  }\n\n  cacheObject(realmId, info.id, info.cache);\n  return object;\n}\nexport function registerConstructors(realmId, realmPath, constructors) {\n  registeredRealmPaths[realmId] = realmPath;\n\n  if (constructors) {\n    registeredConstructors[realmPath] = constructors;\n  }\n}\nexport function typeForConstructor(realmId, constructor) {\n  let realmPath = registeredRealmPaths[realmId];\n  let constructors = registeredConstructors[realmPath];\n\n  for (let name in constructors) {\n    if (constructors[name] == constructor) {\n      return name;\n    }\n  }\n\n  throw new Error(\"Constructor was not registered in the schema for this Realm\");\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/objects.js"],"names":["keys","objectTypes","getterForProperty","setterForProperty","createMethods","cacheObject","rpc","registeredConstructors","registeredRealmPaths","RealmObject","prototype","OBJECT","clearRegisteredConstructors","createObject","realmId","info","schema","realmPath","constructor","name","object","Object","create","realm","id","type","properties","forEach","defineProperty","enumerable","get","set","result","call","Error","key","cache","deserialize","undefined","registerConstructors","constructors","typeForConstructor"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport { keys, objectTypes } from './constants';\nimport { getterForProperty, setterForProperty, createMethods, cacheObject } from './util';\nimport * as rpc from './rpc'\n\nlet registeredConstructors = {};\nlet registeredRealmPaths = {};\n\nexport default class RealmObject {\n}\n\n// Non-mutating methods:\ncreateMethods(RealmObject.prototype, objectTypes.OBJECT, [\n    'isValid',\n    'objectSchema',\n    'linkingObjects',\n    'linkingObjectsCount',\n    '_objectId',\n    '_isSameObject',\n    'addListener',\n    'removeListener',\n    'removeAllListeners',\n]);\n\nexport function clearRegisteredConstructors() {\n    registeredConstructors = {};\n    registeredRealmPaths = {};\n}\n\nexport function createObject(realmId, info) {\n    let schema = info.schema;\n    let realmPath = registeredRealmPaths[realmId];\n    let constructor = (registeredConstructors[realmPath] || {})[schema.name];\n    let object = Object.create(constructor ? constructor.prototype : RealmObject.prototype);\n\n    object[keys.realm] = realmId;\n    object[keys.id] = info.id;\n    object[keys.type] = info.type;\n\n    schema.properties.forEach((name) => {\n        Object.defineProperty(object, name, {\n            enumerable: true,\n            get: getterForProperty(name),\n            set: setterForProperty(name),\n        });\n    });\n\n    if (constructor) {\n        let result = constructor.call(object);\n        if (result != null && result != object) {\n            throw new Error('Realm object constructor must not return another value');\n        }\n    }\n    for (let key in info.cache) {\n        info.cache[key] = rpc.deserialize(undefined, info.cache[key])\n    }\n    cacheObject(realmId, info.id, info.cache);\n\n    return object;\n}\n\nexport function registerConstructors(realmId, realmPath, constructors) {\n    registeredRealmPaths[realmId] = realmPath;\n\n    if (constructors) {\n        registeredConstructors[realmPath] = constructors;\n    }\n}\n\nexport function typeForConstructor(realmId, constructor) {\n    let realmPath = registeredRealmPaths[realmId];\n    let constructors = registeredConstructors[realmPath];\n\n    for (let name in constructors) {\n        if (constructors[name] == constructor) {\n            return name;\n        }\n    }\n\n    throw new Error(\"Constructor was not registered in the schema for this Realm\")\n}\n"]},"metadata":{},"sourceType":"module"}