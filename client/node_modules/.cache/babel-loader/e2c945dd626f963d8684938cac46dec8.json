{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\nimport MovieForm from \"./components/Movie/MovieForm\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport DUMMY_MOVIES from \"./resources/dummy_movies\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [movies, setMovies] = useState(DUMMY_MOVIES);\n\n  const addMovie = ({\n    title,\n    genre\n  }) => {\n    let newMovie = {\n      id: uuidv4(),\n      title: title,\n      genre: genre,\n      watched: false\n    }; // [...] = spread operator (copy items)\n    // Used because we can't (and shouldn't) change state values directly\n\n    setMovies([...movies, newMovie]);\n  };\n\n  const delMovie = id => {\n    setMovies(movies.filter(movie => movie.id !== id));\n  };\n\n  const markWatched = id => {\n    setMovies(movies.map(movie => movie.id === id ? { ...movie,\n      watched: !movie.watched\n    } : movie));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchMovie, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieForm, {\n      addMovie: addMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Movies, {\n      movies: movies,\n      delMovie: delMovie,\n      markWatched: markWatched\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"vhELJP0ZDTfJkV5nkXB5wT3sku4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["useState","v4","uuidv4","Movies","MovieForm","SearchMovie","DUMMY_MOVIES","App","movies","setMovies","addMovie","title","genre","newMovie","id","watched","delMovie","filter","movie","markWatched","map"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAACM,YAAD,CAApC;;AACA,QAAMI,QAAQ,GAAG,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,KAAoB;AACnC,QAAIC,QAAQ,GAAG;AACbC,MAAAA,EAAE,EAAEZ,MAAM,EADG;AAEbS,MAAAA,KAAK,EAACA,KAFO;AAGbC,MAAAA,KAAK,EAACA,KAHO;AAIbG,MAAAA,OAAO,EAAC;AAJK,KAAf,CADmC,CAQnC;AACA;;AACAN,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYK,QAAZ,CAAD,CAAT;AACD,GAXD;;AAaA,QAAMG,QAAQ,GAAIF,EAAD,IAAQ;AACvBL,IAAAA,SAAS,CAACD,MAAM,CAACS,MAAP,CAAeC,KAAD,IAAWA,KAAK,CAACJ,EAAN,KAAaA,EAAtC,CAAD,CAAT;AACD,GAFD;;AAIA,QAAMK,WAAW,GAAIL,EAAD,IAAQ;AAC1BL,IAAAA,SAAS,CACPD,MAAM,CAACY,GAAP,CAAYF,KAAD,IACXA,KAAK,CAACJ,EAAN,KAAaA,EAAb,GAAkB,EAAE,GAAGI,KAAL;AAAYH,MAAAA,OAAO,EAAE,CAACG,KAAK,CAACH;AAA5B,KAAlB,GAA0DG,KAD1D,CADO,CAAT;AAKD,GAND;;AAQA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAER;AAArB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAEF,MAAhB;AAAwB,MAAA,QAAQ,EAAEQ,QAAlC;AAA4C,MAAA,WAAW,EAAEG;AAAzD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAlCD;;GAAMZ,G;;KAAAA,G;AAoCN,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\nimport MovieForm from \"./components/Movie/MovieForm\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport DUMMY_MOVIES from \"./resources/dummy_movies\";\n\nconst App = () => {\n  const [movies, setMovies] = useState(DUMMY_MOVIES);\n  const addMovie = ({title, genre}) => {\n    let newMovie = {\n      id: uuidv4(),\n      title:title,\n      genre:genre,\n      watched:false\n    };\n\n    // [...] = spread operator (copy items)\n    // Used because we can't (and shouldn't) change state values directly\n    setMovies([...movies, newMovie]);\n  };\n\n  const delMovie = (id) => {\n    setMovies(movies.filter((movie) => movie.id !== id));\n  };\n\n  const markWatched = (id) => {\n    setMovies(\n      movies.map((movie) =>\n      movie.id === id ? { ...movie, watched: !movie.watched } : movie\n      )\n    );\n  };\n\n  return (\n    <div>\n      <SearchMovie />\n      <MovieForm addMovie={addMovie} />\n      <Movies movies={movies} delMovie={delMovie} markWatched={markWatched} />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}