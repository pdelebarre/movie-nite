{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport \"./App.css\";\nimport Movies from \"./components/Movies\"; // import {addMovies} from \"./Database\";\n\nimport * as Realm from \"realm-web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REALM_APP_ID = \"realm-movie-nite-dtfju\"; // e.g. myapp-abcde\n\nconst app = new Realm.App({\n  id: REALM_APP_ID\n}); // Declare Schema\n\nconst MovieSchema = {\n  name: \"Movies\",\n  properties: {\n    id: \"int\",\n    title: \"string\",\n    genres: \"string\",\n    overview: \"string\",\n    posterpath: \"string\",\n    voteaverage: \"int\",\n    watched: \"boolean\"\n  }\n};\n\nconst addMovies = () => {\n  // Create realm\n  new Realm.open({\n    schema: [MovieSchema],\n    schemaVersion: 1\n  }).then(realm => {\n    for (let i = 0; i < 3; i++) {\n      realm.write(() => {\n        const movie = realm.create(\"Movie\", {\n          title: \"Harry Putter \" + i,\n          overview: \"bla bla\"\n        });\n      });\n    }\n  });\n}; // Create a component that displays the given user's details\n\n\nfunction UserDetail({\n  user\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Logged in with anonymous id: \", user.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n} // Create a component that lets an anonymous user log in\n\n\n_c = UserDetail;\n\nfunction Login({\n  setUser\n}) {\n  const loginAnonymous = async () => {\n    const user = await app.logIn(Realm.Credentials.anonymous());\n    setUser(user);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: loginAnonymous,\n    children: \"Log In\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = Login;\n\nconst App = () => {\n  _s();\n\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser); // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addMovies,\n      children: \"Add movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"yE/SCzRsbiEzF1U/zuUFg5M1hPU=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"UserDetail\");\n$RefreshReg$(_c2, \"Login\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["React","Movies","Realm","REALM_APP_ID","app","App","id","MovieSchema","name","properties","title","genres","overview","posterpath","voteaverage","watched","addMovies","open","schema","schemaVersion","then","realm","i","write","movie","create","UserDetail","user","Login","setUser","loginAnonymous","logIn","Credentials","anonymous","useState","currentUser"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CACA;;AAEA,OAAO,KAAKC,KAAZ,MAAuB,WAAvB;;AAEA,MAAMC,YAAY,GAAG,wBAArB,C,CAA+C;;AAC/C,MAAMC,GAAG,GAAG,IAAIF,KAAK,CAACG,GAAV,CAAc;AAAEC,EAAAA,EAAE,EAAEH;AAAN,CAAd,CAAZ,C,CAEA;;AACA,MAAMI,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,QADY;AAElBC,EAAAA,UAAU,EAAE;AACVH,IAAAA,EAAE,EAAE,KADM;AAEVI,IAAAA,KAAK,EAAE,QAFG;AAGVC,IAAAA,MAAM,EAAE,QAHE;AAIVC,IAAAA,QAAQ,EAAE,QAJA;AAKVC,IAAAA,UAAU,EAAE,QALF;AAMVC,IAAAA,WAAW,EAAE,KANH;AAOVC,IAAAA,OAAO,EAAE;AAPC;AAFM,CAApB;;AAcA,MAAMC,SAAS,GAAG,MAAM;AACtB;AACF,MAAId,KAAK,CAACe,IAAV,CAAe;AAAEC,IAAAA,MAAM,EAAE,CAACX,WAAD,CAAV;AAAyBY,IAAAA,aAAa,EAAE;AAAxC,GAAf,EAA4DC,IAA5D,CAAkEC,KAAD,IAAW;AAC1E,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,KAAK,CAACE,KAAN,CAAY,MAAM;AAChB,cAAMC,KAAK,GAAGH,KAAK,CAACI,MAAN,CAAa,OAAb,EAAsB;AAClCf,UAAAA,KAAK,EAAE,kBAAkBY,CADS;AAElCV,UAAAA,QAAQ,EAAE;AAFwB,SAAtB,CAAd;AAID,OALD;AAMD;AACF,GATD;AAUC,CAZD,C,CAcA;;;AACA,SAASc,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA8B;AAC5B,sBACE;AAAA,2BACE;AAAA,kDAAkCA,IAAI,CAACrB,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAED;;;KARSoB,U;;AAST,SAASE,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA4B;AAC1B,QAAMC,cAAc,GAAG,YAAY;AACjC,UAAMH,IAAI,GAAG,MAAMvB,GAAG,CAAC2B,KAAJ,CAAU7B,KAAK,CAAC8B,WAAN,CAAkBC,SAAlB,EAAV,CAAnB;AACAJ,IAAAA,OAAO,CAACF,IAAD,CAAP;AACD,GAHD;;AAIA,sBAAO;AAAQ,IAAA,OAAO,EAAEG,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;MANQF,K;;AAST,MAAMvB,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA;AACA,QAAM,CAACsB,IAAD,EAAOE,OAAP,IAAkB7B,KAAK,CAACkC,QAAN,CAAe9B,GAAG,CAAC+B,WAAnB,CAAxB,CAHgB,CAKhB;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BAIE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAEnB,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAfD;;GAAMX,G;;MAAAA,G;AAiBN,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\n// import {addMovies} from \"./Database\";\n\nimport * as Realm from \"realm-web\";\n\nconst REALM_APP_ID = \"realm-movie-nite-dtfju\"; // e.g. myapp-abcde\nconst app = new Realm.App({ id: REALM_APP_ID });\n\n// Declare Schema\nconst MovieSchema = {\n  name: \"Movies\",\n  properties: {\n    id: \"int\",\n    title: \"string\",\n    genres: \"string\",\n    overview: \"string\",\n    posterpath: \"string\",\n    voteaverage: \"int\",\n    watched: \"boolean\",\n  },\n};\n\n\nconst addMovies = () => {\n  // Create realm\nnew Realm.open({ schema: [MovieSchema], schemaVersion: 1 }).then((realm) => {\n  for (let i = 0; i < 3; i++) {\n    realm.write(() => {\n      const movie = realm.create(\"Movie\", {\n        title: \"Harry Putter \" + i,\n        overview: \"bla bla\",\n      });\n    });\n  }\n});\n}\n\n// Create a component that displays the given user's details\nfunction UserDetail({ user }) {\n  return (\n    <div>\n      <h1>Logged in with anonymous id: {user.id}</h1>\n    </div>\n  );\n}\n\n// Create a component that lets an anonymous user log in\nfunction Login({ setUser }) {\n  const loginAnonymous = async () => {\n    const user = await app.logIn(Realm.Credentials.anonymous());\n    setUser(user);\n  };\n  return <button onClick={loginAnonymous}>Log In</button>;\n}\n\n\nconst App = () => {\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser);\n\n  // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n  return (\n    <div className=\"App\">\n      {/* <div className=\"App-header\">\n        {user ? <UserDetail user={user} /> : <Login setUser={setUser} />}\n      </div> */}\n      <button type=\"button\" onClick={addMovies}>Add movies</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}