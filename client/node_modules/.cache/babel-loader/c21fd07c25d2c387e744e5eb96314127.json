{"ast":null,"code":"const createNewContext = require('./context');\n\nconst createQueryBuilder = ({\n  defaultContext,\n  query,\n  e,\n  config\n}) => {\n  const {\n    queries,\n    methods,\n    properties\n  } = query;\n  const newContext = createNewContext(defaultContext);\n  const reducers = createReducers(methods);\n  const updateContext = applyReducers(reducers);\n\n  reducers.extend = (ctx, args) => {\n    const arr = Array.isArray(args[0]) ? args[0] : args;\n\n    for (let i = 0; i < arr.length; ++i) {\n      updateContext(arr[i].method, ctx);\n    }\n  };\n\n  const builder = () => {}; // must not be object literal\n\n\n  const chain = createChain(builder);\n  const executeProperties = {\n    one: {\n      value: async function () {\n        const ret = await config.oneCallback(this.query, config.tableName, config.userAssociatedRecordsOnly);\n        return ret;\n      }\n    },\n    all: {\n      value: async function () {\n        const ret = await config.allCallback(this.query, config.tableName, config.userAssociatedRecordsOnly);\n        return ret;\n      }\n    },\n    _tableName: {\n      get: function () {\n        return config.tableName;\n      }\n    }\n  }; // EasyQB no access to from\n\n  const _methodProperties = methodProperties({\n    methods,\n    chain\n  });\n\n  delete _methodProperties.from;\n  Object.defineProperties(builder, { ...builderProperties({\n      chain,\n      newContext,\n      updateContext,\n      queries\n    }),\n    ..._methodProperties,\n    ...executeProperties,\n    ...properties,\n    e: {\n      value: e\n    }\n  });\n  return chain();\n};\n/** Creates a new builder instance */\n\n\nconst createChain = prototype => {\n  const chain = method => {\n    const fn = (...args) => chain({\n      name: 'express',\n      args,\n      prev: method\n    });\n\n    fn.method = method;\n    Object.setPrototypeOf(fn, prototype);\n    return fn;\n  };\n\n  return chain;\n};\n/** Creates an object containing all method reducers */\n\n\nconst createReducers = methods => {\n  const reducers = {};\n\n  for (const name in methods) {\n    const {\n      updateContext,\n      properties = {}\n    } = methods[name];\n    reducers[name] = updateContext; // some methods have subproperties, e.g. .unionAll\n\n    for (const key in properties) {\n      reducers[`${name}.${key}`] = properties[key];\n    }\n  }\n\n  return reducers;\n};\n/** Follows a method chain, applying each method's reducer, to ctx */\n\n\nconst applyReducers = reducers => (method, ctx) => {\n  // follow method links to construct methods array (in reverse)\n  const methods = [];\n\n  for (; method !== undefined; method = method.prev) {\n    methods.push(method);\n  } // build methods object by processing methods in call order\n\n\n  const express = {\n    id: 0\n  };\n\n  for (let i = methods.length - 1; i >= 0; --i) {\n    const method = methods[i];\n    reducers[method.name](ctx, method.args, express);\n  }\n\n  return ctx;\n};\n/** Default properties of all SQL Query Builders */\n\n\nconst builderProperties = ({\n  newContext,\n  updateContext,\n  queries\n}) => ({\n  _build: {\n    value: function (inheritedContext) {\n      const ctx = updateContext(this.method, newContext(inheritedContext));\n      return queries[ctx.type](ctx);\n    }\n  },\n  query: {\n    get: function () {\n      return this._build();\n    }\n  },\n  unparameterized: {\n    get: function () {\n      return this._build({\n        unparameterized: true\n      }).text;\n    }\n  }\n});\n/** Builds object containing a property for every query building method */\n\n\nconst methodProperties = ({\n  methods,\n  chain\n}) => {\n  const properties = {};\n\n  for (const name in methods) {\n    const {\n      getter\n    } = methods[name];\n\n    if (getter) {\n      // add getter methods\n      properties[name] = {\n        get: function () {\n          return chain({\n            name,\n            prev: this.method\n          });\n        }\n      };\n    } else {\n      // add function call methods\n      properties[name] = {\n        value: function (...args) {\n          return chain({\n            name,\n            args,\n            prev: this.method\n          });\n        }\n      };\n    }\n  }\n\n  return properties;\n};\n\nmodule.exports = createQueryBuilder;","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/builder-sq/index.js"],"names":["createNewContext","require","createQueryBuilder","defaultContext","query","e","config","queries","methods","properties","newContext","reducers","createReducers","updateContext","applyReducers","extend","ctx","args","arr","Array","isArray","i","length","method","builder","chain","createChain","executeProperties","one","value","ret","oneCallback","tableName","userAssociatedRecordsOnly","all","allCallback","_tableName","get","_methodProperties","methodProperties","from","Object","defineProperties","builderProperties","prototype","fn","name","prev","setPrototypeOf","key","undefined","push","express","id","_build","inheritedContext","type","unparameterized","text","getter","module","exports"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,WAAD,CAAhC;;AACA,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,KAAlB;AAAyBC,EAAAA,CAAzB;AAA4BC,EAAAA;AAA5B,CAAD,KAA0C;AACjE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAmCL,KAAzC;AACA,QAAMM,UAAU,GAAGV,gBAAgB,CAACG,cAAD,CAAnC;AACA,QAAMQ,QAAQ,GAAGC,cAAc,CAACJ,OAAD,CAA/B;AACA,QAAMK,aAAa,GAAGC,aAAa,CAACH,QAAD,CAAnC;;AACAA,EAAAA,QAAQ,CAACI,MAAT,GAAkB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC7B,UAAMC,GAAG,GAAGC,KAAK,CAACC,OAAN,CAAcH,IAAI,CAAC,CAAD,CAAlB,IAAyBA,IAAI,CAAC,CAAD,CAA7B,GAAmCA,IAA/C;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACjCR,MAAAA,aAAa,CAACK,GAAG,CAACG,CAAD,CAAH,CAAOE,MAAR,EAAgBP,GAAhB,CAAb;AACH;AACJ,GALD;;AAMA,QAAMQ,OAAO,GAAG,MAAM,CAAG,CAAzB,CAXiE,CAWvC;;;AAC1B,QAAMC,KAAK,GAAGC,WAAW,CAACF,OAAD,CAAzB;AAEA,QAAMG,iBAAiB,GAAG;AACtBC,IAAAA,GAAG,EAAE;AACDC,MAAAA,KAAK,EAAE,kBAAkB;AACrB,cAAMC,GAAG,GAAG,MAAMxB,MAAM,CAACyB,WAAP,CAAmB,KAAK3B,KAAxB,EAA+BE,MAAM,CAAC0B,SAAtC,EAAiD1B,MAAM,CAAC2B,yBAAxD,CAAlB;AACA,eAAOH,GAAP;AACH;AAJA,KADiB;AAOtBI,IAAAA,GAAG,EAAE;AACDL,MAAAA,KAAK,EAAE,kBAAkB;AACrB,cAAMC,GAAG,GAAG,MAAMxB,MAAM,CAAC6B,WAAP,CAAmB,KAAK/B,KAAxB,EAA+BE,MAAM,CAAC0B,SAAtC,EAAiD1B,MAAM,CAAC2B,yBAAxD,CAAlB;AACA,eAAOH,GAAP;AACH;AAJA,KAPiB;AAatBM,IAAAA,UAAU,EAAE;AACRC,MAAAA,GAAG,EAAE,YAAY;AACb,eAAO/B,MAAM,CAAC0B,SAAd;AACH;AAHO;AAbU,GAA1B,CAdiE,CAkCjE;;AACA,QAAMM,iBAAiB,GAAGC,gBAAgB,CAAC;AAAE/B,IAAAA,OAAF;AAAWiB,IAAAA;AAAX,GAAD,CAA1C;;AACA,SAAOa,iBAAiB,CAACE,IAAzB;AAEAC,EAAAA,MAAM,CAACC,gBAAP,CAAwBlB,OAAxB,EAAiC,EAC7B,GAAGmB,iBAAiB,CAAC;AAAElB,MAAAA,KAAF;AAASf,MAAAA,UAAT;AAAqBG,MAAAA,aAArB;AAAoCN,MAAAA;AAApC,KAAD,CADS;AAE7B,OAAG+B,iBAF0B;AAG7B,OAAGX,iBAH0B;AAI7B,OAAGlB,UAJ0B;AAK7BJ,IAAAA,CAAC,EAAE;AACCwB,MAAAA,KAAK,EAAExB;AADR;AAL0B,GAAjC;AASA,SAAOoB,KAAK,EAAZ;AACH,CAhDD;AAkDA;;;AACA,MAAMC,WAAW,GAAGkB,SAAS,IAAI;AAC7B,QAAMnB,KAAK,GAAGF,MAAM,IAAI;AACpB,UAAMsB,EAAE,GAAG,CAAC,GAAG5B,IAAJ,KAAaQ,KAAK,CAAC;AAAEqB,MAAAA,IAAI,EAAE,SAAR;AAAmB7B,MAAAA,IAAnB;AAAyB8B,MAAAA,IAAI,EAAExB;AAA/B,KAAD,CAA7B;;AACAsB,IAAAA,EAAE,CAACtB,MAAH,GAAYA,MAAZ;AACAkB,IAAAA,MAAM,CAACO,cAAP,CAAsBH,EAAtB,EAA0BD,SAA1B;AACA,WAAOC,EAAP;AACH,GALD;;AAMA,SAAOpB,KAAP;AACH,CARD;AAUA;;;AACA,MAAMb,cAAc,GAAGJ,OAAO,IAAI;AAC9B,QAAMG,QAAQ,GAAG,EAAjB;;AACA,OAAK,MAAMmC,IAAX,IAAmBtC,OAAnB,EAA4B;AACxB,UAAM;AAAEK,MAAAA,aAAF;AAAiBJ,MAAAA,UAAU,GAAG;AAA9B,QAAqCD,OAAO,CAACsC,IAAD,CAAlD;AACAnC,IAAAA,QAAQ,CAACmC,IAAD,CAAR,GAAiBjC,aAAjB,CAFwB,CAGxB;;AACA,SAAK,MAAMoC,GAAX,IAAkBxC,UAAlB,EAA8B;AAC1BE,MAAAA,QAAQ,CAAE,GAAEmC,IAAK,IAAGG,GAAI,EAAhB,CAAR,GAA6BxC,UAAU,CAACwC,GAAD,CAAvC;AACH;AACJ;;AACD,SAAOtC,QAAP;AACH,CAXD;AAaA;;;AACA,MAAMG,aAAa,GAAGH,QAAQ,IAAI,CAACY,MAAD,EAASP,GAAT,KAAiB;AAC/C;AACA,QAAMR,OAAO,GAAG,EAAhB;;AACA,SAAOe,MAAM,KAAK2B,SAAlB,EAA6B3B,MAAM,GAAGA,MAAM,CAACwB,IAA7C,EAAmD;AAC/CvC,IAAAA,OAAO,CAAC2C,IAAR,CAAa5B,MAAb;AACH,GAL8C,CAM/C;;;AACA,QAAM6B,OAAO,GAAG;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAAhB;;AACA,OAAK,IAAIhC,CAAC,GAAGb,OAAO,CAACc,MAAR,GAAiB,CAA9B,EAAiCD,CAAC,IAAI,CAAtC,EAAyC,EAAEA,CAA3C,EAA8C;AAC1C,UAAME,MAAM,GAAGf,OAAO,CAACa,CAAD,CAAtB;AACAV,IAAAA,QAAQ,CAACY,MAAM,CAACuB,IAAR,CAAR,CAAsB9B,GAAtB,EAA2BO,MAAM,CAACN,IAAlC,EAAwCmC,OAAxC;AACH;;AACD,SAAOpC,GAAP;AACH,CAbD;AAeA;;;AACA,MAAM2B,iBAAiB,GAAG,CAAC;AAAEjC,EAAAA,UAAF;AAAcG,EAAAA,aAAd;AAA6BN,EAAAA;AAA7B,CAAD,MAA6C;AACnE+C,EAAAA,MAAM,EAAE;AACJzB,IAAAA,KAAK,EAAE,UAAU0B,gBAAV,EAA4B;AAC/B,YAAMvC,GAAG,GAAGH,aAAa,CAAC,KAAKU,MAAN,EAAcb,UAAU,CAAC6C,gBAAD,CAAxB,CAAzB;AACA,aAAOhD,OAAO,CAACS,GAAG,CAACwC,IAAL,CAAP,CAAkBxC,GAAlB,CAAP;AACH;AAJG,GAD2D;AAOnEZ,EAAAA,KAAK,EAAE;AACHiC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKiB,MAAL,EAAP;AACH;AAHE,GAP4D;AAYnEG,EAAAA,eAAe,EAAE;AACbpB,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKiB,MAAL,CAAY;AAAEG,QAAAA,eAAe,EAAE;AAAnB,OAAZ,EAAuCC,IAA9C;AACH;AAHY;AAZkD,CAA7C,CAA1B;AAmBA;;;AACA,MAAMnB,gBAAgB,GAAG,CAAC;AAAE/B,EAAAA,OAAF;AAAWiB,EAAAA;AAAX,CAAD,KAAwB;AAC7C,QAAMhB,UAAU,GAAG,EAAnB;;AACA,OAAK,MAAMqC,IAAX,IAAmBtC,OAAnB,EAA4B;AACxB,UAAM;AAAEmD,MAAAA;AAAF,QAAanD,OAAO,CAACsC,IAAD,CAA1B;;AACA,QAAIa,MAAJ,EAAY;AACR;AACAlD,MAAAA,UAAU,CAACqC,IAAD,CAAV,GAAmB;AACfT,QAAAA,GAAG,EAAE,YAAY;AACb,iBAAOZ,KAAK,CAAC;AAAEqB,YAAAA,IAAF;AAAQC,YAAAA,IAAI,EAAE,KAAKxB;AAAnB,WAAD,CAAZ;AACH;AAHc,OAAnB;AAKH,KAPD,MAOO;AACH;AACAd,MAAAA,UAAU,CAACqC,IAAD,CAAV,GAAmB;AACfjB,QAAAA,KAAK,EAAE,UAAU,GAAGZ,IAAb,EAAmB;AACtB,iBAAOQ,KAAK,CAAC;AAAEqB,YAAAA,IAAF;AAAQ7B,YAAAA,IAAR;AAAc8B,YAAAA,IAAI,EAAE,KAAKxB;AAAzB,WAAD,CAAZ;AACH;AAHc,OAAnB;AAKH;AACJ;;AACD,SAAOd,UAAP;AACH,CArBD;;AAuBAmD,MAAM,CAACC,OAAP,GAAiB3D,kBAAjB","sourcesContent":["const createNewContext = require('./context')\nconst createQueryBuilder = ({ defaultContext, query, e, config }) => {\n    const { queries, methods, properties } = query\n    const newContext = createNewContext(defaultContext)\n    const reducers = createReducers(methods)\n    const updateContext = applyReducers(reducers)\n    reducers.extend = (ctx, args) => {\n        const arr = Array.isArray(args[0]) ? args[0] : args\n        for (let i = 0; i < arr.length; ++i) {\n            updateContext(arr[i].method, ctx)\n        }\n    }\n    const builder = () => { } // must not be object literal\n    const chain = createChain(builder)\n\n    const executeProperties = {\n        one: {\n            value: async function () {\n                const ret = await config.oneCallback(this.query, config.tableName, config.userAssociatedRecordsOnly)\n                return ret;\n            }\n        },\n        all: {\n            value: async function () {\n                const ret = await config.allCallback(this.query, config.tableName, config.userAssociatedRecordsOnly)\n                return ret;\n            }\n        },\n        _tableName: {\n            get: function () {\n                return config.tableName\n            }\n        }\n    }\n\n    // EasyQB no access to from\n    const _methodProperties = methodProperties({ methods, chain });\n    delete _methodProperties.from;\n\n    Object.defineProperties(builder, {\n        ...builderProperties({ chain, newContext, updateContext, queries }),\n        ..._methodProperties,\n        ...executeProperties,\n        ...properties,\n        e: {\n            value: e\n        }\n    })\n    return chain()\n}\n\n/** Creates a new builder instance */\nconst createChain = prototype => {\n    const chain = method => {\n        const fn = (...args) => chain({ name: 'express', args, prev: method })\n        fn.method = method\n        Object.setPrototypeOf(fn, prototype)\n        return fn\n    }\n    return chain\n}\n\n/** Creates an object containing all method reducers */\nconst createReducers = methods => {\n    const reducers = {}\n    for (const name in methods) {\n        const { updateContext, properties = {} } = methods[name]\n        reducers[name] = updateContext\n        // some methods have subproperties, e.g. .unionAll\n        for (const key in properties) {\n            reducers[`${name}.${key}`] = properties[key]\n        }\n    }\n    return reducers\n}\n\n/** Follows a method chain, applying each method's reducer, to ctx */\nconst applyReducers = reducers => (method, ctx) => {\n    // follow method links to construct methods array (in reverse)\n    const methods = []\n    for (; method !== undefined; method = method.prev) {\n        methods.push(method)\n    }\n    // build methods object by processing methods in call order\n    const express = { id: 0 }\n    for (let i = methods.length - 1; i >= 0; --i) {\n        const method = methods[i]\n        reducers[method.name](ctx, method.args, express)\n    }\n    return ctx\n}\n\n/** Default properties of all SQL Query Builders */\nconst builderProperties = ({ newContext, updateContext, queries }) => ({\n    _build: {\n        value: function (inheritedContext) {\n            const ctx = updateContext(this.method, newContext(inheritedContext))\n            return queries[ctx.type](ctx)\n        }\n    },\n    query: {\n        get: function () {\n            return this._build()\n        }\n    },\n    unparameterized: {\n        get: function () {\n            return this._build({ unparameterized: true }).text\n        }\n    }\n})\n\n/** Builds object containing a property for every query building method */\nconst methodProperties = ({ methods, chain }) => {\n    const properties = {}\n    for (const name in methods) {\n        const { getter } = methods[name]\n        if (getter) {\n            // add getter methods\n            properties[name] = {\n                get: function () {\n                    return chain({ name, prev: this.method })\n                }\n            }\n        } else {\n            // add function call methods\n            properties[name] = {\n                value: function (...args) {\n                    return chain({ name, args, prev: this.method })\n                }\n            }\n        }\n    }\n    return properties\n}\n\nmodule.exports = createQueryBuilder"]},"metadata":{},"sourceType":"script"}