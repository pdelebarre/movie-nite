{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('./clauses'),\n    wth = _require.wth,\n    select = _require.select,\n    from = _require.from,\n    where = _require.where,\n    group = _require.group,\n    having = _require.having,\n    setop = _require.setop,\n    order = _require.order,\n    limit = _require.limit,\n    offset = _require.offset,\n    del = _require.del,\n    returning = _require.returning,\n    insert = _require.insert,\n    update = _require.update,\n    set = _require.set;\n\nvar query = function query() {\n  for (var _len = arguments.length, clauses = new Array(_len), _key = 0; _key < _len; _key++) {\n    clauses[_key] = arguments[_key];\n  }\n\n  return function (ctx) {\n    var text = '';\n\n    var _iterator = _createForOfIteratorHelper(clauses),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var clause = _step.value;\n        var str = clause && clause(ctx);\n\n        if (str) {\n          if (text) text += ctx.separator;\n          text += str;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return {\n      text: text,\n      args: ctx.params,\n      type: ctx.userType || ctx.type\n    };\n  };\n};\n\nvar queries = {\n  select: query(wth, select, from, where, group, having, setop, order, limit, offset),\n  update: query(wth, update, set, where, returning),\n  delete: query(wth, del, where, returning),\n  insert: query(wth, insert, returning)\n};\nmodule.exports = {\n  query: query,\n  queries: queries\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-sq/query.js"],"names":["require","wth","select","from","where","group","having","setop","order","limit","offset","del","returning","insert","update","set","query","clauses","ctx","text","clause","str","separator","args","params","type","userType","queries","delete","module","exports"],"mappings":";;eAgBIA,OAAO,CAAC,WAAD,C;IAfPC,G,YAAAA,G;IACAC,M,YAAAA,M;IACAC,I,YAAAA,I;IACAC,K,YAAAA,K;IACAC,K,YAAAA,K;IACAC,M,YAAAA,M;IACAC,K,YAAAA,K;IACAC,K,YAAAA,K;IACAC,K,YAAAA,K;IACAC,M,YAAAA,M;IACAC,G,YAAAA,G;IACAC,S,YAAAA,S;IACAC,M,YAAAA,M;IACAC,M,YAAAA,M;IACAC,G,YAAAA,G;;AAGJ,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,oCAAIC,OAAJ;AAAIA,IAAAA,OAAJ;AAAA;;AAAA,SAAgB,UAAAC,GAAG,EAAI;AACjC,QAAIC,IAAI,GAAG,EAAX;;AADiC,+CAEZF,OAFY;AAAA;;AAAA;AAEjC,0DAA8B;AAAA,YAAnBG,MAAmB;AAC1B,YAAMC,GAAG,GAAGD,MAAM,IAAIA,MAAM,CAACF,GAAD,CAA5B;;AACA,YAAIG,GAAJ,EAAS;AACL,cAAIF,IAAJ,EAAUA,IAAI,IAAID,GAAG,CAACI,SAAZ;AACVH,UAAAA,IAAI,IAAIE,GAAR;AACH;AACJ;AARgC;AAAA;AAAA;AAAA;AAAA;;AASjC,WAAO;AAAEF,MAAAA,IAAI,EAAJA,IAAF;AAAQI,MAAAA,IAAI,EAAEL,GAAG,CAACM,MAAlB;AAA0BC,MAAAA,IAAI,EAAEP,GAAG,CAACQ,QAAJ,IAAgBR,GAAG,CAACO;AAApD,KAAP;AACH,GAVa;AAAA,CAAd;;AAYA,IAAME,OAAO,GAAG;AACZzB,EAAAA,MAAM,EAAEc,KAAK,CACTf,GADS,EAETC,MAFS,EAGTC,IAHS,EAITC,KAJS,EAKTC,KALS,EAMTC,MANS,EAOTC,KAPS,EAQTC,KARS,EASTC,KATS,EAUTC,MAVS,CADD;AAaZI,EAAAA,MAAM,EAAEE,KAAK,CAACf,GAAD,EAAMa,MAAN,EAAcC,GAAd,EAAmBX,KAAnB,EAA0BQ,SAA1B,CAbD;AAcZgB,EAAAA,MAAM,EAAEZ,KAAK,CAACf,GAAD,EAAMU,GAAN,EAAWP,KAAX,EAAkBQ,SAAlB,CAdD;AAeZC,EAAAA,MAAM,EAAEG,KAAK,CAACf,GAAD,EAAMY,MAAN,EAAcD,SAAd;AAfD,CAAhB;AAkBAiB,MAAM,CAACC,OAAP,GAAiB;AAAEd,EAAAA,KAAK,EAALA,KAAF;AAASW,EAAAA,OAAO,EAAPA;AAAT,CAAjB","sourcesContent":["const {\n    wth,\n    select,\n    from,\n    where,\n    group,\n    having,\n    setop,\n    order,\n    limit,\n    offset,\n    del,\n    returning,\n    insert,\n    update,\n    set,\n} = require('./clauses')\n\nconst query = (...clauses) => ctx => {\n    let text = ''\n    for (const clause of clauses) {\n        const str = clause && clause(ctx)\n        if (str) {\n            if (text) text += ctx.separator\n            text += str\n        }\n    }\n    return { text, args: ctx.params, type: ctx.userType || ctx.type }\n}\n\nconst queries = {\n    select: query(\n        wth,\n        select,\n        from,\n        where,\n        group,\n        having,\n        setop,\n        order,\n        limit,\n        offset\n    ),\n    update: query(wth, update, set, where, returning),\n    delete: query(wth, del, where, returning),\n    insert: query(wth, insert, returning)\n}\n\nmodule.exports = { query, queries }"]},"metadata":{},"sourceType":"script"}