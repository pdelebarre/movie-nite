{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nimport { keys, objectTypes } from \"./constants\";\nimport { createMethods } from \"./util\";\nimport { promisify } from \"../utils\";\nexport class EmailPasswordAuth {\n  registerUser(email, password) {\n    return promisify(cb => this._registerUser(email, password, cb));\n  }\n\n  confirmUser(token, token_id) {\n    return promisify(cb => this._confirmUser(token, token_id, cb));\n  }\n\n  resendConfirmationEmail(email) {\n    return promisify(cb => this._resendConfirmationEmail(email, cb));\n  }\n\n  sendResetPasswordEmail(email) {\n    return promisify(cb => this._sendResetPasswordEmail(email, cb));\n  }\n\n  resetPassword(password, token, token_id) {\n    return promisify(cb => this._resetPassword(password, token, token_id, cb));\n  }\n\n  callResetPasswordFunction(email, password, ...bsonArgs) {\n    return promisify(cb => this._callResetPasswordFunction(email, password, bsonArgs, cb));\n  }\n\n}\ncreateMethods(EmailPasswordAuth.prototype, objectTypes.EMAILPASSWORDAUTH, [\"_registerUser\", \"_confirmUser\", \"_resendConfirmationEmail\", \"_sendResetPasswordEmail\", \"_resetPassword\", \"_callResetPasswordFunction\"]);\nexport function createEmailPasswordAuth(realmId, info) {\n  const proxy = Object.create(EmailPasswordAuth.prototype); // FIXME: This is currently necessary because util/createMethod expects\n  // the realm id to be present on any object that is used over rpc\n\n  proxy[keys.realm] = \"(EmailPasswordAuth object)\";\n  proxy[keys.id] = info.id;\n  proxy[keys.type] = objectTypes.EMAILPASSWORDAUTH;\n  return proxy;\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/email-password-auth.js"],"names":["keys","objectTypes","createMethods","promisify","EmailPasswordAuth","registerUser","email","password","cb","_registerUser","confirmUser","token","token_id","_confirmUser","resendConfirmationEmail","_resendConfirmationEmail","sendResetPasswordEmail","_sendResetPasswordEmail","resetPassword","_resetPassword","callResetPasswordFunction","bsonArgs","_callResetPasswordFunction","prototype","EMAILPASSWORDAUTH","createEmailPasswordAuth","realmId","info","proxy","Object","create","realm","id","type"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASA,IAAT,EAAeC,WAAf,QAAkC,aAAlC;AACA,SAASC,aAAT,QAA8B,QAA9B;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,OAAO,MAAMC,iBAAN,CAAwB;AAC7BC,EAAAA,YAAY,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC5B,WAAOJ,SAAS,CAACK,EAAE,IAAI,KAAKC,aAAL,CAAmBH,KAAnB,EAA0BC,QAA1B,EAAoCC,EAApC,CAAP,CAAhB;AACD;;AAEDE,EAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACzB,WAAOT,SAAS,CAACK,EAAE,IAAI,KAAKK,YAAL,CAAkBF,KAAlB,EAAyBC,QAAzB,EAAmCJ,EAAnC,CAAP,CAAhB;AACH;;AAEDM,EAAAA,uBAAuB,CAACR,KAAD,EAAQ;AAC3B,WAAOH,SAAS,CAACK,EAAE,IAAI,KAAKO,wBAAL,CAA8BT,KAA9B,EAAqCE,EAArC,CAAP,CAAhB;AACH;;AAEDQ,EAAAA,sBAAsB,CAACV,KAAD,EAAQ;AAC1B,WAAOH,SAAS,CAACK,EAAE,IAAI,KAAKS,uBAAL,CAA6BX,KAA7B,EAAoCE,EAApC,CAAP,CAAhB;AACH;;AAEDU,EAAAA,aAAa,CAACX,QAAD,EAAWI,KAAX,EAAkBC,QAAlB,EAA4B;AACrC,WAAOT,SAAS,CAACK,EAAE,IAAI,KAAKW,cAAL,CAAoBZ,QAApB,EAA8BI,KAA9B,EAAqCC,QAArC,EAA+CJ,EAA/C,CAAP,CAAhB;AACH;;AAEDY,EAAAA,yBAAyB,CAACd,KAAD,EAAQC,QAAR,EAAkB,GAAGc,QAArB,EAA+B;AACpD,WAAOlB,SAAS,CAACK,EAAE,IAAI,KAAKc,0BAAL,CAAgChB,KAAhC,EAAuCC,QAAvC,EAAiDc,QAAjD,EAA2Db,EAA3D,CAAP,CAAhB;AACH;;AAvB4B;AA0B/BN,aAAa,CAACE,iBAAiB,CAACmB,SAAnB,EAA8BtB,WAAW,CAACuB,iBAA1C,EAA6D,CACtE,eADsE,EAEtE,cAFsE,EAGtE,0BAHsE,EAItE,yBAJsE,EAKtE,gBALsE,EAMtE,4BANsE,CAA7D,CAAb;AASA,OAAO,SAASC,uBAAT,CAAiCC,OAAjC,EAA0CC,IAA1C,EAAgD;AACnD,QAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc1B,iBAAiB,CAACmB,SAAhC,CAAd,CADmD,CAGnD;AACA;;AACAK,EAAAA,KAAK,CAAC5B,IAAI,CAAC+B,KAAN,CAAL,GAAoB,4BAApB;AACAH,EAAAA,KAAK,CAAC5B,IAAI,CAACgC,EAAN,CAAL,GAAiBL,IAAI,CAACK,EAAtB;AACAJ,EAAAA,KAAK,CAAC5B,IAAI,CAACiC,IAAN,CAAL,GAAmBhC,WAAW,CAACuB,iBAA/B;AAEA,SAAOI,KAAP;AACH","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nimport { keys, objectTypes } from \"./constants\";\nimport { createMethods } from \"./util\";\nimport { promisify } from \"../utils\";\n\nexport class EmailPasswordAuth {\n  registerUser(email, password) {\n    return promisify(cb => this._registerUser(email, password, cb));\n  }\n\n  confirmUser(token, token_id) {\n      return promisify(cb => this._confirmUser(token, token_id, cb));\n  }\n\n  resendConfirmationEmail(email) {\n      return promisify(cb => this._resendConfirmationEmail(email, cb));\n  }\n\n  sendResetPasswordEmail(email) {\n      return promisify(cb => this._sendResetPasswordEmail(email, cb));\n  }\n\n  resetPassword(password, token, token_id) {\n      return promisify(cb => this._resetPassword(password, token, token_id, cb));\n  }\n\n  callResetPasswordFunction(email, password, ...bsonArgs) {\n      return promisify(cb => this._callResetPasswordFunction(email, password, bsonArgs, cb));\n  }\n}\n\ncreateMethods(EmailPasswordAuth.prototype, objectTypes.EMAILPASSWORDAUTH, [\n    \"_registerUser\",\n    \"_confirmUser\",\n    \"_resendConfirmationEmail\",\n    \"_sendResetPasswordEmail\",\n    \"_resetPassword\",\n    \"_callResetPasswordFunction\",\n]);\n\nexport function createEmailPasswordAuth(realmId, info) {\n    const proxy = Object.create(EmailPasswordAuth.prototype);\n\n    // FIXME: This is currently necessary because util/createMethod expects\n    // the realm id to be present on any object that is used over rpc\n    proxy[keys.realm] = \"(EmailPasswordAuth object)\";\n    proxy[keys.id] = info.id;\n    proxy[keys.type] = objectTypes.EMAILPASSWORDAUTH;\n\n    return proxy;\n}\n"]},"metadata":{},"sourceType":"module"}