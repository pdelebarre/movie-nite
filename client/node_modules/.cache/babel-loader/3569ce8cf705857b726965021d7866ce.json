{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import { useMongoDB } from \"./store/mongodb\";\n// import { useRealmApp } from \"./store/realm\";\n\nimport api from \"./api/queries\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\";\nimport GENRES from \"./resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  _s();\n\n  // const { loginApiKey, logOut, user } = useRealmApp();\n  // const { db } = useMongoDB();\n  // handleLogIn();\n  const [movies, setMovies] = useState(api.getAllMovies()); //const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async movie => {\n    console.log(`adding `, movie);\n    const genres = getGenres(movie.genre_ids);\n    const payload = {\n      id: movie.id,\n      title: movie.title,\n      genres: genres,\n      poster_path: movie.poster_path,\n      overview: movie.overview,\n      vote_average: Number(movie.vote_average),\n      watched: false\n    };\n    await api.insertMovie(payload).then(res => {\n      window.alert(`Movie inserted successfully`);\n      setMovies([...movies, movie]);\n    });\n  }; // useEffect(() => {\n  //   async function wrapMovieQuery() {\n  //     // if (user && db) {\n  //     //   const authoredMovies = await db.collection(\"movies\").find({},{sort:{ \"watched\": 1 }});\n  //     //   setMovies(authoredMovies);\n  //     // }\n  //     const authoredMovies = await api.getAllMovies();\n  //     setMovies(authoredMovies);\n  //   }\n  //   wrapMovieQuery();\n  // }, [refresh]);\n  // async function handleLogIn() {\n  //   await loginApiKey();\n  // }\n\n\n  const isDuplicate = async movie => {\n    const dupe = await api.getMovieById(movie.id); // db.collection(\"movies\").findOne({ id: movie.id });\n\n    console.log(\"dupe?\", dupe);\n    return !(dupe === null);\n  };\n\n  const onAddHandler = async movie => {\n    console.log(`in App, adding: `, movie); // let dupe = await isDuplicate(movie);\n    // dupe ? console.log(`dupe`, movie) : addMovie(movie);\n\n    addMovie(movie); // setRefresh((st) => !st);\n  };\n\n  const onWatchedHandler = async movie => {\n    const payload = { ...movie\n    };\n    payload.watched = !payload.watched;\n    await api.updateMovieById(movie.id, payload).then(res => {\n      window.alert(`Movie updated successfully`);\n    }); // await db\n    //   .collection(\"movies\")\n    //   .updateOne({ id: movie.id }, { $set: { watched: !movie.watched } })\n    //   .then((result) =>\n    //     console.log(`Successfully flagged item with _id: ${result.insertedId}`)\n    //   )\n    //   .catch((err) => console.error(`Failed to flag item: ${err}`));\n  };\n\n  const onRemoveHandler = async movie => {\n    await api.deleteMovieById(movie.id).then(result => console.log(`Successfully deleted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to delete item: ${err}`));\n  }; // return user && db && user.state === \"active\" && (\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [movies && /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: movies // user={user}\n      // logOut={logOut}\n      ,\n      onWatchedHandler: onWatchedHandler,\n      onRemoveHandler: onRemoveHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SearchMovie, {\n      onAddHandler: onAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XpUxQvs6R4sVxSzJ+jtYkO2pXnY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/client/src/App.js"],"names":["React","useState","useEffect","api","SearchMovie","MovieList","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","App","movies","setMovies","getAllMovies","addMovie","movie","genres","payload","title","poster_path","overview","vote_average","Number","watched","insertMovie","then","res","window","alert","isDuplicate","dupe","getMovieById","onAddHandler","onWatchedHandler","updateMovieById","onRemoveHandler","deleteMovieById","insertedId","catch","err","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import { useMongoDB } from \"./store/mongodb\";\n// import { useRealmApp } from \"./store/realm\";\nimport api from \"./api/queries\";\n\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\";\n\nimport GENRES from \"./resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  // const { loginApiKey, logOut, user } = useRealmApp();\n  // const { db } = useMongoDB();\n\n  // handleLogIn();\n\n  const [movies, setMovies] = useState(api.getAllMovies());\n\n  //const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async (movie) => {\n    console.log(`adding `, movie);\n\n    const genres = getGenres(movie.genre_ids);\n\n    const payload = {\n      id: movie.id,\n      title: movie.title,\n      genres: genres,\n      poster_path: movie.poster_path,\n      overview: movie.overview,\n      vote_average: Number(movie.vote_average),\n      watched: false,\n    };\n\n    await api.insertMovie(payload).then((res) => {\n      window.alert(`Movie inserted successfully`);\n\n      setMovies([...movies,movie]);\n    });\n  };\n\n  // useEffect(() => {\n  //   async function wrapMovieQuery() {\n  //     // if (user && db) {\n  //     //   const authoredMovies = await db.collection(\"movies\").find({},{sort:{ \"watched\": 1 }});\n  //     //   setMovies(authoredMovies);\n  //     // }\n  //     const authoredMovies = await api.getAllMovies();\n  //     setMovies(authoredMovies);\n  //   }\n  //   wrapMovieQuery();\n  // }, [refresh]);\n\n  // async function handleLogIn() {\n\n  //   await loginApiKey();\n  // }\n\n  const isDuplicate = async (movie) => {\n    const dupe = await api.getMovieById(movie.id);\n\n    // db.collection(\"movies\").findOne({ id: movie.id });\n    console.log(\"dupe?\", dupe);\n\n    return !(dupe === null);\n  };\n\n  const onAddHandler = async (movie) => {\n    console.log(`in App, adding: `, movie);\n    // let dupe = await isDuplicate(movie);\n    // dupe ? console.log(`dupe`, movie) : addMovie(movie);\n    addMovie(movie);\n    // setRefresh((st) => !st);\n  };\n\n  const onWatchedHandler = async (movie) => {\n    const payload = { ...movie };\n    payload.watched = !payload.watched;\n\n    await api.updateMovieById(movie.id, payload).then((res) => {\n      window.alert(`Movie updated successfully`);\n    });\n\n    // await db\n    //   .collection(\"movies\")\n    //   .updateOne({ id: movie.id }, { $set: { watched: !movie.watched } })\n    //   .then((result) =>\n    //     console.log(`Successfully flagged item with _id: ${result.insertedId}`)\n    //   )\n    //   .catch((err) => console.error(`Failed to flag item: ${err}`));\n  };\n\n  const onRemoveHandler = async (movie) => {\n    await api\n      .deleteMovieById(movie.id)\n      .then((result) =>\n        console.log(`Successfully deleted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to delete item: ${err}`));\n  };\n\n  // return user && db && user.state === \"active\" && (\n  return (\n    <div>\n      {movies && (\n        <MovieList\n          movies={movies}\n          // user={user}\n          // logOut={logOut}\n          onWatchedHandler={onWatchedHandler}\n          onRemoveHandler={onRemoveHandler}\n        />\n      )}\n      <SearchMovie onAddHandler={onAddHandler} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}