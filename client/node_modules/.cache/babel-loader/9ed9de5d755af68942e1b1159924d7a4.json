{"ast":null,"code":"const {\n  isObject,\n  buildCall,\n  mapJoin,\n  objectMapJoin\n} = require('../../lib-util');\n\nconst conditions = require('./conditions');\n\nconst valuesArray = require('./values_array');\n\nmodule.exports = (ctx, items, start = 0, end = items.length) => {\n  if (end > items.length) end = items.length;\n  let txt = '';\n\n  for (let i = start; i < end; ++i) {\n    const item = items[i];\n    if (i !== start) txt += item.join;\n    txt += fromItem(ctx, item.args);\n    if (item.on) txt += ` on ${conditions(ctx, item.on)}`;else if (item.using) txt += ` using (${using(ctx, item.using)})`;\n  }\n\n  return txt;\n};\n\nconst usingArg = (ctx, arg) => {\n  if (typeof arg === 'string') return arg;\n  if (typeof arg === 'function') return ctx.build(arg);\n  throw Error('Error: Invalid .using arg');\n};\n\nconst using = mapJoin(buildCall(mapJoin(usingArg)));\n\nconst fromArg = (ctx, arg) => {\n  if (typeof arg === 'string') return arg;\n  if (typeof arg === 'function') return ctx.build(arg);\n  if (isObject(arg)) return buildObject(ctx, arg);\n  throw Error('Error: Invalid .from argument:', arg);\n};\n\nconst buildProperty = (ctx, key, value) => {\n  if (typeof value === 'string') return `${value} ${ctx.mapKey(key)}`;\n  if (typeof value === 'function') return `${ctx.build(value)} ${ctx.mapKey(key)}`;\n\n  if (Array.isArray(value)) {\n    const {\n      columns,\n      values\n    } = valuesArray(ctx, value);\n    return `(${values}) ${ctx.mapKey(key)}(${columns})`;\n  }\n\n  throw Error('Error: Invalid .from argument');\n};\n\nconst buildObject = objectMapJoin(buildProperty);\nconst fromItem = buildCall(mapJoin(fromArg));","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-sq/common/from_items.js"],"names":["isObject","buildCall","mapJoin","objectMapJoin","require","conditions","valuesArray","module","exports","ctx","items","start","end","length","txt","i","item","join","fromItem","args","on","using","usingArg","arg","build","Error","fromArg","buildObject","buildProperty","key","value","mapKey","Array","isArray","columns","values"],"mappings":"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","sourcesContent":["const {\n  isObject,\n  buildCall,\n  mapJoin,\n  objectMapJoin\n} = require('../../lib-util')\nconst conditions = require('./conditions')\nconst valuesArray = require('./values_array')\n\nmodule.exports = (ctx, items, start = 0, end = items.length) => {\n  if (end > items.length) end = items.length\n  let txt = ''\n  for (let i = start; i < end; ++i) {\n    const item = items[i]\n    if (i !== start) txt += item.join\n    txt += fromItem(ctx, item.args)\n    if (item.on) txt += ` on ${conditions(ctx, item.on)}`\n    else if (item.using) txt += ` using (${using(ctx, item.using)})`\n  }\n  return txt\n}\n\nconst usingArg = (ctx, arg) => {\n  if (typeof arg === 'string') return arg\n  if (typeof arg === 'function') return ctx.build(arg)\n  throw Error('Error: Invalid .using arg')\n}\nconst using = mapJoin(buildCall(mapJoin(usingArg)))\n\nconst fromArg = (ctx, arg) => {\n  if (typeof arg === 'string') return arg\n  if (typeof arg === 'function') return ctx.build(arg)\n  if (isObject(arg)) return buildObject(ctx, arg)\n  throw Error('Error: Invalid .from argument:', arg)\n}\n\nconst buildProperty = (ctx, key, value) => {\n  if (typeof value === 'string') return `${value} ${ctx.mapKey(key)}`\n  if (typeof value === 'function')\n    return `${ctx.build(value)} ${ctx.mapKey(key)}`\n  if (Array.isArray(value)) {\n    const { columns, values } = valuesArray(ctx, value)\n    return `(${values}) ${ctx.mapKey(key)}(${columns})`\n  }\n  throw Error('Error: Invalid .from argument')\n}\n\nconst buildObject = objectMapJoin(buildProperty)\nconst fromItem = buildCall(mapJoin(fromArg))\n"]},"metadata":{},"sourceType":"script"}