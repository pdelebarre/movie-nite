{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useMongoDB } from \"./store/mongodb\";\nimport { useRealmApp } from \"./store/realm\";\nimport classes from \"./App.module.css\";\nimport LogInForm from \"./components/LoginForm\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\"; // import TestMongo from \"./tests/TestMongo\";\n\nimport GENRES from \"./resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  _s();\n\n  const API_KEY = \"X6vbOvQjCACWfxM0IMCGmS8u1j5mPLqL5YnoQFu99dPqn5UnSzGXOeFJ0mp7ZzbB\";\n  const {\n    loginApiKey,\n    logOut,\n    user\n  } = useRealmApp();\n  const {\n    db\n  } = useMongoDB();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async movie => {\n    console.log(`adding `, movie);\n    const genres = getGenres(movie.genre_ids);\n    await db.collection(\"movies\").insertOne({\n      id: movie.id,\n      title: movie.title,\n      genres: genres,\n      poster_path: movie.poster_path,\n      overview: movie.overview,\n      vote_average: Number(movie.vote_average),\n      watched: false\n    }).then(result => console.log(`Successfully inserted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to insert item: ${err}`));\n  };\n\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      if (user && db) {\n        const authoredMovies = await db.collection(\"movies\").find();\n        setMovies(authoredMovies);\n      }\n    }\n\n    wrapMovieQuery();\n  }, [user, db, refresh]);\n\n  async function handleLogIn() {\n    //await logIn(email, password);\n    await loginApiKey(API_KEY);\n  }\n\n  const isDuplicate = async movie => {\n    const dupe = await db.collection(\"movies\").findOne({\n      id: movie.id\n    });\n    console.log('dupe?', dupe);\n    return dupe !== null;\n  };\n\n  const onAddHandler = movie => {\n    console.log(`in App, adding: `, movie);\n    !isDuplicate(movie) && addMovie(movie);\n    setRefresh(st => !st);\n  };\n\n  handleLogIn();\n  return user && db && user.state === \"active\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.contain,\n    children: [/*#__PURE__*/_jsxDEV(MovieList, {\n      className: classes.row,\n      movies: movies,\n      user: user,\n      logOut: logOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchMovie, {\n      className: classes.row,\n      onAddHandler: onAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this) :\n  /*#__PURE__*/\n  // <LogInForm className={classes.contain}\n  //   email={email}\n  //   setEmail={setEmail}\n  //   password={password}\n  //   setPassword={setPassword}\n  //   handleLogIn={handleLogIn}\n  // />\n  _jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(App, \"V3blsd+YRQFROn9jYAHXOSrp4fs=\", false, function () {\n  return [useRealmApp, useMongoDB];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["React","useState","useEffect","useMongoDB","useRealmApp","classes","LogInForm","SearchMovie","MovieList","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","App","API_KEY","loginApiKey","logOut","user","db","email","setEmail","password","setPassword","movies","setMovies","refresh","setRefresh","addMovie","movie","genres","collection","insertOne","title","poster_path","overview","vote_average","Number","watched","then","insertedId","catch","err","error","wrapMovieQuery","authoredMovies","handleLogIn","isDuplicate","dupe","findOne","onAddHandler","st","state","contain","row"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useMongoDB } from \"./store/mongodb\";\nimport { useRealmApp } from \"./store/realm\";\n\nimport classes from \"./App.module.css\";\n\nimport LogInForm from \"./components/LoginForm\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\";\n\n// import TestMongo from \"./tests/TestMongo\";\n\nimport GENRES from \"./resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  \n  const API_KEY = \"X6vbOvQjCACWfxM0IMCGmS8u1j5mPLqL5YnoQFu99dPqn5UnSzGXOeFJ0mp7ZzbB\"\n   \n  const { loginApiKey, logOut, user } = useRealmApp();\n  const { db } = useMongoDB();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n\n  const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async (movie) => {\n    console.log(`adding `, movie);\n\n    const genres = getGenres(movie.genre_ids);\n    await db\n      .collection(\"movies\")\n      .insertOne({\n        id: movie.id,\n        title: movie.title,\n        genres: genres,\n        poster_path: movie.poster_path,\n        overview: movie.overview,\n        vote_average: Number(movie.vote_average),\n        watched: false,\n      })\n      .then((result) =>\n        console.log(`Successfully inserted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to insert item: ${err}`));\n  };\n\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      if (user && db) {\n        const authoredMovies = await db.collection(\"movies\").find();\n        setMovies(authoredMovies);\n      }\n    }\n    wrapMovieQuery();\n  }, [user, db, refresh]);\n\n  async function handleLogIn() {\n    //await logIn(email, password);\n    await loginApiKey(API_KEY);\n  }\n\n  const isDuplicate = async(movie) => {\n    const dupe = await db\n    .collection(\"movies\").findOne({ id: movie.id });\n    console.log('dupe?',dupe);\n\n    return dupe!==null;\n  }\n\n\n  const onAddHandler = (movie) => {\n    console.log(`in App, adding: `, movie);\n    !isDuplicate(movie) && addMovie(movie);\n    setRefresh(st=>!st);\n  };\n\n  handleLogIn();\n\n  return user && db && user.state === \"active\" ? (\n    <div className={classes.contain}>\n      <MovieList\n        className={classes.row}\n        movies={movies}\n        user={user}\n        logOut={logOut}\n      />\n      <SearchMovie className={classes.row} onAddHandler={onAddHandler} />\n\n      {/* <TestMongo /> */}\n    </div>\n  ) : (\n    // <LogInForm className={classes.contain}\n    //   email={email}\n    //   setEmail={setEmail}\n    //   password={password}\n    //   setPassword={setPassword}\n    //   handleLogIn={handleLogIn}\n    // />\n    <>\n    {/* {handleLogIn} */}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}