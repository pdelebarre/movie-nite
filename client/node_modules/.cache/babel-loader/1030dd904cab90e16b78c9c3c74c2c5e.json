{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nconst {\n  EJSON\n} = require(\"bson\");\n\nconst {\n  MongoDBCollection\n} = require(\"./mongo-client\");\n\nconst {\n  cleanArguments,\n  promisify\n} = require(\"./utils\");\n\nconst instanceMethods = {\n  linkCredentials(credentials) {\n    return promisify(cb => this._linkCredentials(credentials, cb));\n  },\n\n  logOut() {\n    return promisify(cb => this._logOut(cb));\n  },\n\n  async callFunction(name, args = [], service = undefined) {\n    const cleanedArgs = cleanArguments(args);\n    const stringifiedArgs = EJSON.stringify(cleanedArgs, {\n      relaxed: false\n    });\n    const result = await promisify(cb => this._callFunction(name, stringifiedArgs, service, cb));\n    return EJSON.parse(result);\n  },\n\n  async refreshCustomData() {\n    await promisify(cb => this._refreshCustomData(cb));\n    return this.customData;\n  },\n\n  mongoClient(serviceName) {\n    const user = this;\n    return {\n      get serviceName() {\n        return serviceName;\n      },\n\n      db(dbName) {\n        return {\n          get name() {\n            return dbName;\n          },\n\n          collection(collName) {\n            return new MongoDBCollection(user, serviceName, dbName, collName);\n          }\n\n        };\n      }\n\n    };\n  },\n\n  push(serviceName) {\n    const user = this;\n    return {\n      register(token) {\n        return promisify(cb => user._pushRegister(serviceName, token, cb));\n      },\n\n      deregister() {\n        return promisify(cb => user._pushDeregister(serviceName, cb));\n      }\n\n    };\n  },\n\n  get functions() {\n    return this._functionsOnService(undefined);\n  },\n\n  get auth() {\n    const user = this;\n    return new Proxy({}, {\n      get(target, name) {\n        if (name === \"apiKeys\") {\n          return user._authApiKeys;\n        }\n      }\n\n    });\n  },\n\n  get customData() {\n    return EJSON.parse(this._customData);\n  },\n\n  // Internal helpers.\n  _functionsOnService(service) {\n    const user = this;\n    return new Proxy({}, {\n      get(target, name, receiver) {\n        if (typeof name === \"string\" && name != \"inspect\") {\n          return (...args) => {\n            return user.callFunction(name, args, service);\n          };\n        } else {\n          return Reflect.get(target, name, receiver);\n        }\n      }\n\n    });\n  }\n\n};\nconst staticMethods = {// none\n};\nmodule.exports = {\n  static: staticMethods,\n  instance: instanceMethods\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/user.js"],"names":["EJSON","require","MongoDBCollection","cleanArguments","promisify","instanceMethods","linkCredentials","credentials","cb","_linkCredentials","logOut","_logOut","callFunction","name","args","service","undefined","cleanedArgs","stringifiedArgs","stringify","relaxed","result","_callFunction","parse","refreshCustomData","_refreshCustomData","customData","mongoClient","serviceName","user","db","dbName","collection","collName","push","register","token","_pushRegister","deregister","_pushDeregister","functions","_functionsOnService","auth","Proxy","get","target","_authApiKeys","_customData","receiver","Reflect","staticMethods","module","exports","static","instance"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nconst { EJSON } = require(\"bson\");\n\nconst {MongoDBCollection} = require(\"./mongo-client\");\nconst {cleanArguments, promisify} = require(\"./utils\");\n\nconst instanceMethods = {\n    linkCredentials(credentials) {\n        return promisify(cb => this._linkCredentials(credentials, cb));\n    },\n\n    logOut() {\n        return promisify(cb => this._logOut(cb));\n    },\n\n    async callFunction(name, args = [], service = undefined) {\n        const cleanedArgs = cleanArguments(args);\n        const stringifiedArgs = EJSON.stringify(cleanedArgs, { relaxed: false });\n        const result = await promisify(cb => this._callFunction(name, stringifiedArgs, service, cb));\n        return EJSON.parse(result);\n    },\n\n    async refreshCustomData() {\n        await promisify(cb => this._refreshCustomData(cb));\n        return this.customData;\n    },\n\n    mongoClient(serviceName) {\n        const user = this;\n        return {\n            get serviceName() {\n                return serviceName;\n            },\n\n            db(dbName) {\n                return {\n                    get name() {\n                        return dbName;\n                    },\n\n                    collection(collName) {\n                        return new MongoDBCollection(\n                            user,\n                            serviceName,\n                            dbName,\n                            collName,\n                        );\n                    },\n                };\n            },\n        };\n    },\n\n    push(serviceName) {\n        const user = this;\n        return {\n            register(token) {\n                return promisify(cb => user._pushRegister(serviceName, token, cb));\n            },\n            deregister() {\n                return promisify(cb => user._pushDeregister(serviceName, cb));\n            },\n        };\n    },\n\n    get functions() {\n        return this._functionsOnService(undefined);\n    },\n\n    get auth() {\n        const user = this;\n        return new Proxy({}, {\n            get(target, name) {\n                if (name === \"apiKeys\") {\n                    return user._authApiKeys;\n                }\n            }\n        });\n    },\n\n    get customData() {\n        return EJSON.parse(this._customData);\n    },\n\n    // Internal helpers.\n    _functionsOnService(service) {\n        const user = this;\n        return new Proxy({}, {\n            get(target, name, receiver) {\n                if (typeof name === \"string\" && name != \"inspect\") {\n                    return (...args) => {\n                        return user.callFunction(name, args, service);\n                    };\n                } else {\n                    return Reflect.get(target, name, receiver);\n                }\n            },\n        });\n    },\n}\n\nconst staticMethods = {\n    // none\n};\n\nmodule.exports = {\n    static: staticMethods,\n    instance: instanceMethods,\n};\n"]},"metadata":{},"sourceType":"script"}