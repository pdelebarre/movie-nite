{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Movies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Movies = props => {\n  _s();\n\n  const [refresh, setRefresh] = useState(false);\n  const mongodb = props.user.mongoClient(\"mongodb-atlas\");\n  const moviesCollection = mongodb.db(\"movie-nite\").collection(\"movies\"); // const { movies } = useEffect(\n  //   () => {\n\n  const query = {};\n  const projection = {};\n  const movies = moviesCollection.find().toArray().then(items => {\n    console.log(`Successfully found ${items.length} documents.`);\n    items.forEach(console.log);\n    return items;\n  }); //     .catch(err => console.error(`Failed to find documents: ${err}`))},\n  //   [refresh]\n  // );\n\n  const headers = /*#__PURE__*/_jsxDEV(\"thead\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"watched\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"poster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n\n  const markWatched = async id => {\n    // let singleRecord = await table().return().where(e.eq(\"id\", id)).one();\n    // let watched = singleRecord.watched;\n    // await table\n    //   .where({ _key: singleRecord._key })\n    //   .set({ watched: !watched })\n    //   .one();\n    setRefresh(st => !st);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(SearchMovie, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.movies,\n      children: [headers, /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: movies.map((movie, index) => {\n          return /*#__PURE__*/_jsxDEV(Movie, {\n            movie: movie,\n            markWatched: markWatched // index={movie[\"_key\"]}\n\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Movies, \"6+/yT37Nx+gEjvkQsqOCPSG4734=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Movies.js"],"names":["React","useState","useEffect","SearchMovie","classes","Movie","Movies","props","refresh","setRefresh","mongodb","user","mongoClient","moviesCollection","db","collection","query","projection","movies","find","toArray","then","items","console","log","length","forEach","headers","markWatched","id","st","container","map","movie","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;;AAIA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,OAAO,GAAGH,KAAK,CAACI,IAAN,CAAWC,WAAX,CAAuB,eAAvB,CAAhB;AAEA,QAAMC,gBAAgB,GAAGH,OAAO,CAACI,EAAR,CAAW,YAAX,EAAyBC,UAAzB,CAAoC,QAApC,CAAzB,CALwB,CAOxB;AACA;;AACE,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,MAAM,GAAEL,gBAAgB,CAACM,IAAjB,GACXC,OADW,GAEXC,IAFW,CAENC,KAAK,IAAI;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBF,KAAK,CAACG,MAAO,aAA/C;AACAH,IAAAA,KAAK,CAACI,OAAN,CAAcH,OAAO,CAACC,GAAtB;AACA,WAAOF,KAAP;AACD,GANW,CAAd,CAXsB,CAmBxB;AACA;AACA;;AAEA,QAAMK,OAAO,gBACX;AAAA,2BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAYA,QAAMC,WAAW,GAAG,MAAOC,EAAP,IAAc;AAChC;AACA;AAEA;AACA;AACA;AACA;AAEApB,IAAAA,UAAU,CAAEqB,EAAD,IAAQ,CAACA,EAAV,CAAV;AACD,GAVD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAE1B,OAAO,CAAC2B,SAAxB;AAAA,4BAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AAAO,MAAA,SAAS,EAAE3B,OAAO,CAACc,MAA1B;AAAA,iBACGS,OADH,eAEE;AAAA,kBACGT,MAAM,CAACc,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC5B,8BACE,QAAC,KAAD;AAEE,YAAA,KAAK,EAAED,KAFT;AAGE,YAAA,WAAW,EAAEL,WAHf,CAIE;;AAJF,aACOK,KAAK,CAACJ,EADb;AAAA;AAAA;AAAA;AAAA,kBADF;AAQD,SATA;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CArED;;GAAMvB,M;;KAAAA,M;AAuEN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\n\n\n\nconst Movies = (props) => {\n  const [refresh, setRefresh] = useState(false);\n\n  const mongodb = props.user.mongoClient(\"mongodb-atlas\");\n\n  const moviesCollection = mongodb.db(\"movie-nite\").collection(\"movies\");\n\n  // const { movies } = useEffect(\n  //   () => {\n    const query = {  };\n    const projection = { };\n    const movies= moviesCollection.find()\n      .toArray()\n      .then(items => {\n        console.log(`Successfully found ${items.length} documents.`)\n        items.forEach(console.log)\n        return items\n      });\n\n  //     .catch(err => console.error(`Failed to find documents: ${err}`))},\n  //   [refresh]\n  // );\n\n  const headers = (\n    <thead>\n      <tr>\n        <th>watched</th>\n        <th>title</th>\n        <th>genre</th>\n        <th>poster</th>\n        <th>delete</th>\n      </tr>\n    </thead>\n  );\n\n  const markWatched = async (id) => {\n    // let singleRecord = await table().return().where(e.eq(\"id\", id)).one();\n    // let watched = singleRecord.watched;\n\n    // await table\n    //   .where({ _key: singleRecord._key })\n    //   .set({ watched: !watched })\n    //   .one();\n\n    setRefresh((st) => !st);\n  };\n\n  return (\n    <div className={classes.container}>\n      {/* TODO:fix first call and call when non empty */}\n      <SearchMovie  />\n\n      <table className={classes.movies}>\n        {headers}\n        <tbody>\n          {movies.map((movie, index) => {\n            return (\n              <Movie\n                key={movie.id}\n                movie={movie}\n                markWatched={markWatched}\n                // index={movie[\"_key\"]}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}