{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nconst {\n  EJSON\n} = require(\"bson\");\n\nconst {\n  DefaultNetworkTransport\n} = require('realm-network-transport');\n\nconst {\n  cleanArguments\n} = require(\"./utils\");\n/**\n * A remote collection of documents.\n */\n\n\nclass MongoDBCollection {\n  /**\n   * Construct a remote collection of documents\n   */\n  constructor(user, serviceName, databaseName, collectionName) {\n    this.functions = user._functionsOnService(serviceName);\n    this.databaseName = databaseName;\n    this.collectionName = collectionName;\n    this.user = user;\n    this.serviceName = serviceName;\n  }\n  /** @inheritdoc */\n\n\n  get name() {\n    return this.collectionName;\n  }\n  /** @inheritdoc */\n\n\n  find(filter = {}, options = {}) {\n    return this.functions.find({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort,\n      limit: options.limit\n    });\n  }\n  /** @inheritdoc */\n\n\n  findOne(filter = {}, options = {}) {\n    return this.functions.findOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort\n    });\n  }\n  /** @inheritdoc */\n\n\n  findOneAndUpdate(filter = {}, update, options = {}) {\n    return this.functions.findOneAndUpdate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter: filter,\n      update: update,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument\n    });\n  }\n  /** @inheritdoc */\n\n\n  findOneAndReplace(filter = {}, replacement, options = {}) {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter: filter,\n      update: replacement,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument\n    });\n  }\n  /** @inheritdoc */\n\n\n  findOneAndDelete(filter = {}, options = {}) {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter: filter,\n      sort: options.sort,\n      projection: options.projection\n    });\n  }\n  /** @inheritdoc */\n\n\n  aggregate(pipeline) {\n    return this.functions.aggregate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      pipeline: pipeline\n    });\n  }\n  /** @inheritdoc */\n\n\n  count(filter = {}, options = {}) {\n    return this.functions.count({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      limit: options.limit\n    });\n  }\n  /** @inheritdoc */\n\n\n  insertOne(document) {\n    return this.functions.insertOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      document\n    });\n  }\n  /** @inheritdoc */\n\n\n  insertMany(documents) {\n    return this.functions.insertMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      documents: documents\n    });\n  }\n  /** @inheritdoc */\n\n\n  deleteOne(filter = {}) {\n    return this.functions.deleteOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter\n    });\n  }\n  /** @inheritdoc */\n\n\n  deleteMany(filter = {}) {\n    return this.functions.deleteMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter\n    });\n  }\n  /** @inheritdoc */\n\n\n  updateOne(filter, update, options = {}) {\n    return this.functions.updateOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert\n    });\n  }\n  /** @inheritdoc */\n\n\n  updateMany(filter, update, options = {}) {\n    return this.functions.updateMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert\n    });\n  }\n\n  async *watch({\n    ids = undefined,\n    filter = undefined\n  } = {}) {\n    const args = cleanArguments({\n      database: this.databaseName,\n      collection: this.collectionName,\n      ids,\n      filter\n    });\n    const stringifiedArgs = EJSON.stringify([args], {\n      relaxed: false\n    });\n\n    const request = this.user._makeStreamingRequest(\"watch\", this.serviceName, stringifiedArgs);\n\n    const reply = await new DefaultNetworkTransport().fetch(request);\n\n    if (!reply.ok) {\n      throw {\n        code: reply.status,\n        message: await reply.text()\n      };\n    }\n\n    let watchStream = this.user._newWatchStream();\n\n    for await (let chunk of reply.body) {\n      watchStream.feedBuffer(chunk);\n\n      while (watchStream.state == 'HAVE_EVENT') {\n        let next = watchStream.nextEvent();\n        yield EJSON.parse(next);\n      }\n\n      if (watchStream.state == 'HAVE_ERROR') throw watchStream.error;\n    }\n  }\n\n}\n\nmodule.exports = {\n  MongoDBCollection\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/mongo-client.js"],"names":["EJSON","require","DefaultNetworkTransport","cleanArguments","MongoDBCollection","constructor","user","serviceName","databaseName","collectionName","functions","_functionsOnService","name","find","filter","options","database","collection","query","project","projection","sort","limit","findOne","findOneAndUpdate","update","upsert","returnNewDocument","findOneAndReplace","replacement","findOneAndDelete","aggregate","pipeline","count","insertOne","document","insertMany","documents","deleteOne","deleteMany","updateOne","updateMany","watch","ids","undefined","args","stringifiedArgs","stringify","relaxed","request","_makeStreamingRequest","reply","fetch","ok","code","status","message","text","watchStream","_newWatchStream","chunk","body","feedBuffer","state","next","nextEvent","parse","error","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,MAAD,CAAzB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAA4BD,OAAO,CAAC,yBAAD,CAAzC;;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,SAAD,CAAlC;AAEA;AACA;AACA;;;AACA,MAAMG,iBAAN,CAAwB;AAEpB;AACJ;AACA;AACIC,EAAAA,WAAW,CACPC,IADO,EAEPC,WAFO,EAGPC,YAHO,EAIPC,cAJO,EAKT;AACE,SAAKC,SAAL,GAAiBJ,IAAI,CAACK,mBAAL,CAAyBJ,WAAzB,CAAjB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACH;AAED;;;AACQ,MAAJK,IAAI,GAAG;AACP,WAAO,KAAKH,cAAZ;AACH;AAED;;;AACAI,EAAAA,IAAI,CACAC,MAAM,GAAG,EADT,EAEAC,OAAO,GAAG,EAFV,EAGF;AACE,WAAO,KAAKL,SAAL,CAAeG,IAAf,CAAoB;AACvBG,MAAAA,QAAQ,EAAE,KAAKR,YADQ;AAEvBS,MAAAA,UAAU,EAAE,KAAKR,cAFM;AAGvBS,MAAAA,KAAK,EAAEJ,MAHgB;AAIvBK,MAAAA,OAAO,EAAEJ,OAAO,CAACK,UAJM;AAKvBC,MAAAA,IAAI,EAAEN,OAAO,CAACM,IALS;AAMvBC,MAAAA,KAAK,EAAEP,OAAO,CAACO;AANQ,KAApB,CAAP;AAQH;AAED;;;AACAC,EAAAA,OAAO,CACHT,MAAM,GAAG,EADN,EAEHC,OAAO,GAAG,EAFP,EAGL;AACE,WAAO,KAAKL,SAAL,CAAea,OAAf,CAAuB;AAC1BP,MAAAA,QAAQ,EAAE,KAAKR,YADW;AAE1BS,MAAAA,UAAU,EAAE,KAAKR,cAFS;AAG1BS,MAAAA,KAAK,EAAEJ,MAHmB;AAI1BK,MAAAA,OAAO,EAAEJ,OAAO,CAACK,UAJS;AAK1BC,MAAAA,IAAI,EAAEN,OAAO,CAACM;AALY,KAAvB,CAAP;AAOH;AAED;;;AACAG,EAAAA,gBAAgB,CACZV,MAAM,GAAG,EADG,EAEZW,MAFY,EAGZV,OAAO,GAAG,EAHE,EAId;AACE,WAAO,KAAKL,SAAL,CAAec,gBAAf,CAAgC;AACnCR,MAAAA,QAAQ,EAAE,KAAKR,YADoB;AAEnCS,MAAAA,UAAU,EAAE,KAAKR,cAFkB;AAGnCK,MAAAA,MAAM,EAAEA,MAH2B;AAInCW,MAAAA,MAAM,EAAEA,MAJ2B;AAKnCJ,MAAAA,IAAI,EAAEN,OAAO,CAACM,IALqB;AAMnCD,MAAAA,UAAU,EAAEL,OAAO,CAACK,UANe;AAOnCM,MAAAA,MAAM,EAAEX,OAAO,CAACW,MAPmB;AAQnCC,MAAAA,iBAAiB,EAAEZ,OAAO,CAACY;AARQ,KAAhC,CAAP;AAUH;AAED;;;AACAC,EAAAA,iBAAiB,CACbd,MAAM,GAAG,EADI,EAEbe,WAFa,EAGbd,OAAO,GAAG,EAHG,EAIf;AACE,WAAO,KAAKL,SAAL,CAAekB,iBAAf,CAAiC;AACpCZ,MAAAA,QAAQ,EAAE,KAAKR,YADqB;AAEpCS,MAAAA,UAAU,EAAE,KAAKR,cAFmB;AAGpCK,MAAAA,MAAM,EAAEA,MAH4B;AAIpCW,MAAAA,MAAM,EAAEI,WAJ4B;AAKpCR,MAAAA,IAAI,EAAEN,OAAO,CAACM,IALsB;AAMpCD,MAAAA,UAAU,EAAEL,OAAO,CAACK,UANgB;AAOpCM,MAAAA,MAAM,EAAEX,OAAO,CAACW,MAPoB;AAQpCC,MAAAA,iBAAiB,EAAEZ,OAAO,CAACY;AARS,KAAjC,CAAP;AAUH;AAED;;;AACAG,EAAAA,gBAAgB,CACZhB,MAAM,GAAG,EADG,EAEZC,OAAO,GAAG,EAFE,EAGd;AACE,WAAO,KAAKL,SAAL,CAAekB,iBAAf,CAAiC;AACpCZ,MAAAA,QAAQ,EAAE,KAAKR,YADqB;AAEpCS,MAAAA,UAAU,EAAE,KAAKR,cAFmB;AAGpCK,MAAAA,MAAM,EAAEA,MAH4B;AAIpCO,MAAAA,IAAI,EAAEN,OAAO,CAACM,IAJsB;AAKpCD,MAAAA,UAAU,EAAEL,OAAO,CAACK;AALgB,KAAjC,CAAP;AAOH;AAED;;;AACAW,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,WAAO,KAAKtB,SAAL,CAAeqB,SAAf,CAAyB;AAC5Bf,MAAAA,QAAQ,EAAE,KAAKR,YADa;AAE5BS,MAAAA,UAAU,EAAE,KAAKR,cAFW;AAG5BuB,MAAAA,QAAQ,EAAEA;AAHkB,KAAzB,CAAP;AAKH;AAED;;;AACAC,EAAAA,KAAK,CACDnB,MAAM,GAAG,EADR,EAEDC,OAAO,GAAG,EAFT,EAGH;AACE,WAAO,KAAKL,SAAL,CAAeuB,KAAf,CAAqB;AACxBjB,MAAAA,QAAQ,EAAE,KAAKR,YADS;AAExBS,MAAAA,UAAU,EAAE,KAAKR,cAFO;AAGxBS,MAAAA,KAAK,EAAEJ,MAHiB;AAIxBQ,MAAAA,KAAK,EAAEP,OAAO,CAACO;AAJS,KAArB,CAAP;AAMH;AAED;;;AACAY,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,WAAO,KAAKzB,SAAL,CAAewB,SAAf,CAAyB;AAC5BlB,MAAAA,QAAQ,EAAE,KAAKR,YADa;AAE5BS,MAAAA,UAAU,EAAE,KAAKR,cAFW;AAG5B0B,MAAAA;AAH4B,KAAzB,CAAP;AAKH;AAED;;;AACAC,EAAAA,UAAU,CAACC,SAAD,EAAY;AAClB,WAAO,KAAK3B,SAAL,CAAe0B,UAAf,CAA0B;AAC7BpB,MAAAA,QAAQ,EAAE,KAAKR,YADc;AAE7BS,MAAAA,UAAU,EAAE,KAAKR,cAFY;AAG7B4B,MAAAA,SAAS,EAAEA;AAHkB,KAA1B,CAAP;AAKH;AAED;;;AACAC,EAAAA,SAAS,CAACxB,MAAM,GAAG,EAAV,EAAc;AACnB,WAAO,KAAKJ,SAAL,CAAe4B,SAAf,CAAyB;AAC5BtB,MAAAA,QAAQ,EAAE,KAAKR,YADa;AAE5BS,MAAAA,UAAU,EAAE,KAAKR,cAFW;AAG5BS,MAAAA,KAAK,EAAEJ;AAHqB,KAAzB,CAAP;AAKH;AAED;;;AACAyB,EAAAA,UAAU,CAACzB,MAAM,GAAG,EAAV,EAAc;AACpB,WAAO,KAAKJ,SAAL,CAAe6B,UAAf,CAA0B;AAC7BvB,MAAAA,QAAQ,EAAE,KAAKR,YADc;AAE7BS,MAAAA,UAAU,EAAE,KAAKR,cAFY;AAG7BS,MAAAA,KAAK,EAAEJ;AAHsB,KAA1B,CAAP;AAKH;AAED;;;AACA0B,EAAAA,SAAS,CACL1B,MADK,EAELW,MAFK,EAGLV,OAAO,GAAG,EAHL,EAIP;AACE,WAAO,KAAKL,SAAL,CAAe8B,SAAf,CAAyB;AAC5BxB,MAAAA,QAAQ,EAAE,KAAKR,YADa;AAE5BS,MAAAA,UAAU,EAAE,KAAKR,cAFW;AAG5BS,MAAAA,KAAK,EAAEJ,MAHqB;AAI5BW,MAAAA,MAJ4B;AAK5BC,MAAAA,MAAM,EAAEX,OAAO,CAACW;AALY,KAAzB,CAAP;AAOH;AAED;;;AACAe,EAAAA,UAAU,CACN3B,MADM,EAENW,MAFM,EAGNV,OAAO,GAAG,EAHJ,EAIR;AACE,WAAO,KAAKL,SAAL,CAAe+B,UAAf,CAA0B;AAC7BzB,MAAAA,QAAQ,EAAE,KAAKR,YADc;AAE7BS,MAAAA,UAAU,EAAE,KAAKR,cAFY;AAG7BS,MAAAA,KAAK,EAAEJ,MAHsB;AAI7BW,MAAAA,MAJ6B;AAK7BC,MAAAA,MAAM,EAAEX,OAAO,CAACW;AALa,KAA1B,CAAP;AAOH;;AAEW,SAALgB,KAAK,CAAC;AAACC,IAAAA,GAAG,GAAGC,SAAP;AAAkB9B,IAAAA,MAAM,GAAG8B;AAA3B,MAAwC,EAAzC,EAA6C;AACrD,UAAMC,IAAI,GAAG1C,cAAc,CAAC;AACxBa,MAAAA,QAAQ,EAAE,KAAKR,YADS;AAExBS,MAAAA,UAAU,EAAE,KAAKR,cAFO;AAGxBkC,MAAAA,GAHwB;AAIxB7B,MAAAA;AAJwB,KAAD,CAA3B;AAOA,UAAMgC,eAAe,GAAG9C,KAAK,CAAC+C,SAAN,CAAgB,CAACF,IAAD,CAAhB,EAAwB;AAAEG,MAAAA,OAAO,EAAE;AAAX,KAAxB,CAAxB;;AACA,UAAMC,OAAO,GAAG,KAAK3C,IAAL,CAAU4C,qBAAV,CAAgC,OAAhC,EAAyC,KAAK3C,WAA9C,EAA2DuC,eAA3D,CAAhB;;AACA,UAAMK,KAAK,GAAG,MAAO,IAAIjD,uBAAJ,GAA8BkD,KAA9B,CAAoCH,OAApC,CAArB;;AACA,QAAI,CAACE,KAAK,CAACE,EAAX,EAAe;AACX,YAAM;AAACC,QAAAA,IAAI,EAAEH,KAAK,CAACI,MAAb;AAAqBC,QAAAA,OAAO,EAAE,MAAML,KAAK,CAACM,IAAN;AAApC,OAAN;AACH;;AAED,QAAIC,WAAW,GAAG,KAAKpD,IAAL,CAAUqD,eAAV,EAAlB;;AACA,eAAW,IAAIC,KAAf,IAAwBT,KAAK,CAACU,IAA9B,EAAoC;AAChCH,MAAAA,WAAW,CAACI,UAAZ,CAAuBF,KAAvB;;AACA,aAAOF,WAAW,CAACK,KAAZ,IAAqB,YAA5B,EAA0C;AACtC,YAAIC,IAAI,GAAGN,WAAW,CAACO,SAAZ,EAAX;AACA,cAAMjE,KAAK,CAACkE,KAAN,CAAYF,IAAZ,CAAN;AACH;;AACD,UAAIN,WAAW,CAACK,KAAZ,IAAqB,YAAzB,EACI,MAAML,WAAW,CAACS,KAAlB;AACP;AACJ;;AAvNmB;;AA0NxBC,MAAM,CAACC,OAAP,GAAiB;AAAEjE,EAAAA;AAAF,CAAjB","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nconst { EJSON } = require(\"bson\");\nconst {DefaultNetworkTransport} = require('realm-network-transport');\n\nconst { cleanArguments } = require(\"./utils\");\n\n/**\n * A remote collection of documents.\n */\nclass MongoDBCollection {\n\n    /**\n     * Construct a remote collection of documents\n     */\n    constructor(\n        user,\n        serviceName,\n        databaseName,\n        collectionName,\n    ) {\n        this.functions = user._functionsOnService(serviceName);\n        this.databaseName = databaseName;\n        this.collectionName = collectionName;\n        this.user = user;\n        this.serviceName = serviceName;\n    }\n\n    /** @inheritdoc */\n    get name() {\n        return this.collectionName;\n    }\n\n    /** @inheritdoc */\n    find(\n        filter = {},\n        options = {},\n    ) {\n        return this.functions.find({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            project: options.projection,\n            sort: options.sort,\n            limit: options.limit,\n        });\n    }\n\n    /** @inheritdoc */\n    findOne(\n        filter = {},\n        options = {},\n    ) {\n        return this.functions.findOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            project: options.projection,\n            sort: options.sort,\n        });\n    }\n\n    /** @inheritdoc */\n    findOneAndUpdate(\n        filter = {},\n        update,\n        options = {},\n    ) {\n        return this.functions.findOneAndUpdate({\n            database: this.databaseName,\n            collection: this.collectionName,\n            filter: filter,\n            update: update,\n            sort: options.sort,\n            projection: options.projection,\n            upsert: options.upsert,\n            returnNewDocument: options.returnNewDocument,\n        });\n    }\n\n    /** @inheritdoc */\n    findOneAndReplace(\n        filter = {},\n        replacement,\n        options = {},\n    ) {\n        return this.functions.findOneAndReplace({\n            database: this.databaseName,\n            collection: this.collectionName,\n            filter: filter,\n            update: replacement,\n            sort: options.sort,\n            projection: options.projection,\n            upsert: options.upsert,\n            returnNewDocument: options.returnNewDocument,\n        });\n    }\n\n    /** @inheritdoc */\n    findOneAndDelete(\n        filter = {},\n        options = {},\n    ) {\n        return this.functions.findOneAndReplace({\n            database: this.databaseName,\n            collection: this.collectionName,\n            filter: filter,\n            sort: options.sort,\n            projection: options.projection,\n        });\n    }\n\n    /** @inheritdoc */\n    aggregate(pipeline) {\n        return this.functions.aggregate({\n            database: this.databaseName,\n            collection: this.collectionName,\n            pipeline: pipeline,\n        });\n    }\n\n    /** @inheritdoc */\n    count(\n        filter = {},\n        options = {},\n    ) {\n        return this.functions.count({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            limit: options.limit,\n        });\n    }\n\n    /** @inheritdoc */\n    insertOne(document) {\n        return this.functions.insertOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            document,\n        });\n    }\n\n    /** @inheritdoc */\n    insertMany(documents) {\n        return this.functions.insertMany({\n            database: this.databaseName,\n            collection: this.collectionName,\n            documents: documents,\n        });\n    }\n\n    /** @inheritdoc */\n    deleteOne(filter = {}) {\n        return this.functions.deleteOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n        });\n    }\n\n    /** @inheritdoc */\n    deleteMany(filter = {}) {\n        return this.functions.deleteMany({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n        });\n    }\n\n    /** @inheritdoc */\n    updateOne(\n        filter,\n        update,\n        options = {},\n    ) {\n        return this.functions.updateOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            update,\n            upsert: options.upsert,\n        });\n    }\n\n    /** @inheritdoc */\n    updateMany(\n        filter,\n        update,\n        options = {},\n    ) {\n        return this.functions.updateMany({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            update,\n            upsert: options.upsert,\n        });\n    }\n\n    async* watch({ids = undefined, filter = undefined} = {}) {\n        const args = cleanArguments({\n            database: this.databaseName,\n            collection: this.collectionName,\n            ids,\n            filter,\n        });\n        \n        const stringifiedArgs = EJSON.stringify([args], { relaxed: false });\n        const request = this.user._makeStreamingRequest(\"watch\", this.serviceName, stringifiedArgs);\n        const reply = await (new DefaultNetworkTransport().fetch(request));\n        if (!reply.ok) {\n            throw {code: reply.status, message: await reply.text()};\n        }\n\n        let watchStream = this.user._newWatchStream();\n        for await (let chunk of reply.body) {\n            watchStream.feedBuffer(chunk);\n            while (watchStream.state == 'HAVE_EVENT') {\n                let next = watchStream.nextEvent();\n                yield EJSON.parse(next);\n            }\n            if (watchStream.state == 'HAVE_ERROR')\n                throw watchStream.error;\n        }\n    }\n}\n\nmodule.exports = { MongoDBCollection };\n"]},"metadata":{},"sourceType":"script"}