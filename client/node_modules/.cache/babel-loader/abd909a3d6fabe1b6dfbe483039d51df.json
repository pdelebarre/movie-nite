{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import { useMongoDB } from \"./store/mongodb\";\n// import { useRealmApp } from \"./store/realm\";\n\nimport api from \"./api/queries\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\";\nimport GENRES from \"./resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  _s();\n\n  // const { loginApiKey, logOut, user } = useRealmApp();\n  // const { db } = useMongoDB();\n  // handleLogIn();\n  const [movies, setMovies] = useState([]); //const [refresh, setRefresh] = useState(false);\n\n  useEffect(() => {\n    retrieveMovies();\n  }, []);\n\n  const retrieveMovies = async () => {\n    await api.getAllMovies().then(response => {\n      setMovies(response.data.data);\n      console.log(`movies`, movies);\n    }).catch(error => {\n      console.log(`error`, error);\n    });\n  };\n\n  const addMovie = async movie => {\n    console.log(`adding `, movie);\n    const genres = getGenres(movie.genre_ids);\n    const payload = {\n      id: movie.id,\n      title: movie.title,\n      genres: genres,\n      poster_path: movie.poster_path,\n      overview: movie.overview,\n      vote_average: Number(movie.vote_average),\n      watched: false\n    };\n    await api.insertMovie(payload).then(res => {\n      // window.alert(`Movie inserted successfully`);\n      setMovies([...movies, movie]);\n    });\n  };\n\n  const onAddHandler = async movie => {\n    console.log(`in App, adding: `, movie);\n    const lookup = await api.getMovieByTMDBId(movie.id).catch(error => {\n      console.log(`error`, error);\n    });\n    lookup == null ? addMovie(movie) : console.log(`dupe`, movie);\n  };\n\n  const onWatchedHandler = async movie => {\n    const payload = { ...movie\n    };\n    payload.watched = !payload.watched;\n    await api.updateMovieById(movie.id, payload); // .then((res) => {\n    //   window.alert(`Movie updated successfully`);\n    // });\n  };\n\n  const onRemoveHandler = async movie => {\n    await api.deleteMovieById(movie.id).then(result => console.log(`Successfully deleted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to delete item: ${err}`));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MovieList, {\n      movies: movies,\n      onWatchedHandler: onWatchedHandler,\n      onRemoveHandler: onRemoveHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchMovie, {\n      onAddHandler: onAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/client/src/App.js"],"names":["React","useState","useEffect","api","SearchMovie","MovieList","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","App","movies","setMovies","retrieveMovies","getAllMovies","then","response","data","catch","error","addMovie","movie","genres","payload","title","poster_path","overview","vote_average","Number","watched","insertMovie","res","onAddHandler","lookup","getMovieByTMDBId","onWatchedHandler","updateMovieById","onRemoveHandler","deleteMovieById","insertedId","err"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import { useMongoDB } from \"./store/mongodb\";\n// import { useRealmApp } from \"./store/realm\";\nimport api from \"./api/queries\";\n\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\";\n\nimport GENRES from \"./resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  // const { loginApiKey, logOut, user } = useRealmApp();\n  // const { db } = useMongoDB();\n\n  // handleLogIn();\n\n  const [movies, setMovies] = useState([]);\n\n  //const [refresh, setRefresh] = useState(false);\n\n  useEffect(() => {\n    retrieveMovies();\n  }, []);\n\n  const retrieveMovies = async () => {\n    await api\n      .getAllMovies()\n      .then((response) => {\n        setMovies(response.data.data);\n        console.log(`movies`, movies);\n      })\n      .catch((error) => {\n        console.log(`error`, error);\n      });\n  };\n\n  const addMovie = async (movie) => {\n    console.log(`adding `, movie);\n\n    const genres = getGenres(movie.genre_ids);\n\n    const payload = {\n      id: movie.id,\n      title: movie.title,\n      genres: genres,\n      poster_path: movie.poster_path,\n      overview: movie.overview,\n      vote_average: Number(movie.vote_average),\n      watched: false,\n    };\n\n    await api.insertMovie(payload).then((res) => {\n      // window.alert(`Movie inserted successfully`);\n\n      setMovies([...movies, movie]);\n    });\n  };\n\n\n  const onAddHandler = async (movie) => {\n    console.log(`in App, adding: `, movie);\n    const lookup = await api.getMovieByTMDBId(movie.id).catch((error) => {\n      console.log(`error`, error);\n    });\n\n    (lookup==null) ? addMovie(movie) : console.log(`dupe`, movie) ;\n\n  };\n\n  const onWatchedHandler = async (movie) => {\n    const payload = { ...movie };\n    payload.watched = !payload.watched;\n\n    await api.updateMovieById(movie.id, payload);\n    // .then((res) => {\n    //   window.alert(`Movie updated successfully`);\n    // });\n  };\n\n  const onRemoveHandler = async (movie) => {\n    await api\n      .deleteMovieById(movie.id)\n      .then((result) =>\n        console.log(`Successfully deleted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to delete item: ${err}`));\n  };\n\n  return (\n    <div>\n      <MovieList\n        movies={movies}\n        onWatchedHandler={onWatchedHandler}\n        onRemoveHandler={onRemoveHandler}\n      />\n      <SearchMovie onAddHandler={onAddHandler} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}