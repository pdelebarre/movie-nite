{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Movie/SearchMovie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Dropdown from \"./Dropdown\";\nimport classes from \"./SearchMovie.module.css\";\nimport { Pane, SearchInput } from \"evergreen-ui\";\nimport GENRES from \"../../resources/genres\";\nimport { useMongoDB } from \"../../store/mongodb\";\nimport { useRealmApp } from \"../../store/realm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nexport default function SearchMovie(props) {\n  _s();\n\n  const [query, setQuery] = useState(\"\");\n  const [newMovie, setNewMovie] = useState(0);\n  const {\n    logIn,\n    logOut,\n    user\n  } = useRealmApp();\n  const {\n    db\n  } = useMongoDB();\n\n  const addMovie = async movie => {\n    console.log(`adding `, movie.title);\n    const genres = getGenres(movie.genre_ids);\n    await db.collection(\"movies\").insertOne({\n      id: movie.id,\n      title: movie.title,\n      genres: genres,\n      posterpath: movie.poster_path,\n      overview: movie.overview,\n      voteaverage: Number(movie.vote_average),\n      watched: false\n    }).then(result => console.log(`Successfully inserted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to insert item: ${err}`));\n  };\n\n  const onSubmitHandler = () => {\n    console.log(\"adding Movie \", newMovie.id); //setQuery(\"\");\n\n    addMovie(newMovie); //setNewMovie();\n  };\n\n  const onChangeHandler = event => {\n    setQuery(event.target.value);\n  };\n\n  const onDropdownHandler = movie => {\n    setNewMovie(movie);\n    console.log(\"in SearchMovie you have selected \", newMovie.id);\n    setQuery(movie.title);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Pane, {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n        className: classes[\"search-input\"],\n        type: \"text\",\n        name: \"query\",\n        placeholder: \"i.e. Jurassic Park\",\n        onChange: onChangeHandler,\n        value: query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), \"\\xCD\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), query && /*#__PURE__*/_jsxDEV(Dropdown, {\n      onDropdownHandler: onDropdownHandler,\n      query: query\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchMovie, \"wcuxgptlGaPF/RePF2r7hrEJA8o=\", false, function () {\n  return [useRealmApp, useMongoDB];\n});\n\n_c = SearchMovie;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchMovie\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Movie/SearchMovie.js"],"names":["React","useState","Dropdown","classes","Pane","SearchInput","GENRES","useMongoDB","useRealmApp","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","SearchMovie","props","query","setQuery","newMovie","setNewMovie","logIn","logOut","user","db","addMovie","movie","title","genres","collection","insertOne","posterpath","poster_path","overview","voteaverage","Number","vote_average","watched","then","insertedId","catch","err","error","onSubmitHandler","onChangeHandler","event","target","value","onDropdownHandler","container"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Dropdown from \"./Dropdown\";\nimport classes from \"./SearchMovie.module.css\";\n\nimport { Pane, SearchInput } from \"evergreen-ui\";\n\nimport GENRES from \"../../resources/genres\";\nimport {useMongoDB} from \"../../store/mongodb\";\nimport { useRealmApp } from \"../../store/realm\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nexport default function SearchMovie(props) {\n  const [query, setQuery] = useState(\"\");\n  const [newMovie, setNewMovie] = useState(0);\n\n  const { logIn, logOut, user } = useRealmApp();\n  const { db } = useMongoDB();\n\n  const addMovie = async (movie ) => {\n    console.log(`adding `, movie.title);\n\n    const genres = getGenres(movie.genre_ids);\n    await db\n      .collection(\"movies\")\n      .insertOne({\n        id: movie.id,\n        title: movie.title,\n        genres: genres,\n        posterpath: movie.poster_path,\n        overview: movie.overview,\n        voteaverage: Number(movie.vote_average),\n        watched: false,\n      })\n      .then((result) =>\n        console.log(`Successfully inserted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to insert item: ${err}`));\n  };\n\n  const onSubmitHandler = () => {\n    console.log(\"adding Movie \", newMovie.id);\n    //setQuery(\"\");\n    addMovie(newMovie);\n    //setNewMovie();\n  };\n\n  const onChangeHandler = (event) => {\n    setQuery(event.target.value);\n  };\n\n  const onDropdownHandler = (movie) => {\n    setNewMovie(movie);\n    console.log(\"in SearchMovie you have selected \", newMovie.id);\n    setQuery(movie.title);\n  };\n\n  return (\n    <Pane className={classes.container}>\n      <form onSubmit={onSubmitHandler}>\n        <SearchInput\n          className={classes[\"search-input\"]}\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"i.e. Jurassic Park\"\n          onChange={onChangeHandler}\n          value={query}\n        />\n        <input type=\"submit\" value=\"OK\" />√ç\n      </form>\n\n      {query && (\n        <Dropdown onDropdownHandler={onDropdownHandler} query={query} />\n      )}\n    </Pane>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}