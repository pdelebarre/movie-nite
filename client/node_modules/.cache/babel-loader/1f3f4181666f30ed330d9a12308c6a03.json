{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Asynchronously submits install information to Realm.\n//\n// Why are we doing this? In short, because it helps us build a better product\n// for you. None of the data personally identifies you, your employer or your\n// app, but it *will* help us understand what language you use, what Node.js\n// versions you target, etc. Having this info will help prioritizing our time,\n// adding new features and deprecating old features. Collecting an anonymized\n// application path & anonymized machine identifier is the only way for us to\n// count actual usage of the other metrics accurately. If we don’t have a way to\n// deduplicate the info reported, it will be useless, as a single developer\n// `npm install`-ing the same app 10 times would report 10 times more than another\n// developer that only installs once, making the data all but useless.\n// No one likes sharing data unless it’s necessary, we get it, and we’ve\n// debated adding this for a long long time. If you truly, absolutely\n// feel compelled to not send this data back to Realm, then you can set an env\n// variable named REALM_DISABLE_ANALYTICS.\n//\n// Currently the following information is reported:\n// - What version of Realm is being installed.\n// - The OS platform and version which is being used.\n// - Node.js, v8, libuv, OpenSSL version numbers.\n// - An anonymous machine identifier and hashed application path to aggregate the other information on.\n'use strict';\n\nlet utils = require('./utils');\n\nclass WebhookProdDetails {\n  /**\n   * Path and credentials required to submit analytics through the webhook (production mode).\n   */\n  constructor() {\n    this.urlPrefix = \"https://webhooks.mongodb-realm.com/api/client/v2.0/app/realmsdkmetrics-zmhtm/service/metric_webhook/incoming_webhook/metric?ip=1&data=\";\n  }\n  /**\n   * Constructs the full URL that will submit analytics to the webhook.\n   * @param  {Object} payload Information that will be submitted through the webhook.\n   * @returns {string} Complete analytics submission URL\n   */\n\n\n  buildRequest(payload) {\n    const request = this.urlPrefix + Buffer.from(JSON.stringify(payload.webHook), 'utf8').toString('base64');\n    return request;\n  }\n\n}\n\n;\n\nclass WebhookStageDetails {\n  /**\n   * Path and credentials required to submit analytics through the webhook (staging mode).\n   */\n  constructor() {\n    this.urlPrefix = \"https://webhooks.mongodb-realm.com/api/client/v2.0/app/realmsdkmetrics-zmhtm/service/metric_webhook/incoming_webhook/metric-stage?data=\";\n  }\n  /**\n   * Constructs the full URL that will submit analytics to the webhook.\n   * @param  {Object} payload Information that will be submitted through the webhook.\n   * @returns {string} Complete analytics submission URL\n   */\n\n\n  buildRequest(payload) {\n    const request = this.urlPrefix + Buffer.from(JSON.stringify(payload.webHook), 'utf8').toString('base64');\n    return request;\n  }\n\n}\n\n;\n\nclass MixpanelDetails {\n  /**\n   * Path and credentials required to submit analytics through MixPanel.\n   */\n  constructor() {\n    this.urlPrefix = \"https://api.mixpanel.com/track/?ip=1&data=\";\n  }\n  /**\n   * Constructs the full URL that will submit analytics to MixPanel.\n   * @param  {Object} payload Information that will be submitted through MixPanel.\n   * @returns {string} Complete analytics submission URL\n   */\n\n\n  buildRequest(payload) {\n    const request = this.urlPrefix + Buffer.from(JSON.stringify(payload.webHook), 'utf8').toString('base64');\n    return request;\n  }\n\n}\n\n;\n\nfunction isAnalyticsDisabled() {\n  return 'REALM_DISABLE_ANALYTICS' in process.env;\n}\n\nfunction sha256(data) {\n  let hash = require('crypto').createHash('sha256');\n\n  hash.update(data);\n  return hash.digest('hex');\n}\n/**\n * Send collected analytics data to Realm's servers over HTTPS\n * @param  {[WebhookProdDetails|WebhookStageDetails|MixpanelDetails]} requestFactory Submission URL generator\n * @param  {Object} payload analytics info\n */\n\n\nasync function dispatchAnalytics(requestFactory, payload) {\n  const https = require('https');\n\n  return new Promise((resolve, reject) => {\n    const webhookRequest = new requestFactory().buildRequest(payload);\n    https.get(webhookRequest, res => {\n      resolve({\n        statusCode: res.statusCode,\n        statusMessage: res.statusMessage\n      });\n    }).on('error', error => {\n      const message = error && error.message ? error.message : error;\n      const err = new Error(`Failed to dispatch analytics: ${message}`);\n      reject(err);\n    });\n  });\n}\n/**\n * Collect analytics data from the runtime system\n * @param  {Object} context contents of the app's package.json file\n * @param  {string} eventName Custom tag that signifies what the app was doing when the analytics were submitted\n * @returns {Object} Analytics payload\n */\n\n\nasync function fetchPlatformData(context, eventName) {\n  const os = require('os');\n\n  const {\n    machineId\n  } = require(\"node-machine-id\");\n\n  const environment = utils.getEnvironment();\n  const identifier = await machineId();\n\n  if (!identifier) {\n    identifier = sha256('unknown');\n  } // payloads for webhook and MixPanel differ slightly\n\n\n  const payloads = {\n    'webHook': {\n      'event': eventName,\n      'properties': {\n        'token': 'aab85907a13e1ff44a95be539d9942a9',\n        'distinct_id': identifier,\n        'Anonymized Machine Identifier': identifier,\n        'Anonymized Application ID': sha256(__dirname),\n        'Binding': 'javascript',\n        'Target': environment,\n        'Version': context.version,\n        'Language': 'javascript',\n        'OS Type': os.platform(),\n        'OS Version': os.release(),\n        'Node.js versions': process.versions\n      }\n    },\n    'mixPanel': {\n      'event': eventName,\n      'properties': {\n        'token': 'aab85907a13e1ff44a95be539d9942a9',\n        'distinct_id': identifier,\n        'Anonymized Machine Identifier': identifier,\n        'Anonymized Application ID': sha256(__dirname),\n        'Binding': environment,\n        'Version': context.version,\n        'Language': 'javascript',\n        'OS Type': os.platform(),\n        'OS Version': os.release(),\n        'Node.js versions': process.versions\n      }\n    }\n  };\n  return payloads;\n}\n/**\n * Generate and submit analytics data to servers.\n * @param  {[WebhookProdDetails|WebhookStageDetails|MixpanelDetails]} requestFactory Submission URL generator\n * @param  {Object} context contents of the app's package.json file\n * @param  {string} eventName Custom tag that signifies what the app was doing when the analytics were submitted\n * @returns {Promise} Promise that will resolve if analytics are successfully submitted\n */\n\n\nasync function submitAnalytics(requestFactory, context, eventName) {\n  if (isAnalyticsDisabled()) {\n    return;\n  }\n\n  const payload = await fetchPlatformData(context, eventName);\n  const versionTags = payload['mixPanel']['properties']['Version'].split('.');\n  await Promise.all([// send in analytics in the newer S3 format\n  dispatchAnalytics(requestFactory, payload), // on v6.x, we submit both MixPanel and S3 analytics\n  // MixPanel analytics make no distinction between production and staging modes\n  versionTags[0] < 10 ? dispatchAnalytics(MixpanelDetails, payload) : null]);\n}\n/**\n * Shorthand for submitting analytics to production environment\n * @param  {string} eventName Custom tag that signifies what the app was doing when the analytics were submitted\n * @returns Promise\n */\n\n\nasync function submitProductionAnalytics(eventName) {\n  const context = require('../package.json');\n\n  await submitAnalytics(WebhookProdDetails, context, eventName);\n}\n/**\n * Shorthand for submitting analytics to staging environment\n * @param  {string} eventName Custom tag that signifies what the app was doing when the analytics were submitted\n * @returns Promise\n */\n\n\nasync function submitStageAnalytics(eventName) {\n  const context = require('../package.json'); // Realm context\n\n\n  return submitAnalytics(WebhookStageDetails, context, eventName);\n}\n\nmodule.exports = {\n  fetchPlatformData,\n  WebhookProdDetails,\n  WebhookStageDetails,\n  submitAnalytics,\n  submitProductionAnalytics,\n  submitStageAnalytics,\n  isAnalyticsDisabled\n};\n\nif (require.main === module) {\n  submitProductionAnalytics('Install').catch(err => {// fail silently -- the caller is not responsible for handling\n    // errors in analytics submission\n  });\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/submit-analytics.js"],"names":["utils","require","WebhookProdDetails","constructor","urlPrefix","buildRequest","payload","request","Buffer","from","JSON","stringify","webHook","toString","WebhookStageDetails","MixpanelDetails","isAnalyticsDisabled","process","env","sha256","data","hash","createHash","update","digest","dispatchAnalytics","requestFactory","https","Promise","resolve","reject","webhookRequest","get","res","statusCode","statusMessage","on","error","message","err","Error","fetchPlatformData","context","eventName","os","machineId","environment","getEnvironment","identifier","payloads","__dirname","version","platform","release","versions","submitAnalytics","versionTags","split","all","submitProductionAnalytics","submitStageAnalytics","module","exports","main","catch"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AAGA,MAAMC,kBAAN,CAAyB;AACrB;AACJ;AACA;AACIC,EAAAA,WAAW,GAAG;AACV,SAAKC,SAAL,GACQ,wIADR;AAEH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,YAAY,CAACC,OAAD,EAAU;AAClB,UAAMC,OAAO,GAAG,KAAKH,SAAL,GAAiBI,MAAM,CAACC,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeL,OAAO,CAACM,OAAvB,CAAZ,EAA6C,MAA7C,EAAqDC,QAArD,CAA8D,QAA9D,CAAjC;AACA,WAAON,OAAP;AACH;;AAjBoB;;AAmBxB;;AAED,MAAMO,mBAAN,CAA0B;AACtB;AACJ;AACA;AACIX,EAAAA,WAAW,GAAG;AACV,SAAKC,SAAL,GACQ,yIADR;AAEH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,YAAY,CAACC,OAAD,EAAU;AAClB,UAAMC,OAAO,GAAG,KAAKH,SAAL,GAAiBI,MAAM,CAACC,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeL,OAAO,CAACM,OAAvB,CAAZ,EAA6C,MAA7C,EAAqDC,QAArD,CAA8D,QAA9D,CAAjC;AACA,WAAON,OAAP;AACH;;AAjBqB;;AAkBzB;;AAED,MAAMQ,eAAN,CAAsB;AAClB;AACJ;AACA;AACIZ,EAAAA,WAAW,GAAG;AACV,SAAKC,SAAL,GAAiB,4CAAjB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,YAAY,CAACC,OAAD,EAAU;AAClB,UAAMC,OAAO,GAAG,KAAKH,SAAL,GAAiBI,MAAM,CAACC,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeL,OAAO,CAACM,OAAvB,CAAZ,EAA6C,MAA7C,EAAqDC,QAArD,CAA8D,QAA9D,CAAjC;AACA,WAAON,OAAP;AACH;;AAhBiB;;AAiBrB;;AAGD,SAASS,mBAAT,GAA+B;AAC3B,SAAO,6BAA6BC,OAAO,CAACC,GAA5C;AACH;;AAED,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAClB,MAAIC,IAAI,GAAGpB,OAAO,CAAC,QAAD,CAAP,CAAkBqB,UAAlB,CAA6B,QAA7B,CAAX;;AACAD,EAAAA,IAAI,CAACE,MAAL,CAAYH,IAAZ;AACA,SAAOC,IAAI,CAACG,MAAL,CAAY,KAAZ,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,eAAeC,iBAAf,CAAiCC,cAAjC,EAAiDpB,OAAjD,EAA0D;AACtD,QAAMqB,KAAK,GAAG1B,OAAO,CAAC,OAAD,CAArB;;AAEA,SAAO,IAAI2B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,cAAc,GAAG,IAAIL,cAAJ,GAAqBrB,YAArB,CAAkCC,OAAlC,CAAvB;AAEAqB,IAAAA,KAAK,CAACK,GAAN,CAAUD,cAAV,EAA0BE,GAAG,IAAI;AAC7BJ,MAAAA,OAAO,CAAC;AACJK,QAAAA,UAAU,EAAGD,GAAG,CAACC,UADb;AAEJC,QAAAA,aAAa,EAAEF,GAAG,CAACE;AAFf,OAAD,CAAP;AAIH,KALD,EAKGC,EALH,CAKM,OALN,EAKeC,KAAK,IAAI;AACpB,YAAMC,OAAO,GAAGD,KAAK,IAAIA,KAAK,CAACC,OAAf,GAAyBD,KAAK,CAACC,OAA/B,GAAyCD,KAAzD;AACA,YAAME,GAAG,GAAG,IAAIC,KAAJ,CAAW,iCAAgCF,OAAQ,EAAnD,CAAZ;AACAR,MAAAA,MAAM,CAACS,GAAD,CAAN;AACH,KATD;AAUH,GAbM,CAAP;AAcH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeE,iBAAf,CAAiCC,OAAjC,EAA0CC,SAA1C,EAAqD;AACjD,QAAMC,EAAE,GAAG3C,OAAO,CAAC,IAAD,CAAlB;;AACA,QAAM;AAAE4C,IAAAA;AAAF,MAAgB5C,OAAO,CAAC,iBAAD,CAA7B;;AACA,QAAM6C,WAAW,GAAG9C,KAAK,CAAC+C,cAAN,EAApB;AAEA,QAAMC,UAAU,GAAG,MAAMH,SAAS,EAAlC;;AACA,MAAI,CAACG,UAAL,EAAiB;AACbA,IAAAA,UAAU,GAAG7B,MAAM,CAAC,SAAD,CAAnB;AACH,GARgD,CAUjD;;;AACA,QAAM8B,QAAQ,GAAG;AACb,eAAW;AACP,eAASN,SADF;AAEP,oBAAc;AACV,iBAAS,kCADC;AAEV,uBAAeK,UAFL;AAGV,yCAAiCA,UAHvB;AAIV,qCAA6B7B,MAAM,CAAC+B,SAAD,CAJzB;AAKV,mBAAW,YALD;AAMV,kBAAUJ,WANA;AAOV,mBAAWJ,OAAO,CAACS,OAPT;AAQV,oBAAY,YARF;AASV,mBAAWP,EAAE,CAACQ,QAAH,EATD;AAUV,sBAAcR,EAAE,CAACS,OAAH,EAVJ;AAWV,4BAAoBpC,OAAO,CAACqC;AAXlB;AAFP,KADE;AAiBb,gBAAY;AACR,eAASX,SADD;AAER,oBAAc;AACV,iBAAS,kCADC;AAEV,uBAAeK,UAFL;AAGV,yCAAiCA,UAHvB;AAIV,qCAA6B7B,MAAM,CAAC+B,SAAD,CAJzB;AAKV,mBAAWJ,WALD;AAMV,mBAAWJ,OAAO,CAACS,OANT;AAOV,oBAAY,YAPF;AAQV,mBAAWP,EAAE,CAACQ,QAAH,EARD;AASV,sBAAcR,EAAE,CAACS,OAAH,EATJ;AAUV,4BAAoBpC,OAAO,CAACqC;AAVlB;AAFN;AAjBC,GAAjB;AAkCA,SAAOL,QAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeM,eAAf,CAA+B7B,cAA/B,EAA+CgB,OAA/C,EAAwDC,SAAxD,EAAmE;AAC/D,MAAI3B,mBAAmB,EAAvB,EAA2B;AACvB;AACH;;AAED,QAAMV,OAAO,GAAG,MAAMmC,iBAAiB,CAACC,OAAD,EAAUC,SAAV,CAAvC;AACA,QAAMa,WAAW,GAAGlD,OAAO,CAAC,UAAD,CAAP,CAAoB,YAApB,EAAkC,SAAlC,EAA6CmD,KAA7C,CAAmD,GAAnD,CAApB;AAEA,QAAM7B,OAAO,CAAC8B,GAAR,CAAY,CACd;AACAjC,EAAAA,iBAAiB,CAACC,cAAD,EAAiBpB,OAAjB,CAFH,EAId;AACA;AACAkD,EAAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,EAAjB,GAAsB/B,iBAAiB,CAACV,eAAD,EAAkBT,OAAlB,CAAvC,GAAoE,IANtD,CAAZ,CAAN;AAQH;AAED;AACA;AACA;AACA;AACA;;;AACA,eAAeqD,yBAAf,CAAyChB,SAAzC,EAAoD;AAChD,QAAMD,OAAO,GAAGzC,OAAO,CAAC,iBAAD,CAAvB;;AACA,QAAMsD,eAAe,CAACrD,kBAAD,EAAqBwC,OAArB,EAA8BC,SAA9B,CAArB;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,eAAeiB,oBAAf,CAAoCjB,SAApC,EAA+C;AAC3C,QAAMD,OAAO,GAAGzC,OAAO,CAAC,iBAAD,CAAvB,CAD2C,CACE;;;AAC7C,SAAOsD,eAAe,CAACzC,mBAAD,EAAsB4B,OAAtB,EAA+BC,SAA/B,CAAtB;AACH;;AAEDkB,MAAM,CAACC,OAAP,GAAiB;AACbrB,EAAAA,iBADa;AAEbvC,EAAAA,kBAFa;AAGbY,EAAAA,mBAHa;AAIbyC,EAAAA,eAJa;AAKbI,EAAAA,yBALa;AAMbC,EAAAA,oBANa;AAOb5C,EAAAA;AAPa,CAAjB;;AAUA,IAAIf,OAAO,CAAC8D,IAAR,KAAiBF,MAArB,EAA6B;AACzBF,EAAAA,yBAAyB,CAAC,SAAD,CAAzB,CACCK,KADD,CACOzB,GAAG,IAAI,CACV;AACA;AACH,GAJD;AAKH","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\n// Asynchronously submits install information to Realm.\n//\n// Why are we doing this? In short, because it helps us build a better product\n// for you. None of the data personally identifies you, your employer or your\n// app, but it *will* help us understand what language you use, what Node.js\n// versions you target, etc. Having this info will help prioritizing our time,\n// adding new features and deprecating old features. Collecting an anonymized\n// application path & anonymized machine identifier is the only way for us to\n// count actual usage of the other metrics accurately. If we don’t have a way to\n// deduplicate the info reported, it will be useless, as a single developer\n// `npm install`-ing the same app 10 times would report 10 times more than another\n// developer that only installs once, making the data all but useless.\n// No one likes sharing data unless it’s necessary, we get it, and we’ve\n// debated adding this for a long long time. If you truly, absolutely\n// feel compelled to not send this data back to Realm, then you can set an env\n// variable named REALM_DISABLE_ANALYTICS.\n//\n// Currently the following information is reported:\n// - What version of Realm is being installed.\n// - The OS platform and version which is being used.\n// - Node.js, v8, libuv, OpenSSL version numbers.\n// - An anonymous machine identifier and hashed application path to aggregate the other information on.\n\n'use strict';\n\nlet utils = require('./utils');\n\n\nclass WebhookProdDetails {\n    /**\n     * Path and credentials required to submit analytics through the webhook (production mode).\n     */\n    constructor() {\n        this.urlPrefix =\n                \"https://webhooks.mongodb-realm.com/api/client/v2.0/app/realmsdkmetrics-zmhtm/service/metric_webhook/incoming_webhook/metric?ip=1&data=\";\n    }\n\n    /**\n     * Constructs the full URL that will submit analytics to the webhook.\n     * @param  {Object} payload Information that will be submitted through the webhook.\n     * @returns {string} Complete analytics submission URL\n     */\n    buildRequest(payload) {\n        const request = this.urlPrefix + Buffer.from(JSON.stringify(payload.webHook), 'utf8').toString('base64');\n        return request;\n    }\n\n};\n\nclass WebhookStageDetails {\n    /**\n     * Path and credentials required to submit analytics through the webhook (staging mode).\n     */\n    constructor() {\n        this.urlPrefix =\n                \"https://webhooks.mongodb-realm.com/api/client/v2.0/app/realmsdkmetrics-zmhtm/service/metric_webhook/incoming_webhook/metric-stage?data=\";\n    }\n\n    /**\n     * Constructs the full URL that will submit analytics to the webhook.\n     * @param  {Object} payload Information that will be submitted through the webhook.\n     * @returns {string} Complete analytics submission URL\n     */\n    buildRequest(payload) {\n        const request = this.urlPrefix + Buffer.from(JSON.stringify(payload.webHook), 'utf8').toString('base64');\n        return request;\n    }\n};\n\nclass MixpanelDetails {\n    /**\n     * Path and credentials required to submit analytics through MixPanel.\n     */\n    constructor() {\n        this.urlPrefix = \"https://api.mixpanel.com/track/?ip=1&data=\";\n    }\n\n    /**\n     * Constructs the full URL that will submit analytics to MixPanel.\n     * @param  {Object} payload Information that will be submitted through MixPanel.\n     * @returns {string} Complete analytics submission URL\n     */\n    buildRequest(payload) {\n        const request = this.urlPrefix + Buffer.from(JSON.stringify(payload.webHook), 'utf8').toString('base64');\n        return request;\n    }\n};\n\n\nfunction isAnalyticsDisabled() {\n    return 'REALM_DISABLE_ANALYTICS' in process.env;\n}\n\nfunction sha256(data) {\n    let hash = require('crypto').createHash('sha256');\n    hash.update(data);\n    return hash.digest('hex');\n}\n\n/**\n * Send collected analytics data to Realm's servers over HTTPS\n * @param  {[WebhookProdDetails|WebhookStageDetails|MixpanelDetails]} requestFactory Submission URL generator\n * @param  {Object} payload analytics info\n */\nasync function dispatchAnalytics(requestFactory, payload) {\n    const https = require('https');\n\n    return new Promise((resolve, reject) => {\n        const webhookRequest = new requestFactory().buildRequest(payload);\n        \n        https.get(webhookRequest, res => {\n            resolve({\n                statusCode:  res.statusCode,\n                statusMessage: res.statusMessage\n            });\n        }).on('error', error => {\n            const message = error && error.message ? error.message : error;\n            const err = new Error(`Failed to dispatch analytics: ${message}`);\n            reject(err);\n        });\n    });\n}\n\n/**\n * Collect analytics data from the runtime system\n * @param  {Object} context contents of the app's package.json file\n * @param  {string} eventName Custom tag that signifies what the app was doing when the analytics were submitted\n * @returns {Object} Analytics payload\n */\nasync function fetchPlatformData(context, eventName) {\n    const os = require('os');\n    const { machineId } = require(\"node-machine-id\");\n    const environment = utils.getEnvironment();\n\n    const identifier = await machineId();\n    if (!identifier) {\n        identifier = sha256('unknown');\n    }\n\n    // payloads for webhook and MixPanel differ slightly\n    const payloads = {\n        'webHook': {\n            'event': eventName,\n            'properties': {\n                'token': 'aab85907a13e1ff44a95be539d9942a9',\n                'distinct_id': identifier,\n                'Anonymized Machine Identifier': identifier,\n                'Anonymized Application ID': sha256(__dirname),\n                'Binding': 'javascript',\n                'Target': environment,\n                'Version': context.version,\n                'Language': 'javascript',\n                'OS Type': os.platform(),\n                'OS Version': os.release(),\n                'Node.js versions': process.versions\n            }\n        },\n        'mixPanel': {\n            'event': eventName,\n            'properties': {\n                'token': 'aab85907a13e1ff44a95be539d9942a9',\n                'distinct_id': identifier,\n                'Anonymized Machine Identifier': identifier,\n                'Anonymized Application ID': sha256(__dirname),\n                'Binding': environment,\n                'Version': context.version,\n                'Language': 'javascript',\n                'OS Type': os.platform(),\n                'OS Version': os.release(),\n                'Node.js versions': process.versions\n            }\n        }\n    };\n\n    return payloads;\n}\n\n/**\n * Generate and submit analytics data to servers.\n * @param  {[WebhookProdDetails|WebhookStageDetails|MixpanelDetails]} requestFactory Submission URL generator\n * @param  {Object} context contents of the app's package.json file\n * @param  {string} eventName Custom tag that signifies what the app was doing when the analytics were submitted\n * @returns {Promise} Promise that will resolve if analytics are successfully submitted\n */\nasync function submitAnalytics(requestFactory, context, eventName) {\n    if (isAnalyticsDisabled()) {\n        return;\n    }\n\n    const payload = await fetchPlatformData(context, eventName)\n    const versionTags = payload['mixPanel']['properties']['Version'].split('.');\n\n    await Promise.all([\n        // send in analytics in the newer S3 format\n        dispatchAnalytics(requestFactory, payload),\n        \n        // on v6.x, we submit both MixPanel and S3 analytics\n        // MixPanel analytics make no distinction between production and staging modes\n        versionTags[0] < 10 ? dispatchAnalytics(MixpanelDetails, payload) : null,\n    ]);\n}\n\n/**\n * Shorthand for submitting analytics to production environment\n * @param  {string} eventName Custom tag that signifies what the app was doing when the analytics were submitted\n * @returns Promise\n */\nasync function submitProductionAnalytics(eventName) {\n    const context = require('../package.json')\n    await submitAnalytics(WebhookProdDetails, context, eventName);\n}\n\n/**\n * Shorthand for submitting analytics to staging environment\n * @param  {string} eventName Custom tag that signifies what the app was doing when the analytics were submitted\n * @returns Promise\n */\nasync function submitStageAnalytics(eventName) {\n    const context = require('../package.json');  // Realm context\n    return submitAnalytics(WebhookStageDetails, context, eventName);\n}\n\nmodule.exports = {\n    fetchPlatformData,\n    WebhookProdDetails,\n    WebhookStageDetails,\n    submitAnalytics,\n    submitProductionAnalytics,\n    submitStageAnalytics,\n    isAnalyticsDisabled,\n};\n\nif (require.main === module) {\n    submitProductionAnalytics('Install')\n    .catch(err => { \n        // fail silently -- the caller is not responsible for handling\n        // errors in analytics submission\n    });\n}\n"]},"metadata":{},"sourceType":"script"}