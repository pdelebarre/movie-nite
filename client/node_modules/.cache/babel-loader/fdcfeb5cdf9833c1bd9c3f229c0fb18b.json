{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nimport { EJSON, ObjectId, Decimal128 } from \"bson\";\nimport * as base64 from \"./base64\";\nimport { keys, objectTypes } from \"./constants\";\nimport { invalidateCache } from \"./cache\";\nconst {\n  id: idKey,\n  realm: _realmKey\n} = keys;\nlet registeredCallbacks = [];\nconst typeConverters = {}; // Callbacks that are registered initially (currently only refreshAccessToken) will\n// carry this symbol so they are not wiped in clearTestState.\n\nconst persistentCallback = Symbol(\"persistentCallback\");\nlet XMLHttpRequest = global.originalXMLHttpRequest || global.XMLHttpRequest;\nlet sessionHost;\nlet sessionId; // Check if XMLHttpRequest has been overridden, and get the native one if that's the case.\n\nif (XMLHttpRequest.__proto__ != global.XMLHttpRequestEventTarget) {\n  let fakeXMLHttpRequest = XMLHttpRequest;\n  delete global.XMLHttpRequest;\n  XMLHttpRequest = global.XMLHttpRequest;\n  global.XMLHttpRequest = fakeXMLHttpRequest;\n}\n\nregisterTypeConverter(objectTypes.DATA, (_, {\n  value\n}) => base64.decode(value));\nregisterTypeConverter(objectTypes.DATE, (_, {\n  value\n}) => new Date(value));\nregisterTypeConverter(objectTypes.EJSON, (_, {\n  value\n}) => EJSON.deserialize(value));\nregisterTypeConverter(objectTypes.DICT, deserializeDict);\nregisterTypeConverter(objectTypes.ERROR, deserializeError);\nregisterTypeConverter(objectTypes.FUNCTION, deserializeFunction);\nexport function registerTypeConverter(type, handler) {\n  typeConverters[type] = handler;\n}\n\nfunction beforeNotify(realm) {\n  // NOTE: the mere existence of this function is important for read\n  // isolation even independent of what it does in its body. By having a\n  // beforenotify listener, we ensure that the RPC server can't proceed in\n  // notify() to autorefresh until the browser performs a callback poll.\n  // Without this, the RPC server could autorefresh in between two subsequent\n  // property reads from the browser.\n  // Clear the cache for this Realm, and reenable caching if it was disabled\n  // by a write transaction.\n  invalidateCache(realm[keys.realm]);\n}\n\nexport function createSession(host, {\n  versions,\n  performFetch\n}) {\n  sessionHost = host;\n  sessionId = sendRequest(\"create_session\", {\n    versions,\n    fetch: serialize(undefined, performFetch)\n  }, host);\n  return sessionId;\n}\nexport function createRealm(args) {\n  if (args) {\n    args = args.map(arg => serialize(null, arg));\n  }\n\n  return sendRequest(\"create_realm\", {\n    arguments: args,\n    beforeNotify: serialize(null, beforeNotify)\n  });\n}\nexport function createAppRPC(config) {\n  return sendRequest(\"create_app\", {\n    arguments: [serialize(null, config)]\n  });\n}\nexport function asyncOpenRealm(id, config, callback) {\n  return deserialize(undefined, sendRequest(\"call_method\", {\n    id,\n    name: \"_asyncOpen\",\n    arguments: [serialize(null, config), serialize(null, (realm, error) => {\n      if (realm) {\n        realm.addListener(\"beforenotify\", beforeNotify);\n      }\n\n      callback(realm, error);\n    })]\n  }));\n}\nexport function setVersions(versions) {\n  sendRequest(\"set_versions\", {\n    versions: serialize(null, versions)\n  });\n}\nexport function _anonymousRPC() {\n  const result = sendRequest(\"_anonymous\", {\n    arguments: undefined\n  });\n  return deserialize(undefined, result);\n}\nexport function _appleRPC(token) {\n  const args = Array.prototype.map.call(arguments, arg => serialize(null, arg));\n  const result = sendRequest(\"_apple\", {\n    arguments: args\n  });\n  return deserialize(undefined, result);\n}\nexport function _emailPasswordRPC(email, password) {\n  const args = Array.prototype.map.call(arguments, arg => serialize(null, arg));\n  const result = sendRequest(\"_emailPassword\", {\n    arguments: args\n  });\n  return deserialize(undefined, result);\n}\nexport function _facebookRPC(token) {\n  const args = Array.prototype.map.call(arguments, arg => serialize(null, arg));\n  const result = sendRequest(\"_facebook\", {\n    arguments: args\n  });\n  return deserialize(undefined, result);\n}\nexport function _functionRPC(payload) {\n  const args = Array.prototype.map.call(arguments, arg => serialize(null, arg));\n  const result = sendRequest(\"_function\", {\n    arguments: args\n  });\n  return deserialize(undefined, result);\n}\nexport function _googleRPC(authCode) {\n  const args = Array.prototype.map.call(arguments, arg => serialize(null, arg));\n  const result = sendRequest(\"_google\", {\n    arguments: args\n  });\n  return deserialize(undefined, result);\n}\nexport function _userApiKeyRPC(user_key) {\n  const args = Array.prototype.map.call(arguments, arg => serialize(null, arg));\n  const result = sendRequest(\"_userAPIKey\", {\n    arguments: args\n  });\n  return deserialize(undefined, result);\n}\nexport function _serverApiKeyRPC(server_key) {\n  const args = Array.prototype.map.call(arguments, arg => serialize(null, arg));\n  const result = sendRequest(\"_serverAPIKey\", {\n    arguments: args\n  });\n  return deserialize(undefined, result);\n}\nexport function _jwtRPC(token) {\n  const args = Array.prototype.map.call(arguments, arg => serialize(null, arg));\n  const result = sendRequest(\"_jwt\", {\n    arguments: args\n  });\n  return deserialize(undefined, result);\n}\nexport function callSyncFunction(name, args) {\n  args = (args || []).map(arg => serialize(null, arg));\n  let result = sendRequest(\"call_sync_function\", {\n    name,\n    arguments: args\n  });\n  return deserialize(undefined, result);\n}\nexport function callMethod(realmId, id, name, args) {\n  if (!Array.isArray(args)) {\n    throw new Error(\"Expected an array of arguments\");\n  }\n\n  const serializedArgs = args.map(arg => serialize(realmId, arg));\n  const result = sendRequest(\"call_method\", {\n    realmId,\n    id,\n    name,\n    arguments: serializedArgs\n  });\n  return deserialize(realmId, result);\n}\nexport function getObject(realmId, id, name) {\n  let result = sendRequest(\"get_object\", {\n    realmId,\n    id,\n    name\n  });\n\n  if (!result) {\n    return result;\n  }\n\n  for (let key in result) {\n    result[key] = deserialize(realmId, result[key]);\n  }\n\n  return result;\n}\nexport function getProperty(realmId, id, name) {\n  let result = sendRequest(\"get_property\", {\n    realmId,\n    id,\n    name\n  });\n  return deserialize(realmId, result);\n}\nexport function setProperty(realmId, id, name, value) {\n  value = serialize(realmId, value);\n  sendRequest(\"set_property\", {\n    realmId,\n    id,\n    name,\n    value\n  });\n}\nexport function clearTestState() {\n  sendRequest(\"clear_test_state\"); // Clear all registered callbacks that are specific to this session.\n\n  registeredCallbacks = registeredCallbacks.filter(cb => Reflect.has(cb, persistentCallback));\n}\n\nfunction registerCallback(callback) {\n  let key = registeredCallbacks.indexOf(callback);\n  return key >= 0 ? key : registeredCallbacks.push(callback) - 1;\n}\n\nfunction serialize(realmId, value) {\n  if (typeof value == \"undefined\") {\n    return {\n      type: objectTypes.UNDEFINED\n    };\n  }\n\n  if (typeof value == \"function\") {\n    return {\n      type: objectTypes.FUNCTION,\n      value: registerCallback(value)\n    };\n  }\n\n  if (!value || typeof value != \"object\") {\n    return {\n      value: value\n    };\n  }\n\n  let id = value[idKey];\n\n  if (id) {\n    return {\n      id\n    };\n  }\n\n  if (value instanceof Date) {\n    return {\n      type: objectTypes.DATE,\n      value: value.getTime()\n    };\n  }\n\n  if (Array.isArray(value)) {\n    let array = value.map(item => serialize(realmId, item));\n    return {\n      value: array\n    };\n  }\n\n  if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {\n    return {\n      type: objectTypes.DATA,\n      value: base64.encode(value)\n    };\n  }\n\n  if (value instanceof ObjectId || value instanceof Decimal128) {\n    return {\n      type: objectTypes.EJSON,\n      value: EJSON.serialize(value, {\n        relaxed: false\n      })\n    };\n  }\n\n  let keys = Object.keys(value);\n  let values = keys.map(key => serialize(realmId, value[key]));\n  return {\n    type: objectTypes.DICT,\n    keys,\n    values\n  };\n}\n\nexport function deserialize(realmId, info) {\n  let type = info.type;\n  let handler = type && typeConverters[type];\n\n  if (handler) {\n    return handler(realmId, info);\n  }\n\n  let value = info.value;\n\n  if (value && Array.isArray(value)) {\n    return value.map(item => deserialize(realmId, item));\n  }\n\n  return value;\n}\n\nfunction deserializeDict(realmId, info) {\n  let {\n    keys,\n    values\n  } = info;\n  let object = {};\n\n  for (let i = 0, len = keys.length; i < len; i++) {\n    object[keys[i]] = deserialize(realmId, values[i]);\n  }\n\n  return object;\n}\n\nfunction deserializeError(realmId, info) {\n  const {\n    message,\n    stack\n  } = info.error;\n  const err = new Error(message.value);\n  err.stack = stack.value;\n  return err;\n}\n\nfunction deserializeFunction(realmId, info) {\n  return registeredCallbacks[info.value];\n}\n\nfunction makeRequest(url, data) {\n  let statusCode;\n  let responseText; // The global __debug__ object is provided by Visual Studio Code.\n\n  if (global.__debug__) {\n    let request = global.__debug__.require(\"sync-request\");\n\n    let response = request(\"POST\", url, {\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"text/plain;charset=UTF-8\"\n      }\n    });\n    statusCode = response.statusCode;\n    responseText = response.body.toString(\"utf-8\");\n  } else {\n    let body = JSON.stringify(data);\n    let request = new XMLHttpRequest();\n    request.open(\"POST\", url, false);\n    request.send(body);\n    statusCode = request.status;\n    responseText = request.responseText;\n  }\n\n  if (statusCode != 200) {\n    throw new Error(responseText);\n  }\n\n  return JSON.parse(responseText);\n}\n\nlet pollTimeoutId;\nlet pollTimeout = 10; //returns an object from rpc serialized json value\n\nfunction deserialize_json_value(value) {\n  let result = {};\n\n  for (let index = 0; index < value.keys.length; index++) {\n    var propName = value.keys[index];\n    var propValue = value.values[index];\n\n    if (propValue.type && propValue.type == \"dict\") {\n      result[propName] = deserialize_json_value(propValue);\n    } else {\n      result[propName] = propValue.value;\n    }\n  }\n\n  return result;\n}\n\nfunction sendRequest(command, data, host = sessionHost) {\n  clearTimeout(pollTimeoutId);\n\n  try {\n    if (!host) {\n      throw new Error(\"Must first create RPC session with a valid host\");\n    }\n\n    data = Object.assign({}, data, sessionId ? {\n      sessionId\n    } : null);\n    let url = \"http://\" + host + \"/\" + command;\n    let response = makeRequest(url, data);\n    let callback = response && response.callback; // Reset the callback poll interval to 10ms every time we either hit a\n    // callback or call any other method, and double it each time we poll\n    // for callbacks and get nothing until it's over a second.\n\n    if (callback || command !== \"callbacks_poll\") {\n      pollTimeout = 10;\n    } else if (pollTimeout < 1000) {\n      pollTimeout *= 2;\n    }\n\n    if (!response || response.error) {\n      let error = response && response.error; // Remove the type prefix from the error message (e.g. \"Error: \").\n\n      if (error && typeof error === \"string\") {\n        error = error.replace(/^[a-z]+: /i, \"\");\n      } else if (error.type && error.type === \"error\") {\n        const err = new Error(error.message.value);\n        err.stack = error.stack.value;\n        throw err;\n      }\n\n      throw new Error(error || `Invalid response for \"${command}\"`);\n    }\n\n    if (callback != null) {\n      let result, error, stack;\n\n      try {\n        let realmId = data.realmId;\n        let thisObject = deserialize(realmId, response.this);\n        let args = deserialize(realmId, response.arguments);\n        const fn = registeredCallbacks[callback];\n\n        if (fn) {\n          result = serialize(realmId, fn.apply(thisObject, args));\n        } else {\n          error = `Unknown callback id: ${callback}`;\n        }\n      } catch (e) {\n        error = e.message || \"\" + e;\n\n        if (e.stack) {\n          stack = JSON.stringify(e.stack);\n        }\n      }\n\n      let callbackCommand = \"callback_result\";\n\n      if (command === \"callbacks_poll\" || command === \"callback_poll_result\") {\n        callbackCommand = \"callback_poll_result\";\n      }\n\n      return sendRequest(callbackCommand, {\n        callback,\n        result,\n        error,\n        stack,\n        \"callback_call_counter\": response.callback_call_counter\n      });\n    }\n\n    return response.result;\n  } finally {\n    pollTimeoutId = setTimeout(() => sendRequest(\"callbacks_poll\"), pollTimeout);\n  }\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/rpc.js"],"names":["EJSON","ObjectId","Decimal128","base64","keys","objectTypes","invalidateCache","id","idKey","realm","_realmKey","registeredCallbacks","typeConverters","persistentCallback","Symbol","XMLHttpRequest","global","originalXMLHttpRequest","sessionHost","sessionId","__proto__","XMLHttpRequestEventTarget","fakeXMLHttpRequest","registerTypeConverter","DATA","_","value","decode","DATE","Date","deserialize","DICT","deserializeDict","ERROR","deserializeError","FUNCTION","deserializeFunction","type","handler","beforeNotify","createSession","host","versions","performFetch","sendRequest","fetch","serialize","undefined","createRealm","args","map","arg","arguments","createAppRPC","config","asyncOpenRealm","callback","name","error","addListener","setVersions","_anonymousRPC","result","_appleRPC","token","Array","prototype","call","_emailPasswordRPC","email","password","_facebookRPC","_functionRPC","payload","_googleRPC","authCode","_userApiKeyRPC","user_key","_serverApiKeyRPC","server_key","_jwtRPC","callSyncFunction","callMethod","realmId","isArray","Error","serializedArgs","getObject","key","getProperty","setProperty","clearTestState","filter","cb","Reflect","has","registerCallback","indexOf","push","UNDEFINED","getTime","array","item","ArrayBuffer","isView","encode","relaxed","Object","values","info","object","i","len","length","message","stack","err","makeRequest","url","data","statusCode","responseText","__debug__","request","require","response","body","JSON","stringify","headers","toString","open","send","status","parse","pollTimeoutId","pollTimeout","deserialize_json_value","index","propName","propValue","command","clearTimeout","assign","replace","thisObject","this","fn","apply","e","callbackCommand","callback_call_counter","setTimeout"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nimport { EJSON, ObjectId, Decimal128 } from \"bson\";\n\nimport * as base64 from \"./base64\";\nimport { keys, objectTypes } from \"./constants\";\nimport { invalidateCache } from \"./cache\";\n\nconst { id: idKey, realm: _realmKey } = keys;\nlet registeredCallbacks = [];\nconst typeConverters = {};\n\n// Callbacks that are registered initially (currently only refreshAccessToken) will\n// carry this symbol so they are not wiped in clearTestState.\nconst persistentCallback = Symbol(\"persistentCallback\");\n\nlet XMLHttpRequest = global.originalXMLHttpRequest || global.XMLHttpRequest;\nlet sessionHost;\nlet sessionId;\n\n// Check if XMLHttpRequest has been overridden, and get the native one if that's the case.\nif (XMLHttpRequest.__proto__ != global.XMLHttpRequestEventTarget) {\n    let fakeXMLHttpRequest = XMLHttpRequest;\n    delete global.XMLHttpRequest;\n    XMLHttpRequest = global.XMLHttpRequest;\n    global.XMLHttpRequest = fakeXMLHttpRequest;\n}\n\nregisterTypeConverter(objectTypes.DATA, (_, { value }) => base64.decode(value));\nregisterTypeConverter(objectTypes.DATE, (_, { value }) => new Date(value));\nregisterTypeConverter(objectTypes.EJSON, (_, { value }) => EJSON.deserialize(value));\nregisterTypeConverter(objectTypes.DICT, deserializeDict);\nregisterTypeConverter(objectTypes.ERROR, deserializeError);\nregisterTypeConverter(objectTypes.FUNCTION, deserializeFunction);\n\nexport function registerTypeConverter(type, handler) {\n    typeConverters[type] = handler;\n}\n\nfunction beforeNotify(realm) {\n    // NOTE: the mere existence of this function is important for read\n    // isolation even independent of what it does in its body. By having a\n    // beforenotify listener, we ensure that the RPC server can't proceed in\n    // notify() to autorefresh until the browser performs a callback poll.\n    // Without this, the RPC server could autorefresh in between two subsequent\n    // property reads from the browser.\n\n    // Clear the cache for this Realm, and reenable caching if it was disabled\n    // by a write transaction.\n    invalidateCache(realm[keys.realm]);\n}\n\n\nexport function createSession(host, { versions, performFetch }) {\n    sessionHost = host;\n\n    sessionId = sendRequest(\n        \"create_session\",\n        {\n            versions,\n            fetch: serialize(undefined, performFetch),\n        },\n        host,\n    );\n\n    return sessionId;\n}\n\nexport function createRealm(args) {\n    if (args) {\n        args = args.map((arg) => serialize(null, arg));\n    }\n\n    return sendRequest(\"create_realm\", { arguments: args, beforeNotify: serialize(null, beforeNotify) });\n}\n\nexport function createAppRPC(config) {\n    return sendRequest(\"create_app\", { arguments: [ serialize(null, config) ] });\n}\n\nexport function asyncOpenRealm(id, config, callback) {\n    return deserialize(undefined, sendRequest(\"call_method\", {\n        id,\n        name: \"_asyncOpen\",\n        arguments: [\n            serialize(null, config),\n            serialize(null, (realm, error) => {\n                if (realm) {\n                    realm.addListener(\"beforenotify\", beforeNotify);\n                }\n                callback(realm, error);\n            })\n        ]\n    }));\n}\n\nexport function setVersions(versions) {\n    sendRequest(\"set_versions\", { versions: serialize(null, versions) });\n}\n\nexport function _anonymousRPC() {\n    const result = sendRequest(\"_anonymous\", { arguments: undefined });\n    return deserialize(undefined, result);\n}\n\nexport function _appleRPC(token) {\n    const args = Array.prototype.map.call(arguments, (arg) => serialize(null, arg));\n    const result = sendRequest(\"_apple\", { arguments: args });\n    return deserialize(undefined, result);\n}\n\nexport function _emailPasswordRPC(email, password) {\n    const args = Array.prototype.map.call(arguments, (arg) => serialize(null, arg));\n    const result = sendRequest(\"_emailPassword\", { arguments: args });\n    return deserialize(undefined, result);\n}\n\nexport function _facebookRPC(token) {\n    const args = Array.prototype.map.call(arguments, (arg) => serialize(null, arg));\n    const result = sendRequest(\"_facebook\", { arguments: args });\n    return deserialize(undefined, result);\n}\n\nexport function _functionRPC(payload) {\n    const args = Array.prototype.map.call(arguments, (arg) => serialize(null, arg));\n    const result = sendRequest(\"_function\", { arguments: args });\n    return deserialize(undefined, result);\n}\n\nexport function _googleRPC(authCode) {\n    const args = Array.prototype.map.call(arguments, (arg) => serialize(null, arg));\n    const result = sendRequest(\"_google\", { arguments: args });\n    return deserialize(undefined, result);\n}\nexport function _userApiKeyRPC(user_key) {\n    const args = Array.prototype.map.call(arguments, (arg) => serialize(null, arg));\n    const result = sendRequest(\"_userAPIKey\", { arguments: args });\n    return deserialize(undefined, result);\n}\n\nexport function _serverApiKeyRPC(server_key) {\n    const args = Array.prototype.map.call(arguments, (arg) => serialize(null, arg));\n    const result = sendRequest(\"_serverAPIKey\", { arguments: args });\n    return deserialize(undefined, result);\n}\n\nexport function _jwtRPC(token) {\n    const args = Array.prototype.map.call(arguments, (arg) => serialize(null, arg));\n    const result = sendRequest(\"_jwt\", { arguments: args });\n    return deserialize(undefined, result);\n}\n\nexport function callSyncFunction(name, args) {\n    args = (args || []).map((arg) => serialize(null, arg));\n    let result = sendRequest(\"call_sync_function\", { name, arguments: args });\n    return deserialize(undefined, result);\n}\n\nexport function callMethod(realmId, id, name, args) {\n    if (!Array.isArray(args)) {\n        throw new Error(\"Expected an array of arguments\");\n    }\n    const serializedArgs = args.map((arg) => serialize(realmId, arg));\n    const result = sendRequest(\"call_method\", { realmId, id, name, arguments: serializedArgs });\n    return deserialize(realmId, result);\n}\n\nexport function getObject(realmId, id, name) {\n    let result = sendRequest(\"get_object\", { realmId, id, name });\n    if (!result) {\n        return result;\n    }\n    for (let key in result) {\n        result[key] = deserialize(realmId, result[key]);\n    }\n    return result;\n}\n\nexport function getProperty(realmId, id, name) {\n    let result = sendRequest(\"get_property\", { realmId, id, name });\n    return deserialize(realmId, result);\n}\n\nexport function setProperty(realmId, id, name, value) {\n    value = serialize(realmId, value);\n    sendRequest(\"set_property\", { realmId, id, name, value });\n}\n\nexport function clearTestState() {\n    sendRequest(\"clear_test_state\");\n\n    // Clear all registered callbacks that are specific to this session.\n    registeredCallbacks = registeredCallbacks.filter(cb => Reflect.has(cb, persistentCallback));\n}\n\nfunction registerCallback(callback) {\n    let key = registeredCallbacks.indexOf(callback);\n    return key >= 0 ? key : (registeredCallbacks.push(callback) - 1);\n}\n\nfunction serialize(realmId, value) {\n    if (typeof value == \"undefined\") {\n        return { type: objectTypes.UNDEFINED };\n    }\n    if (typeof value == \"function\") {\n        return { type: objectTypes.FUNCTION, value: registerCallback(value) };\n    }\n    if (!value || typeof value != \"object\") {\n        return { value: value };\n    }\n\n    let id = value[idKey];\n    if (id) {\n        return { id };\n    }\n\n    if (value instanceof Date) {\n        return { type: objectTypes.DATE, value: value.getTime() };\n    }\n\n    if (Array.isArray(value)) {\n        let array = value.map((item) => serialize(realmId, item));\n        return { value: array };\n    }\n\n    if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {\n        return { type: objectTypes.DATA, value: base64.encode(value) };\n    }\n\n    if (value instanceof ObjectId || value instanceof Decimal128) {\n        return {\n            type: objectTypes.EJSON,\n            value: EJSON.serialize(value, { relaxed: false }),\n        };\n    }\n\n    let keys = Object.keys(value);\n    let values = keys.map((key) => serialize(realmId, value[key]));\n    return { type: objectTypes.DICT, keys, values };\n}\n\nexport function deserialize(realmId, info) {\n    let type = info.type;\n    let handler = type && typeConverters[type];\n    if (handler) {\n        return handler(realmId, info);\n    }\n\n    let value = info.value;\n    if (value && Array.isArray(value)) {\n        return value.map((item) => deserialize(realmId, item));\n    }\n\n    return value;\n}\n\nfunction deserializeDict(realmId, info) {\n    let { keys, values } = info;\n    let object = {};\n\n    for (let i = 0, len = keys.length; i < len; i++) {\n        object[keys[i]] = deserialize(realmId, values[i]);\n    }\n\n    return object;\n}\n\nfunction deserializeError(realmId, info) {\n    const { message, stack } = info.error;\n    const err =  new Error(message.value);\n    err.stack = stack.value;\n    return err;\n}\n\nfunction deserializeFunction(realmId, info) {\n    return registeredCallbacks[info.value];\n}\n\nfunction makeRequest(url, data) {\n    let statusCode;\n    let responseText;\n\n    // The global __debug__ object is provided by Visual Studio Code.\n    if (global.__debug__) {\n        let request = global.__debug__.require(\"sync-request\");\n        let response = request(\"POST\", url, {\n            body: JSON.stringify(data),\n            headers: {\n                \"Content-Type\": \"text/plain;charset=UTF-8\"\n            }\n        });\n\n        statusCode = response.statusCode;\n        responseText = response.body.toString(\"utf-8\");\n    } else {\n        let body = JSON.stringify(data);\n        let request = new XMLHttpRequest();\n\n        request.open(\"POST\", url, false);\n        request.send(body);\n\n        statusCode = request.status;\n        responseText = request.responseText;\n    }\n\n    if (statusCode != 200) {\n        throw new Error(responseText);\n    }\n\n    return JSON.parse(responseText);\n}\n\nlet pollTimeoutId;\nlet pollTimeout = 10;\n\n//returns an object from rpc serialized json value\nfunction deserialize_json_value(value) {\n    let result = {};\n    for (let index = 0; index < value.keys.length; index++) {\n        var propName = value.keys[index];\n        var propValue = value.values[index];\n        if (propValue.type && propValue.type == \"dict\") {\n            result[propName] = deserialize_json_value(propValue);\n        }\n        else {\n            result[propName] = propValue.value;\n        }\n    }\n\n    return result;\n}\n\nfunction sendRequest(command, data, host = sessionHost) {\n    clearTimeout(pollTimeoutId);\n    try {\n        if (!host) {\n            throw new Error(\"Must first create RPC session with a valid host\");\n        }\n\n        data = Object.assign({}, data, sessionId ? { sessionId } : null);\n\n        let url = \"http://\" + host + \"/\" + command;\n        let response = makeRequest(url, data);\n        let callback = response && response.callback;\n\n        // Reset the callback poll interval to 10ms every time we either hit a\n        // callback or call any other method, and double it each time we poll\n        // for callbacks and get nothing until it's over a second.\n        if (callback || command !== \"callbacks_poll\") {\n            pollTimeout = 10;\n        }\n        else if (pollTimeout < 1000) {\n            pollTimeout *= 2;\n        }\n\n        if (!response || response.error) {\n            let error = response && response.error;\n\n            // Remove the type prefix from the error message (e.g. \"Error: \").\n            if (error && typeof error === \"string\") {\n                error = error.replace(/^[a-z]+: /i, \"\");\n            } else if (error.type && error.type === \"error\") {\n                const err =  new Error(error.message.value);\n                err.stack = error.stack.value;\n                throw err;\n            }\n\n            throw new Error(error || `Invalid response for \"${command}\"`);\n        }\n        if (callback != null) {\n            let result, error, stack;\n            try {\n                let realmId = data.realmId;\n                let thisObject = deserialize(realmId, response.this);\n                let args = deserialize(realmId, response.arguments);\n                const fn = registeredCallbacks[callback];\n                if (fn) {\n                    result = serialize(realmId, fn.apply(thisObject, args));\n                }\n                else {\n                    error = `Unknown callback id: ${callback}`\n                }\n            } catch (e) {\n                error = e.message || (\"\" + e);\n                if (e.stack) {\n                    stack = JSON.stringify(e.stack);\n                }\n            }\n\n            let callbackCommand = \"callback_result\";\n            if (command === \"callbacks_poll\" || command === \"callback_poll_result\") {\n                callbackCommand = \"callback_poll_result\";\n            }\n\n            return sendRequest(callbackCommand, { callback, result, error, stack, \"callback_call_counter\": response.callback_call_counter });\n        }\n\n        return response.result;\n    }\n    finally {\n        pollTimeoutId = setTimeout(() => sendRequest(\"callbacks_poll\"), pollTimeout);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}