{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\"; // import {addMovies} from \"./Database\";\n\nimport * as Realm from \"realm-web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REALM_APP_ID = \"realm-movie-nite-dtfju\"; // e.g. myapp-abcde\n\nconst app = Realm.App.getApp({\n  id: REALM_APP_ID\n}); // Create a component that displays the given user's details\n\nfunction UserDetail({\n  user\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Logged in with anonymous id: \", user.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_c = UserDetail;\n\nasync function loginApiKey(apiKey) {\n  // Create an API Key credential\n  const credentials = Realm.Credentials.apiKey(apiKey);\n\n  try {\n    // Authenticate the user\n    const user = await app.logIn(credentials); // `App.currentUser` updates to match the logged in user\n    //assert(user.id === app.currentUser.id)\n\n    return user;\n  } catch (err) {\n    console.error(\"Failed to log in\", err);\n  }\n} // Create a component that lets an anonymous user log in\n\n\nfunction Login({\n  setUser\n}) {\n  loginApiKey(\"kzaedvmISl5nUeWa\").then(user => {\n    console.log(\"Successfully logged in!\", user);\n    setUser(user);\n  }); // const loginAnonymous = async () => {\n  //   const user = await app.logIn(Realm.Credentials.anonymous());\n  //   setUser(user);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: loginAnonymous,\n    children: \"Log In\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n} // Declare Schema\n\n\n_c2 = Login;\nconst MovieSchema = {\n  name: \"Movies\",\n  properties: {\n    id: \"int\",\n    title: \"string\",\n    genres: \"string\",\n    overview: \"string\",\n    posterpath: \"string\",\n    voteaverage: \"int\",\n    watched: \"boolean\"\n  }\n};\n\nconst App = () => {\n  _s();\n\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser);\n  const mongodb = user.mongoClient(\"mongodb-atlas\");\n\n  const addMovies = () => {\n    const movies = mongodb.db(\"movie-nite\").collection(\"movies\");\n\n    for (let i = 0; i < 3; i++) {\n      movies.insertOne({\n        title: \"Harry Putter \" + i,\n        overview: \"bla bla\"\n      });\n    }\n  }; // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: user ? /*#__PURE__*/_jsxDEV(UserDetail, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Login, {\n        setUser: setUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addMovies,\n      children: \"Add movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"yE/SCzRsbiEzF1U/zuUFg5M1hPU=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"UserDetail\");\n$RefreshReg$(_c2, \"Login\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["React","Movies","Realm","REALM_APP_ID","app","App","getApp","id","UserDetail","user","loginApiKey","apiKey","credentials","Credentials","logIn","err","console","error","Login","setUser","then","log","loginAnonymous","MovieSchema","name","properties","title","genres","overview","posterpath","voteaverage","watched","useState","currentUser","mongodb","mongoClient","addMovies","movies","db","collection","i","insertOne"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\n// import {addMovies} from \"./Database\";\n\nimport * as Realm from \"realm-web\";\n\nconst REALM_APP_ID = \"realm-movie-nite-dtfju\"; // e.g. myapp-abcde\nconst app = Realm.App.getApp({ id: REALM_APP_ID });\n\n// Create a component that displays the given user's details\nfunction UserDetail({ user }) {\n  return (\n    <div>\n      <p>Logged in with anonymous id: {user.id}</p>\n    </div>\n  );\n}\n\n\n\n\nasync function loginApiKey(apiKey) {\n  // Create an API Key credential\n  const credentials = Realm.Credentials.apiKey(apiKey);\n  try {\n    // Authenticate the user\n    const user = await app.logIn(credentials);\n    // `App.currentUser` updates to match the logged in user\n    //assert(user.id === app.currentUser.id)\n    return user\n  } catch(err) {\n    console.error(\"Failed to log in\", err);\n  }\n}\n\n\n// Create a component that lets an anonymous user log in\nfunction Login({ setUser }) {\n  loginApiKey(\"kzaedvmISl5nUeWa\").then(user => {\n    console.log(\"Successfully logged in!\", user);\n    setUser(user);\n  })\n  // const loginAnonymous = async () => {\n  //   const user = await app.logIn(Realm.Credentials.anonymous());\n  //   setUser(user);\n  // };\n  return <button onClick={loginAnonymous}>Log In</button>;\n}\n\n// Declare Schema\nconst MovieSchema = {\n  name: \"Movies\",\n  properties: {\n    id: \"int\",\n    title: \"string\",\n    genres: \"string\",\n    overview: \"string\",\n    posterpath: \"string\",\n    voteaverage: \"int\",\n    watched: \"boolean\",\n  },\n};\n\nconst App = () => {\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser);\n\n  const mongodb = user.mongoClient(\"mongodb-atlas\");\n\n  const addMovies = () => {\n    const movies = mongodb.db(\"movie-nite\").collection(\"movies\");\n    for (let i = 0; i < 3; i++) {\n      movies.insertOne({\n        title: \"Harry Putter \" + i,\n        overview: \"bla bla\",\n      });\n    }\n  };\n\n  // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        {user ? <UserDetail user={user} /> : <Login setUser={setUser} />}\n      </div>\n      <button type=\"button\" onClick={addMovies}>\n        Add movies\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}