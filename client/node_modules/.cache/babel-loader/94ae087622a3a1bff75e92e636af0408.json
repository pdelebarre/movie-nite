{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\"; // import {addMovies} from \"./Database\";\n\nimport * as Realm from \"realm-web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst credentials = {\n  usr: \"pdelebarre@gmail.com\",\n  pwd: \"msgiphil\"\n};\nconst REALM_APP_ID = \"realm-movie-nite-dtfju\"; // e.g. myapp-abcde\n\nconst app = Realm.App.getApp({\n  id: REALM_APP_ID\n}); // Create a component that displays the given user's details\n\nfunction UserDetail({\n  user\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Logged in with id: \", user.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n} // Create a component that lets an anonymous user log in\n\n\n_c = UserDetail;\n\nfunction Login({\n  setUser\n}) {\n  async function loginEmailPassword(cred) {\n    // Create an anonymous credential\n    const credentials = Realm.Credentials.emailPassword(cred.usr, cred.pwd); // Authenticate the user\n\n    const user = await app.logIn(credentials);\n    setUser(user);\n  } // const  loginApiKey = async (apiKey) => {\n  //   // Create an API Key credential\n  //   const credentials = Realm.Credentials.apiKey(apiKey);\n  //   const user = await app.logIn(credentials);\n  //   setUser(user);\n  // }\n  //return <button onClick={loginApiKey(\"kzaedvmISl5nUeWa\")}>Log In</button>;\n\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: loginEmailPassword(credentials),\n    children: \"Log In\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n} // Declare Schema\n\n\n_c2 = Login;\nconst MovieSchema = {\n  name: \"Movies\",\n  properties: {\n    id: \"int\",\n    title: \"string\",\n    genres: \"string\",\n    overview: \"string\",\n    posterpath: \"string\",\n    voteaverage: \"int\",\n    watched: \"boolean\"\n  }\n};\n\nconst App = () => {\n  _s();\n\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser);\n  const mongodb = user.mongoClient(\"mongodb-atlas\");\n\n  const addMovies = () => {\n    const movies = mongodb.db(\"movie-nite\").collection(\"movies\");\n\n    for (let i = 0; i < 3; i++) {\n      movies.insertOne({\n        title: \"Harry Putter \" + i,\n        overview: \"bla bla\"\n      });\n    }\n  }; // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: user ? /*#__PURE__*/_jsxDEV(Movies, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(Login, {\n        setUser: setUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addMovies,\n      children: \"Add movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"yE/SCzRsbiEzF1U/zuUFg5M1hPU=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"UserDetail\");\n$RefreshReg$(_c2, \"Login\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["React","Movies","Realm","credentials","usr","pwd","REALM_APP_ID","app","App","getApp","id","UserDetail","user","Login","setUser","loginEmailPassword","cred","Credentials","emailPassword","logIn","MovieSchema","name","properties","title","genres","overview","posterpath","voteaverage","watched","useState","currentUser","mongodb","mongoClient","addMovies","movies","db","collection","i","insertOne"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\n// import {addMovies} from \"./Database\";\n\nimport * as Realm from \"realm-web\";\n\nconst credentials = { usr: \"pdelebarre@gmail.com\", pwd: \"msgiphil\" };\n\nconst REALM_APP_ID = \"realm-movie-nite-dtfju\"; // e.g. myapp-abcde\nconst app = Realm.App.getApp({ id: REALM_APP_ID });\n\n// Create a component that displays the given user's details\nfunction UserDetail({ user }) {\n  return (\n    <div>\n      <p>Logged in with id: {user.id}</p>\n    </div>\n  );\n}\n\n// Create a component that lets an anonymous user log in\nfunction Login({ setUser }) {\n  async function loginEmailPassword(cred) {\n    // Create an anonymous credential\n    const credentials = Realm.Credentials.emailPassword(cred.usr, cred.pwd);\n    // Authenticate the user\n    const user = await app.logIn(credentials);\n    setUser(user);\n  }\n\n  // const  loginApiKey = async (apiKey) => {\n  //   // Create an API Key credential\n  //   const credentials = Realm.Credentials.apiKey(apiKey);\n  //   const user = await app.logIn(credentials);\n  //   setUser(user);\n  // }\n\n  //return <button onClick={loginApiKey(\"kzaedvmISl5nUeWa\")}>Log In</button>;\n\n  return <button onClick={loginEmailPassword(credentials)}>Log In</button>;\n}\n\n// Declare Schema\nconst MovieSchema = {\n  name: \"Movies\",\n  properties: {\n    id: \"int\",\n    title: \"string\",\n    genres: \"string\",\n    overview: \"string\",\n    posterpath: \"string\",\n    voteaverage: \"int\",\n    watched: \"boolean\",\n  },\n};\n\nconst App = () => {\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const [user, setUser] = React.useState(app.currentUser);\n\n  const mongodb = user.mongoClient(\"mongodb-atlas\");\n\n  const addMovies = () => {\n    const movies = mongodb.db(\"movie-nite\").collection(\"movies\");\n    for (let i = 0; i < 3; i++) {\n      movies.insertOne({\n        title: \"Harry Putter \" + i,\n        overview: \"bla bla\",\n      });\n    }\n  };\n\n  // If a user is logged in, show their details.\n  // Otherwise, show the login screen.\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n      {/* {user ? <UserDetail user={user} /> : <Login setUser={setUser} />} */}\n      {user ? <Movies/> : <Login setUser={setUser} />}\n      </div>\n      <button type=\"button\" onClick={addMovies}>\n        Add movies\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}