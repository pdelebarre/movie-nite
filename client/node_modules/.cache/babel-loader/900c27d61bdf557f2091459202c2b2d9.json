{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport Movies from \"./Movies\";\nimport { EasybaseProvider, useEasybase } from 'easybase-react';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  const {\n    Frame,\n    sync,\n    configureFrame\n  } = useEasybase();\n  useEffect(() => {\n    configureFrame({\n      tableName: \"NOTES APP\",\n      limit: 10\n    });\n    sync();\n  }, []);\n  const [movies, setMovies] = useState([]);\n\n  const movieExists = id => {\n    return movies.some(movie => {\n      return movie.id === id;\n    });\n  };\n\n  const getGenres = genre_ids => {\n    let genres_array = [];\n    genre_ids.map(id => {\n      const result = GENRES.find(genre => genre.id === id); // console.log(\"genre\",result);\n\n      genres_array.push(result.name);\n      return genres_array;\n    });\n    console.log(genres_array.toString());\n    return genres_array.toString();\n  };\n\n  const addMovie = movie => {\n    if (movieExists(movie.id)) {\n      console.log(`duplicate!`, movie);\n      return;\n    }\n\n    let genres = getGenres(movie.genre_ids);\n    let newMovie = { ...movie,\n      genres: genres,\n      watched: false\n    };\n    setMovies([...movies, newMovie]);\n  };\n\n  const delMovie = id => {\n    setMovies(movies.filter(movie => movie.id !== id));\n  };\n\n  const markWatched = id => {\n    setMovies(movies.map(movie => movie.id === id ? { ...movie,\n      watched: !movie.watched\n    } : movie));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchMovie, {\n      onSelect: addMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Movies, {\n      movies: Frame(),\n      delMovie: delMovie,\n      markWatched: markWatched\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Main, \"eb92d/IipYE9Nzk9xeK/04dOt1Q=\", false, function () {\n  return [useEasybase];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js"],"names":["React","SearchMovie","Movies","EasybaseProvider","useEasybase","useState","useEffect","Main","Frame","sync","configureFrame","tableName","limit","movies","setMovies","movieExists","id","some","movie","getGenres","genre_ids","genres_array","map","result","GENRES","find","genre","push","name","console","log","toString","addMovie","genres","newMovie","watched","delMovie","filter","markWatched"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport Movies from \"./Movies\";\n\nimport { EasybaseProvider, useEasybase } from 'easybase-react';\nimport { useState, useEffect } from 'react';\n\n\nconst Main = () => {\n    const { Frame, sync, configureFrame } = useEasybase();\n    useEffect(() => {\n        configureFrame({ tableName: \"NOTES APP\", limit: 10 });\n        sync();\n      }, []);\n\n  const [movies, setMovies] = useState([]);\n\n  const movieExists = (id) => {\n    return movies.some((movie) => {\n      return movie.id === id;\n    });\n  };\n\n  const getGenres = (genre_ids) => {\n    let genres_array = [];\n    genre_ids.map((id) => {\n      const result = GENRES.find((genre) => genre.id === id);\n      // console.log(\"genre\",result);\n      genres_array.push(result.name);\n      return genres_array;\n    });\n\n    console.log(genres_array.toString());\n    return genres_array.toString();\n  };\n\n  const addMovie = (movie) => {\n    if (movieExists(movie.id)) {\n      console.log(`duplicate!`, movie);\n      return;\n    }\n\n    let genres = getGenres(movie.genre_ids);\n\n    let newMovie = {\n      ...movie,\n      genres: genres,\n      watched: false,\n    };\n\n    setMovies([...movies, newMovie]);\n  };\n\n  const delMovie = (id) => {\n    setMovies(movies.filter((movie) => movie.id !== id));\n  };\n\n  const markWatched = (id) => {\n    setMovies(\n      movies.map((movie) =>\n        movie.id === id ? { ...movie, watched: !movie.watched } : movie\n      )\n    );\n  };\n\n  return (\n    <>\n      <SearchMovie onSelect={addMovie} />\n      <Movies movies={Frame()} delMovie={delMovie} markWatched={markWatched} />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}