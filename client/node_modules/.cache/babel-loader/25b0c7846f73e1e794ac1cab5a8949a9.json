{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nimport { keys } from \"./constants\";\nimport * as rpc from \"./rpc\";\nimport { invalidateCache, getRealmCache } from \"./cache\";\nexport function createMethods(prototype, type, methodNames, mutating) {\n  let props = {};\n  methodNames.forEach(name => {\n    props[name] = {\n      value: createMethod(type, name, mutating)\n    };\n  });\n  Object.defineProperties(prototype, props);\n}\nexport function createMethod(type, name, mutating) {\n  return function () {\n    let realmId = this[keys.realm];\n    let id = this[keys.id];\n\n    if (!realmId || !id) {\n      throw new TypeError(`${type}.${name} was called on non-Realm object ${this}!`);\n    }\n\n    if (this[keys.type] !== type) {\n      throw new TypeError(`${type}.${name} was called on Realm object of type ${this[keys.type]}!`);\n    }\n\n    if (mutating) {\n      invalidateCache(realmId);\n    }\n\n    try {\n      return rpc.callMethod(realmId, id, name, Array.from(arguments));\n    } finally {\n      if (mutating) {\n        invalidateCache(realmId);\n      }\n    }\n  };\n}\nexport function cacheObject(realmId, id, value) {\n  getRealmCache(realmId)[id] = value;\n}\nexport function getProperty(obj, name, cache = true) {\n  let realmId = obj[keys.realm];\n  let id = obj[keys.id];\n\n  if (!cache || realmId === undefined) {\n    return rpc.getProperty(realmId, id, name);\n  }\n\n  let realmCache = getRealmCache(realmId);\n  let objCache = realmCache[id];\n\n  if (!objCache) {\n    objCache = realmCache[id] = rpc.getObject(realmId, id, name);\n    return objCache[name];\n  }\n\n  if (name in objCache) {\n    return objCache[name];\n  }\n\n  return objCache[name] = rpc.getProperty(realmId, id, name);\n}\nexport function getterForProperty(name, cache = true) {\n  return function () {\n    return getProperty(this, name, cache);\n  };\n}\nexport function setterForProperty(name) {\n  return function (value) {\n    invalidateCache(this[keys.realm]);\n    rpc.setProperty(this[keys.realm], this[keys.id], name, value);\n  };\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/util.js"],"names":["keys","rpc","invalidateCache","getRealmCache","createMethods","prototype","type","methodNames","mutating","props","forEach","name","value","createMethod","Object","defineProperties","realmId","realm","id","TypeError","callMethod","Array","from","arguments","cacheObject","getProperty","obj","cache","undefined","realmCache","objCache","getObject","getterForProperty","setterForProperty","setProperty"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nimport { keys } from \"./constants\";\nimport * as rpc from \"./rpc\";\nimport {invalidateCache, getRealmCache} from \"./cache\";\n\nexport function createMethods(prototype, type, methodNames, mutating) {\n    let props = {};\n\n    methodNames.forEach((name) => {\n        props[name] = {\n            value: createMethod(type, name, mutating),\n        };\n    });\n\n    Object.defineProperties(prototype, props);\n}\n\nexport function createMethod(type, name, mutating) {\n    return function() {\n        let realmId = this[keys.realm];\n        let id = this[keys.id];\n\n        if (!realmId || !id) {\n            throw new TypeError(`${type}.${name} was called on non-Realm object ${this}!`);\n        }\n        if (this[keys.type] !== type) {\n            throw new TypeError(`${type}.${name} was called on Realm object of type ${this[keys.type]}!`);\n        }\n\n        if (mutating) {\n            invalidateCache(realmId);\n        }\n        try {\n            return rpc.callMethod(realmId, id, name, Array.from(arguments));\n        }\n        finally {\n            if (mutating) {\n                invalidateCache(realmId);\n            }\n        }\n    };\n}\n\nexport function cacheObject(realmId, id, value) {\n    getRealmCache(realmId)[id] = value;\n}\n\nexport function getProperty(obj, name, cache = true) {\n    let realmId = obj[keys.realm];\n    let id = obj[keys.id];\n    if (!cache || realmId === undefined) {\n        return rpc.getProperty(realmId, id, name);\n    }\n\n    let realmCache = getRealmCache(realmId);\n    let objCache = realmCache[id];\n    if (!objCache) {\n        objCache = realmCache[id] = rpc.getObject(realmId, id, name);\n        return objCache[name];\n    }\n\n    if (name in objCache) {\n        return objCache[name];\n    }\n    return objCache[name] = rpc.getProperty(realmId, id, name);\n}\n\nexport function getterForProperty(name, cache = true) {\n    return function() {\n        return getProperty(this, name, cache);\n    };\n}\n\nexport function setterForProperty(name) {\n    return function(value) {\n        invalidateCache(this[keys.realm]);\n        rpc.setProperty(this[keys.realm], this[keys.id], name, value);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}