{"ast":null,"code":"const {\n  isTaggedTemplate,\n  buildTaggedTemplate\n} = require('../../lib-util');\n\nconst fromItems = require('../common/from_items');\n\nconst valuesArray = require('../common/values_array');\n\nmodule.exports = ctx => {\n  const table = fromItems(ctx, ctx.frm);\n  const values = buildCall(ctx, ctx.insert);\n  return `insert into ${table}${values}`;\n};\n\nconst buildCall = (ctx, args) => {\n  if (isTaggedTemplate(args)) return ' ' + buildTaggedTemplate(ctx, args);\n  if (args.length === 1 && args[0] === undefined) return ' default values';\n  if (Array.isArray(args[0])) return buildValuesArray(ctx, args[0]);\n  if (typeof args[0] === 'function') return ' ' + ctx.build(args[0]);\n  return buildValuesArray(ctx, args);\n};\n\nconst buildValuesArray = (ctx, array) => {\n  const {\n    values,\n    columns\n  } = valuesArray(ctx, array);\n  return `(${columns}) ${values}`;\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-sq/clauses/insert.js"],"names":["isTaggedTemplate","buildTaggedTemplate","require","fromItems","valuesArray","module","exports","ctx","table","frm","values","buildCall","insert","args","length","undefined","Array","isArray","buildValuesArray","build","array","columns"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAA4CC,OAAO,CAAC,gBAAD,CAAzD;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,sBAAD,CAAzB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,wBAAD,CAA3B;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,GAAG,IAAI;AACtB,QAAMC,KAAK,GAAGL,SAAS,CAACI,GAAD,EAAMA,GAAG,CAACE,GAAV,CAAvB;AACA,QAAMC,MAAM,GAAGC,SAAS,CAACJ,GAAD,EAAMA,GAAG,CAACK,MAAV,CAAxB;AACA,SAAQ,eAAcJ,KAAM,GAAEE,MAAO,EAArC;AACD,CAJD;;AAMA,MAAMC,SAAS,GAAG,CAACJ,GAAD,EAAMM,IAAN,KAAe;AAC/B,MAAIb,gBAAgB,CAACa,IAAD,CAApB,EAA4B,OAAO,MAAMZ,mBAAmB,CAACM,GAAD,EAAMM,IAAN,CAAhC;AAC5B,MAAIA,IAAI,CAACC,MAAL,KAAgB,CAAhB,IAAqBD,IAAI,CAAC,CAAD,CAAJ,KAAYE,SAArC,EAAgD,OAAO,iBAAP;AAChD,MAAIC,KAAK,CAACC,OAAN,CAAcJ,IAAI,CAAC,CAAD,CAAlB,CAAJ,EAA4B,OAAOK,gBAAgB,CAACX,GAAD,EAAMM,IAAI,CAAC,CAAD,CAAV,CAAvB;AAC5B,MAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,UAAvB,EAAmC,OAAO,MAAMN,GAAG,CAACY,KAAJ,CAAUN,IAAI,CAAC,CAAD,CAAd,CAAb;AACnC,SAAOK,gBAAgB,CAACX,GAAD,EAAMM,IAAN,CAAvB;AACD,CAND;;AAQA,MAAMK,gBAAgB,GAAG,CAACX,GAAD,EAAMa,KAAN,KAAgB;AACvC,QAAM;AAAEV,IAAAA,MAAF;AAAUW,IAAAA;AAAV,MAAsBjB,WAAW,CAACG,GAAD,EAAMa,KAAN,CAAvC;AACA,SAAQ,IAAGC,OAAQ,KAAIX,MAAO,EAA9B;AACD,CAHD","sourcesContent":["const { isTaggedTemplate, buildTaggedTemplate } = require('../../lib-util')\nconst fromItems = require('../common/from_items')\nconst valuesArray = require('../common/values_array')\n\nmodule.exports = ctx => {\n  const table = fromItems(ctx, ctx.frm)\n  const values = buildCall(ctx, ctx.insert)\n  return `insert into ${table}${values}`\n}\n\nconst buildCall = (ctx, args) => {\n  if (isTaggedTemplate(args)) return ' ' + buildTaggedTemplate(ctx, args)\n  if (args.length === 1 && args[0] === undefined) return ' default values'\n  if (Array.isArray(args[0])) return buildValuesArray(ctx, args[0])\n  if (typeof args[0] === 'function') return ' ' + ctx.build(args[0])\n  return buildValuesArray(ctx, args)\n}\n\nconst buildValuesArray = (ctx, array) => {\n  const { values, columns } = valuesArray(ctx, array)\n  return `(${columns}) ${values}`\n}\n"]},"metadata":{},"sourceType":"script"}