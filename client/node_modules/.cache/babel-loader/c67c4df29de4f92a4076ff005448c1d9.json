{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\nimport { useEasybase, EasybaseProvider } from \"easybase-react\";\nimport Easybase from \"Easybase\";\nimport ebconfig from \"../ebconfig.js\";\nimport { useState, useEffect } from \"react\";\nimport GENRES from \"../resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id); // console.log(\"genre\",result);\n\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nconst Main = () => {\n  _s();\n\n  const table = Easybase.EasybaseEasybaseProvider({\n    ebconfig\n  }).db(\"MOVIES\");\n  const {\n    e\n  } = table; // Optional query expressions\n\n  const headers = /*#__PURE__*/_jsxDEV(\"thead\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"watched\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"poster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this); // use easybase's hooks to access the data.\n\n\n  const {\n    Frame,\n    useFrameEffect,\n    configureFrame,\n    sync\n  } = useEasybase(); // const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    // configureFrame sets up our Frame to access the appropriate list of data.\n    // in this case, it's only showing the first 10 rows, for the table LISTOFDATA\n    configureFrame({\n      limit: 10,\n      offset: 0,\n      tableName: \"MOVIES\"\n    });\n    sync(); // this *should* be [configureFrame, sync] because we want the useEffect hook to fire if\n    // those values change. However, easybase-react *always* updates them, so we need to pass\n    // an empty array. And then disable the warning in the linter. I consider this a bug in easybase.\n    // eslint-disable-next-line\n  }, []);\n  useFrameEffect(() => {\n    console.log(\"Frame changed!\");\n  }); //   useEffect(() => {\n  //     mounted();\n  //   }, [])\n  //   const { frame } = useReturn(() => {\n  //     console.log(\"getting data...\");\n  //     db(\"MOVIES\").return();\n  //     console.log(`movies`, frame);\n  //   }, []);\n  //   const movieExists = (id) => {\n  //     return movies.some((movie) => {\n  //       return movie.id === id;\n  //     });\n  //   };\n\n  const addMovie = async movie => {\n    //     if (movieExists(movie.id)) {\n    //       console.log(`duplicate!`, movie);\n    //       return;\n    //     }\n    let genres = getGenres(movie.genre_ids);\n    let newMovie = { ...movie,\n      genres: genres,\n      watched: false\n    };\n    Frame().push({\n      title: newMovie.title,\n      genres: newMovie.genres,\n      posterpath: newMovie.poster_path,\n      watched: newMovie.watched,\n      overview: newMovie.overview,\n      voteaverage: Number(newMovie.vote_average),\n      id: newMovie.id\n    });\n    sync();\n  }; //   const delMovie = (id) => {\n  //     setMovies(movies.filter((movie) => movie.id !== id));\n  //   };\n  //   const markWatched = (index, column,newValue) => {\n  //     // setMovies(\n  //     //   movies.map((movie) =>\n  //     //     movie.id === id ? { ...movie, watched: !movie.watched } : movie\n  //     //   )\n  //     // );\n  //     Frame(index)[column] = newValue;\n  //     sync();\n  //   };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(SearchMovie, {\n      onSelect: addMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.movies,\n      children: [headers, /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Frame().map((movie, index) => {\n          return /*#__PURE__*/_jsxDEV(Movie, {\n            movie: movie // delMovie={delMovie}\n            // markWatched={markWatched}\n            // index={movie[\"_key\"]}\n\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"kclDGyp+zgERQ0ZtmcLlDUia3bw=\", true, function () {\n  return [useEasybase];\n});\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js"],"names":["React","SearchMovie","classes","Movie","useEasybase","EasybaseProvider","Easybase","ebconfig","useState","useEffect","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","Main","table","EasybaseEasybaseProvider","db","e","headers","Frame","useFrameEffect","configureFrame","sync","limit","offset","tableName","addMovie","movie","genres","newMovie","watched","title","posterpath","poster_path","overview","voteaverage","Number","vote_average","container","movies","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AAEA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,gBAA9C;AAEA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAGA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAEA,MAAMC,SAAS,GAAIC,SAAD,IAAe;AAC/B,MAAIC,YAAY,GAAG,EAAnB;AACAD,EAAAA,SAAS,CAACE,GAAV,CAAeC,EAAD,IAAQ;AACpB,UAAMC,MAAM,GAAGN,MAAM,CAACO,IAAP,CAAaC,KAAD,IAAWA,KAAK,CAACH,EAAN,KAAaA,EAApC,CAAf,CADoB,CAEpB;;AACAF,IAAAA,YAAY,CAACM,IAAb,CAAkBH,MAAM,CAACI,IAAzB;AACA,WAAOP,YAAP;AACD,GALD;AAOAQ,EAAAA,OAAO,CAACC,GAAR,CAAYT,YAAY,CAACU,QAAb,EAAZ;AACA,SAAOV,YAAY,CAACU,QAAb,EAAP;AACD,CAXD;;AAaA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAMC,KAAK,GAAGnB,QAAQ,CAACoB,wBAAT,CAAkC;AAAEnB,IAAAA;AAAF,GAAlC,EAAgDoB,EAAhD,CAAmD,QAAnD,CAAd;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAQH,KAAd,CAFiB,CAEI;;AAErB,QAAMI,OAAO,gBACX;AAAA,2BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,CAJiB,CAgBjB;;;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,cAAT;AAAyBC,IAAAA,cAAzB;AAAyCC,IAAAA;AAAzC,MAAkD7B,WAAW,EAAnE,CAjBiB,CAkBjB;;AAEAK,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAuB,IAAAA,cAAc,CAAC;AAAEE,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE,CAArB;AAAwBC,MAAAA,SAAS,EAAE;AAAnC,KAAD,CAAd;AACAH,IAAAA,IAAI,GAJU,CAKd;AACA;AACA;AACA;AACD,GATQ,EASN,EATM,CAAT;AAWAF,EAAAA,cAAc,CAAC,MAAM;AACnBV,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,GAFa,CAAd,CA/BiB,CAmCjB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,QAAMe,QAAQ,GAAG,MAAOC,KAAP,IAAiB;AAChC;AACA;AACA;AACA;AAEA,QAAIC,MAAM,GAAG5B,SAAS,CAAC2B,KAAK,CAAC1B,SAAP,CAAtB;AAEA,QAAI4B,QAAQ,GAAG,EACb,GAAGF,KADU;AAEbC,MAAAA,MAAM,EAAEA,MAFK;AAGbE,MAAAA,OAAO,EAAE;AAHI,KAAf;AAMAX,IAAAA,KAAK,GAAGX,IAAR,CAAa;AACXuB,MAAAA,KAAK,EAAEF,QAAQ,CAACE,KADL;AAEXH,MAAAA,MAAM,EAAEC,QAAQ,CAACD,MAFN;AAGXI,MAAAA,UAAU,EAAEH,QAAQ,CAACI,WAHV;AAIXH,MAAAA,OAAO,EAAED,QAAQ,CAACC,OAJP;AAKXI,MAAAA,QAAQ,EAAEL,QAAQ,CAACK,QALR;AAMXC,MAAAA,WAAW,EAAEC,MAAM,CAACP,QAAQ,CAACQ,YAAV,CANR;AAOXjC,MAAAA,EAAE,EAAEyB,QAAQ,CAACzB;AAPF,KAAb;AAUAkB,IAAAA,IAAI;AACL,GAzBD,CAnDiB,CA8EjB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAE/B,OAAO,CAAC+C,SAAxB;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEZ;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAO,MAAA,SAAS,EAAEnC,OAAO,CAACgD,MAA1B;AAAA,iBACGrB,OADH,eAEE;AAAA,kBACGC,KAAK,GAAGhB,GAAR,CAAY,CAACwB,KAAD,EAAQa,KAAR,KAAkB;AAC7B,8BACE,QAAC,KAAD;AAEE,YAAA,KAAK,EAAEb,KAFT,CAGE;AACA;AACA;;AALF,aACOA,KAAK,CAACvB,EADb;AAAA;AAAA;AAAA;AAAA,kBADF;AASD,SAVA;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAnHD;;GAAMS,I;UAiBoDpB,W;;;KAjBpDoB,I;AAqHN,eAAeA,IAAf","sourcesContent":["import React from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\n\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\n\nimport { useEasybase, EasybaseProvider } from \"easybase-react\";\n\nimport Easybase from \"Easybase\";\nimport ebconfig from \"../ebconfig.js\";\n\n\nimport { useState, useEffect } from \"react\";\n\nimport GENRES from \"../resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    // console.log(\"genre\",result);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nconst Main = () => {\n  const table = Easybase.EasybaseEasybaseProvider({ ebconfig }).db(\"MOVIES\");\n  const { e } = table; // Optional query expressions\n\n  const headers = (\n    <thead>\n      <tr>\n        <th>watched</th>\n        <th>title</th>\n        <th>genre</th>\n        <th>poster</th>\n        <th>delete</th>\n      </tr>\n    </thead>\n  );\n\n  // use easybase's hooks to access the data.\n  const { Frame, useFrameEffect, configureFrame, sync } = useEasybase();\n  // const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    // configureFrame sets up our Frame to access the appropriate list of data.\n    // in this case, it's only showing the first 10 rows, for the table LISTOFDATA\n    configureFrame({ limit: 10, offset: 0, tableName: \"MOVIES\" });\n    sync();\n    // this *should* be [configureFrame, sync] because we want the useEffect hook to fire if\n    // those values change. However, easybase-react *always* updates them, so we need to pass\n    // an empty array. And then disable the warning in the linter. I consider this a bug in easybase.\n    // eslint-disable-next-line\n  }, []);\n\n  useFrameEffect(() => {\n    console.log(\"Frame changed!\");\n  });\n\n  //   useEffect(() => {\n  //     mounted();\n  //   }, [])\n\n  //   const { frame } = useReturn(() => {\n  //     console.log(\"getting data...\");\n  //     db(\"MOVIES\").return();\n  //     console.log(`movies`, frame);\n  //   }, []);\n\n  //   const movieExists = (id) => {\n  //     return movies.some((movie) => {\n  //       return movie.id === id;\n  //     });\n  //   };\n\n  const addMovie = async (movie) => {\n    //     if (movieExists(movie.id)) {\n    //       console.log(`duplicate!`, movie);\n    //       return;\n    //     }\n\n    let genres = getGenres(movie.genre_ids);\n\n    let newMovie = {\n      ...movie,\n      genres: genres,\n      watched: false,\n    };\n\n    Frame().push({\n      title: newMovie.title,\n      genres: newMovie.genres,\n      posterpath: newMovie.poster_path,\n      watched: newMovie.watched,\n      overview: newMovie.overview,\n      voteaverage: Number(newMovie.vote_average),\n      id: newMovie.id,\n    });\n\n    sync();\n  };\n\n  //   const delMovie = (id) => {\n  //     setMovies(movies.filter((movie) => movie.id !== id));\n  //   };\n\n  //   const markWatched = (index, column,newValue) => {\n  //     // setMovies(\n  //     //   movies.map((movie) =>\n  //     //     movie.id === id ? { ...movie, watched: !movie.watched } : movie\n  //     //   )\n  //     // );\n  //     Frame(index)[column] = newValue;\n  //     sync();\n  //   };\n\n  return (\n    <div className={classes.container}>\n      <SearchMovie onSelect={addMovie} />\n      {/* <Movies movies={Frame()} delMovie={delMovie} markWatched={markWatched} /> */}\n\n      <table className={classes.movies}>\n        {headers}\n        <tbody>\n          {Frame().map((movie, index) => {\n            return (\n              <Movie\n                key={movie.id}\n                movie={movie}\n                // delMovie={delMovie}\n                // markWatched={markWatched}\n                // index={movie[\"_key\"]}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}