{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/store/realm.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as RealmWeb from \"realm-web\";\nimport React, { useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealmAppContext = /*#__PURE__*/React.createContext(null);\n\nconst RealmApp = ({\n  children\n}) => {\n  _s();\n\n  const REALM_APP_ID = \"application-1-zgoro\";\n  const API_KEY = \"X6vbOvQjCACWfxM0IMCGmS8u1j5mPLqL5YnoQFu99dPqn5UnSzGXOeFJ0mp7ZzbB\";\n  const app = new RealmWeb.App({\n    id: REALM_APP_ID\n  });\n  const [user, setUser] = useState(null);\n\n  const logIn = async (email, password) => {\n    const credentials = RealmWeb.Credentials.emailPassword(email, password);\n\n    try {\n      await app.logIn(credentials);\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      setUser(null);\n      return null;\n    }\n  };\n\n  const logOut = () => {\n    if (user !== null) {\n      app.currentUser.logOut();\n      setUser(null);\n    }\n  };\n\n  const loginApiKey = async apiKey => {\n    // Create an API Key credential\n    const credentials = RealmWeb.Credentials.apiKey(apiKey);\n\n    try {\n      // Authenticate the user\n      const user = await app.logIn(credentials);\n      return user;\n    } catch (err) {\n      console.error(\"Failed to log in\", err);\n    }\n  };\n\n  const logInMyApiKey = () => {\n    loginApiKey(API_KEY).then(user => {\n      console.log(\"Successfully logged in!\", user);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(RealmAppContext.Provider, {\n    value: {\n      logIn,\n      logOut,\n      user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RealmApp, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n\n_c = RealmApp;\nexport const useRealmApp = () => {\n  _s2();\n\n  const realmContext = useContext(RealmAppContext);\n\n  if (realmContext == null) {\n    throw new Error(\"useRealmApp() called outside of a RealmApp?\");\n  }\n\n  return realmContext;\n};\n\n_s2(useRealmApp, \"9rITAoR7OQ/eW7sw5VDffrSA7zY=\");\n\nexport default RealmApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"RealmApp\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/store/realm.js"],"names":["RealmWeb","React","useContext","useState","RealmAppContext","createContext","RealmApp","children","REALM_APP_ID","API_KEY","app","App","id","user","setUser","logIn","email","password","credentials","Credentials","emailPassword","currentUser","e","logOut","loginApiKey","apiKey","err","console","error","logInMyApiKey","then","log","useRealmApp","realmContext","Error"],"mappings":";;;;AAAA,OAAO,KAAKA,QAAZ,MAA0B,WAA1B;AAEA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;;AAEA,MAAMC,eAAe,gBAAGH,KAAK,CAACI,aAAN,CAAoB,IAApB,CAAxB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACjC,QAAMC,YAAY,GAAG,qBAArB;AACA,QAAMC,OAAO,GACX,kEADF;AAGA,QAAMC,GAAG,GAAG,IAAIV,QAAQ,CAACW,GAAb,CAAiB;AAAEC,IAAAA,EAAE,EAAEJ;AAAN,GAAjB,CAAZ;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;;AAEA,QAAMY,KAAK,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACvC,UAAMC,WAAW,GAAGlB,QAAQ,CAACmB,WAAT,CAAqBC,aAArB,CAAmCJ,KAAnC,EAA0CC,QAA1C,CAApB;;AACA,QAAI;AACF,YAAMP,GAAG,CAACK,KAAJ,CAAUG,WAAV,CAAN;AACAJ,MAAAA,OAAO,CAACJ,GAAG,CAACW,WAAL,CAAP;AACA,aAAOX,GAAG,CAACW,WAAX;AACD,KAJD,CAIE,OAAOC,CAAP,EAAU;AACVR,MAAAA,OAAO,CAAC,IAAD,CAAP;AACA,aAAO,IAAP;AACD;AACF,GAVD;;AAYA,QAAMS,MAAM,GAAG,MAAM;AACnB,QAAIV,IAAI,KAAK,IAAb,EAAmB;AACjBH,MAAAA,GAAG,CAACW,WAAJ,CAAgBE,MAAhB;AACAT,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GALD;;AAOA,QAAMU,WAAW,GAAG,MAAOC,MAAP,IAAkB;AACpC;AACA,UAAMP,WAAW,GAAGlB,QAAQ,CAACmB,WAAT,CAAqBM,MAArB,CAA4BA,MAA5B,CAApB;;AACA,QAAI;AACF;AACA,YAAMZ,IAAI,GAAG,MAAMH,GAAG,CAACK,KAAJ,CAAUG,WAAV,CAAnB;AAEA,aAAOL,IAAP;AACD,KALD,CAKE,OAAOa,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,kBAAd,EAAkCF,GAAlC;AACD;AACF,GAXD;;AAaA,QAAMG,aAAa,GAAG,MAAM;AAC1BL,IAAAA,WAAW,CAACf,OAAD,CAAX,CAAqBqB,IAArB,CAA2BjB,IAAD,IAAU;AAClCc,MAAAA,OAAO,CAACI,GAAR,CAAY,yBAAZ,EAAuClB,IAAvC;AACD,KAFD;AAGD,GAJD;;AAMA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,KADK;AAELQ,MAAAA,MAFK;AAGLV,MAAAA;AAHK,KADT;AAAA,cAOGN;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAzDD;;GAAMD,Q;;KAAAA,Q;AA2DN,OAAO,MAAM0B,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAMC,YAAY,GAAG/B,UAAU,CAACE,eAAD,CAA/B;;AACA,MAAI6B,YAAY,IAAI,IAApB,EAA0B;AACxB,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,SAAOD,YAAP;AACD,CANM;;IAAMD,W;;AAQb,eAAe1B,QAAf","sourcesContent":["import * as RealmWeb from \"realm-web\";\n\nimport React, { useContext, useState } from \"react\";\n\nconst RealmAppContext = React.createContext(null);\n\nconst RealmApp = ({ children }) => {\n  const REALM_APP_ID = \"application-1-zgoro\";\n  const API_KEY =\n    \"X6vbOvQjCACWfxM0IMCGmS8u1j5mPLqL5YnoQFu99dPqn5UnSzGXOeFJ0mp7ZzbB\";\n\n  const app = new RealmWeb.App({ id: REALM_APP_ID });\n  const [user, setUser] = useState(null);\n\n  const logIn = async (email, password) => {\n    const credentials = RealmWeb.Credentials.emailPassword(email, password);\n    try {\n      await app.logIn(credentials);\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      setUser(null);\n      return null;\n    }\n  };\n\n  const logOut = () => {\n    if (user !== null) {\n      app.currentUser.logOut();\n      setUser(null);\n    }\n  };\n\n  const loginApiKey = async (apiKey) => {\n    // Create an API Key credential\n    const credentials = RealmWeb.Credentials.apiKey(apiKey);\n    try {\n      // Authenticate the user\n      const user = await app.logIn(credentials);\n\n      return user;\n    } catch (err) {\n      console.error(\"Failed to log in\", err);\n    }\n  };\n\n  const logInMyApiKey = () => {\n    loginApiKey(API_KEY).then((user) => {\n      console.log(\"Successfully logged in!\", user);\n    });\n  };\n\n  return (\n    <RealmAppContext.Provider\n      value={{\n        logIn,\n        logOut,\n        user,\n      }}\n    >\n      {children}\n    </RealmAppContext.Provider>\n  );\n};\n\nexport const useRealmApp = () => {\n  const realmContext = useContext(RealmAppContext);\n  if (realmContext == null) {\n    throw new Error(\"useRealmApp() called outside of a RealmApp?\");\n  }\n  return realmContext;\n};\n\nexport default RealmApp;\n"]},"metadata":{},"sourceType":"module"}