{"ast":null,"code":"const {\n  isObject,\n  buildCall,\n  mapJoin,\n  objectMapJoin\n} = require('../../lib-util');\n\nconst valuesArray = require('../common/values_array');\n\nmodule.exports = ctx => {\n  if (ctx.with.length === 0) return;\n  const txt = calls(ctx, ctx.with);\n  return txt && `with ${ctx.recursive ? 'recursive ' : ''}${txt}`;\n};\n\nconst buildArg = (ctx, arg) => {\n  if (isObject(arg)) return buildObject(ctx, arg);\n  throw Error('Invalid with argument:', arg);\n};\n\nconst buildProperty = (ctx, key, value) => {\n  if (typeof value === 'function') {\n    return `${ctx.mapKey(key)} ${ctx.build(value)}`;\n  }\n\n  if (Array.isArray(value)) {\n    const {\n      columns,\n      values\n    } = valuesArray(ctx, value);\n    return `${ctx.mapKey(key)}(${columns}) (${values})`;\n  }\n\n  throw Error(`Error: Invalid .with argument`);\n};\n\nconst buildObject = objectMapJoin(buildProperty);\nconst calls = mapJoin(buildCall(mapJoin(buildArg)));","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-sq/clauses/with.js"],"names":["isObject","buildCall","mapJoin","objectMapJoin","require","valuesArray","module","exports","ctx","with","length","txt","calls","recursive","buildArg","arg","buildObject","Error","buildProperty","key","value","mapKey","build","Array","isArray","columns","values"],"mappings":"AAAA,MAAM;AACJA,EAAAA,QADI;AAEJC,EAAAA,SAFI;AAGJC,EAAAA,OAHI;AAIJC,EAAAA;AAJI,IAKFC,OAAO,CAAC,gBAAD,CALX;;AAMA,MAAMC,WAAW,GAAGD,OAAO,CAAC,wBAAD,CAA3B;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,GAAG,IAAI;AACtB,MAAIA,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,CAAxB,EAA2B;AAC3B,QAAMC,GAAG,GAAGC,KAAK,CAACJ,GAAD,EAAMA,GAAG,CAACC,IAAV,CAAjB;AACA,SAAOE,GAAG,IAAK,QAAOH,GAAG,CAACK,SAAJ,GAAgB,YAAhB,GAA+B,EAAG,GAAEF,GAAI,EAA9D;AACD,CAJD;;AAMA,MAAMG,QAAQ,GAAG,CAACN,GAAD,EAAMO,GAAN,KAAc;AAC7B,MAAIf,QAAQ,CAACe,GAAD,CAAZ,EAAmB,OAAOC,WAAW,CAACR,GAAD,EAAMO,GAAN,CAAlB;AACnB,QAAME,KAAK,CAAC,wBAAD,EAA2BF,GAA3B,CAAX;AACD,CAHD;;AAKA,MAAMG,aAAa,GAAG,CAACV,GAAD,EAAMW,GAAN,EAAWC,KAAX,KAAqB;AACzC,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,WAAQ,GAAEZ,GAAG,CAACa,MAAJ,CAAWF,GAAX,CAAgB,IAAGX,GAAG,CAACc,KAAJ,CAAUF,KAAV,CAAiB,EAA9C;AACD;;AACD,MAAIG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;AACxB,UAAM;AAAEK,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAsBrB,WAAW,CAACG,GAAD,EAAMY,KAAN,CAAvC;AACA,WAAQ,GAAEZ,GAAG,CAACa,MAAJ,CAAWF,GAAX,CAAgB,IAAGM,OAAQ,MAAKC,MAAO,GAAjD;AACD;;AACD,QAAMT,KAAK,CAAE,+BAAF,CAAX;AACD,CATD;;AAWA,MAAMD,WAAW,GAAGb,aAAa,CAACe,aAAD,CAAjC;AACA,MAAMN,KAAK,GAAGV,OAAO,CAACD,SAAS,CAACC,OAAO,CAACY,QAAD,CAAR,CAAV,CAArB","sourcesContent":["const {\n  isObject,\n  buildCall,\n  mapJoin,\n  objectMapJoin\n} = require('../../lib-util')\nconst valuesArray = require('../common/values_array')\n\nmodule.exports = ctx => {\n  if (ctx.with.length === 0) return\n  const txt = calls(ctx, ctx.with)\n  return txt && `with ${ctx.recursive ? 'recursive ' : ''}${txt}`\n}\n\nconst buildArg = (ctx, arg) => {\n  if (isObject(arg)) return buildObject(ctx, arg)\n  throw Error('Invalid with argument:', arg)\n}\n\nconst buildProperty = (ctx, key, value) => {\n  if (typeof value === 'function') {\n    return `${ctx.mapKey(key)} ${ctx.build(value)}`\n  }\n  if (Array.isArray(value)) {\n    const { columns, values } = valuesArray(ctx, value)\n    return `${ctx.mapKey(key)}(${columns}) (${values})`\n  }\n  throw Error(`Error: Invalid .with argument`)\n}\n\nconst buildObject = objectMapJoin(buildProperty)\nconst calls = mapJoin(buildCall(mapJoin(buildArg)))\n"]},"metadata":{},"sourceType":"script"}