{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useMongoDB } from \"./store/mongodb\";\nimport { useRealmApp } from \"./store/realm\";\nimport LogInForm from \"./components/LoginForm\";\nimport MovieList from \"./components/MovieList\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport { Pane } from \"evergreen-ui\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const {\n    logIn,\n    logOut,\n    user\n  } = useRealmApp();\n  const {\n    db\n  } = useMongoDB();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      if (user && db) {\n        const authoredMovies = await db.collection(\"movies\").find();\n        setMovies(authoredMovies);\n      }\n    }\n\n    wrapMovieQuery();\n  }, [user, db, refresh]);\n\n  const addMovie = async movie => {\n    console.log(`adding `, movie.title); //const genres = getGenres(movie.genre_ids);\n\n    await db.collection(\"movies\").insertOne({\n      id: movie.id,\n      title: movie.title,\n      genres: \"comedie\",\n      posterpath: movie.poster_path,\n      overview: movie.overview,\n      voteaverage: Number(movie.vote_average),\n      watched: false\n    }).then(result => console.log(`Successfully inserted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to insert item: ${err}`));\n  };\n\n  const onClickHandler = () => {\n    addMovie({\n      id: 1,\n      title: \"title truc\",\n      posterpath: \"poster\",\n      overview: \"dfkjdfkgjhfkghdfgk\",\n      voteaverage: 6.1\n    });\n  };\n\n  async function handleLogIn() {\n    await logIn(email, password);\n  }\n\n  const selectMovieHandler = () => {\n    setRefresh(st => !st);\n  };\n\n  return user && db && user.state === \"active\" ? /*#__PURE__*/_jsxDEV(Pane, {\n    width: \"90%\",\n    padding: 16,\n    background: \"purpleTint\",\n    borderRadius: 3,\n    elevation: 4,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickHandler,\n      children: \"Add movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(LogInForm, {\n    email: email,\n    setEmail: setEmail,\n    password: password,\n    setPassword: setPassword,\n    handleLogIn: handleLogIn\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"4D9xjdsPe9fO6EiZUP0BwgotCXc=\", false, function () {\n  return [useRealmApp, useMongoDB];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["React","useState","useEffect","useMongoDB","useRealmApp","LogInForm","MovieList","SearchMovie","Pane","App","logIn","logOut","user","db","email","setEmail","password","setPassword","movies","setMovies","refresh","setRefresh","wrapMovieQuery","authoredMovies","collection","find","addMovie","movie","console","log","title","insertOne","id","genres","posterpath","poster_path","overview","voteaverage","Number","vote_average","watched","then","result","insertedId","catch","err","error","onClickHandler","handleLogIn","selectMovieHandler","st","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useMongoDB } from \"./store/mongodb\";\nimport { useRealmApp } from \"./store/realm\";\n\nimport LogInForm from \"./components/LoginForm\";\nimport MovieList from \"./components/MovieList\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\n\nimport { Pane } from \"evergreen-ui\";\n\nfunction App() {\n  const { logIn, logOut, user } = useRealmApp();\n  const { db } = useMongoDB();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n\n  const [refresh, setRefresh] = useState(false);\n\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      if (user && db) {\n        const authoredMovies = await db.collection(\"movies\").find();\n        setMovies(authoredMovies);\n      }\n    }\n    wrapMovieQuery();\n  }, [user, db, refresh]);\n\n\n  const addMovie = async (movie ) => {\n    console.log(`adding `, movie.title);\n\n    //const genres = getGenres(movie.genre_ids);\n    await db\n      .collection(\"movies\")\n      .insertOne({\n        id: movie.id,\n        title: movie.title,\n        genres: \"comedie\",\n        posterpath: movie.poster_path,\n        overview: movie.overview,\n        voteaverage: Number(movie.vote_average),\n        watched: false,\n      })\n      .then((result) =>\n        console.log(`Successfully inserted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to insert item: ${err}`));\n  };\n\n  const onClickHandler = () => {\n    addMovie({id:1,title:\"title truc\",posterpath:\"poster\",overview:\"dfkjdfkgjhfkghdfgk\",voteaverage:6.1});\n  }\n\n  async function handleLogIn() {\n    await logIn(email, password);\n  }\n\n  const selectMovieHandler = () => {\n      setRefresh(st => !st);\n  }\n\n  return user && db && user.state === \"active\" ? (\n    <Pane\n      width=\"90%\"\n      padding={16}\n      background=\"purpleTint\"\n      borderRadius={3}\n      elevation={4}\n    >\n      {/* <SearchMovie onClick={selectMovieHandler}/>\n      <MovieList movies={movies} user={user} logOut={logOut} /> */}\n      <button onClick = {onClickHandler}>Add movies</button>\n    </Pane>\n  ) : (\n    <LogInForm\n      email={email}\n      setEmail={setEmail}\n      password={password}\n      setPassword={setPassword}\n      handleLogIn={handleLogIn}\n    />\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}