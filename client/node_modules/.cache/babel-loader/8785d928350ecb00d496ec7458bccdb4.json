{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useMongoDB } from \"./store/mongodb\";\nimport { useRealmApp } from \"./store/realm\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\"; // import TestMongo from \"./tests/TestMongo\";\n\nimport GENRES from \"./resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  _s();\n\n  const API_KEY = \"X6vbOvQjCACWfxM0IMCGmS8u1j5mPLqL5YnoQFu99dPqn5UnSzGXOeFJ0mp7ZzbB\";\n  const {\n    loginApiKey,\n    logOut,\n    user\n  } = useRealmApp();\n  const {\n    db\n  } = useMongoDB();\n  handleLogIn();\n  const [movies, setMovies] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async movie => {\n    console.log(`adding `, movie);\n    const genres = getGenres(movie.genre_ids);\n    await db.collection(\"movies\").insertOne({\n      id: movie.id,\n      title: movie.title,\n      genres: genres,\n      poster_path: movie.poster_path,\n      overview: movie.overview,\n      vote_average: Number(movie.vote_average),\n      watched: false\n    }).then(result => console.log(`Successfully inserted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to insert item: ${err}`));\n  };\n\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      if (user && db) {\n        const authoredMovies = await db.collection(\"movies\").find().sort();\n        setMovies(authoredMovies);\n      }\n    }\n\n    wrapMovieQuery();\n  }, [user, db, refresh]);\n\n  async function handleLogIn() {\n    await loginApiKey(API_KEY);\n  }\n\n  const isDuplicate = async movie => {\n    const dupe = await db.collection(\"movies\").findOne({\n      id: movie.id\n    });\n    console.log(\"dupe?\", dupe);\n    return !(dupe === null);\n  };\n\n  const onAddHandler = async movie => {\n    console.log(`in App, adding: `, movie);\n    let dupe = await isDuplicate(movie);\n    dupe ? console.log(`dupe`, movie) : addMovie(movie);\n    setRefresh(st => !st);\n  };\n\n  const onWatchedHandler = async movie => {\n    await db.collection(\"movies\").updateOne({\n      id: movie.id\n    }, {\n      $set: {\n        watched: !movie.watched\n      }\n    }).then(result => console.log(`Successfully flagged item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to flag item: ${err}`));\n  };\n\n  const onRemoveHandler = async movie => {\n    await db.collection(\"movies\").deleteOne({\n      id: movie.id\n    }).then(result => console.log(`Successfully deleted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to delete item: ${err}`));\n  };\n\n  return user && db && user.state === \"active\" && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MovieList, {\n      movies: movies,\n      user: user,\n      logOut: logOut,\n      onWatchedHandler: onWatchedHandler,\n      onRemoveHandler: onRemoveHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchMovie, {\n      onAddHandler: onAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2EV2+sjMc+Oj+THdipIwJdSH5F4=\", false, function () {\n  return [useRealmApp, useMongoDB];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["React","useState","useEffect","useMongoDB","useRealmApp","SearchMovie","MovieList","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","App","API_KEY","loginApiKey","logOut","user","db","handleLogIn","movies","setMovies","refresh","setRefresh","addMovie","movie","genres","collection","insertOne","title","poster_path","overview","vote_average","Number","watched","then","insertedId","catch","err","error","wrapMovieQuery","authoredMovies","sort","isDuplicate","dupe","findOne","onAddHandler","st","onWatchedHandler","updateOne","$set","onRemoveHandler","deleteOne","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useMongoDB } from \"./store/mongodb\";\nimport { useRealmApp } from \"./store/realm\";\n\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\";\n\n// import TestMongo from \"./tests/TestMongo\";\n\nimport GENRES from \"./resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  const API_KEY =\n    \"X6vbOvQjCACWfxM0IMCGmS8u1j5mPLqL5YnoQFu99dPqn5UnSzGXOeFJ0mp7ZzbB\";\n\n  const { loginApiKey, logOut, user } = useRealmApp();\n  const { db } = useMongoDB();\n\n  handleLogIn();\n\n  const [movies, setMovies] = useState([]);\n\n  const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async (movie) => {\n    console.log(`adding `, movie);\n\n    const genres = getGenres(movie.genre_ids);\n    await db\n      .collection(\"movies\")\n      .insertOne({\n        id: movie.id,\n        title: movie.title,\n        genres: genres,\n        poster_path: movie.poster_path,\n        overview: movie.overview,\n        vote_average: Number(movie.vote_average),\n        watched: false,\n      })\n      .then((result) =>\n        console.log(`Successfully inserted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to insert item: ${err}`));\n  };\n\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      if (user && db) {\n        const authoredMovies = await db.collection(\"movies\").find().sort();\n        setMovies(authoredMovies);\n      }\n    }\n    wrapMovieQuery();\n  }, [user, db, refresh]);\n\n  async function handleLogIn() {\n\n    await loginApiKey(API_KEY);\n  }\n\n  const isDuplicate = async (movie) => {\n    const dupe = await db.collection(\"movies\").findOne({ id: movie.id });\n    console.log(\"dupe?\", dupe);\n\n    return !(dupe === null);\n  };\n\n  const onAddHandler = async (movie) => {\n    console.log(`in App, adding: `, movie);\n    let dupe = await isDuplicate(movie);\n    dupe ? console.log(`dupe`, movie) : addMovie(movie);\n    setRefresh((st) => !st);\n  };\n\n  const onWatchedHandler = async (movie) => {\n    await db\n      .collection(\"movies\")\n      .updateOne({ id: movie.id }, { $set: { watched: !movie.watched } })\n      .then((result) =>\n        console.log(`Successfully flagged item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to flag item: ${err}`));\n\n  };\n\n  const onRemoveHandler = async (movie) => {\n    await db\n      .collection(\"movies\")\n      .deleteOne({ id: movie.id })\n      .then((result) =>\n        console.log(`Successfully deleted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to delete item: ${err}`));\n  };\n\n  return user && db && user.state === \"active\" && (\n    <div>\n      <MovieList\n        movies={movies}\n        user={user}\n        logOut={logOut}\n        onWatchedHandler={onWatchedHandler}\n        onRemoveHandler={onRemoveHandler}\n      />\n      <SearchMovie onAddHandler={onAddHandler} />\n\n      {/* <TestMongo /> */}\n    </div>\n  ) \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}