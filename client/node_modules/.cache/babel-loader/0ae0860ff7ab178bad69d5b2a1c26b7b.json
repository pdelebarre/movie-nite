{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nimport { objectTypes } from \"./constants\";\nimport { callMethod, registerTypeConverter } from \"./rpc\";\nexport function performFetch(request, responseHandler) {\n  const {\n    url,\n    ...init\n  } = request;\n\n  if (typeof url !== \"string\") {\n    throw new Error(\"Expected a URL\");\n  }\n\n  if (typeof responseHandler !== \"object\") {\n    throw new Error(\"Expected a response handler object\");\n  }\n\n  const {\n    onSuccess,\n    onError\n  } = responseHandler; // Delegate to fetch\n\n  fetch(url, init).then(async response => {\n    const decodedBody = await response.text(); // Pull out the headers of the response\n\n    const headers = {};\n    response.headers.forEach((value, key) => {\n      headers[key] = value;\n    });\n    return {\n      statusCode: response.status,\n      headers,\n      body: decodedBody\n    };\n  }).then(onSuccess, onError);\n}\n\nfunction deserializeResponseHandler(realmId, info) {\n  const {\n    id\n  } = info;\n\n  if (typeof id !== \"number\") {\n    throw new Error(\"Expected a nummeric id\");\n  }\n\n  return {\n    onSuccess: function () {\n      callMethod(undefined, id, \"onSuccess\", Array.from(arguments));\n    },\n    onError: function () {\n      callMethod(undefined, id, \"onError\", Array.from(arguments));\n    }\n  };\n}\n\nregisterTypeConverter(objectTypes.FETCHRESPONSEHANDLER, deserializeResponseHandler);","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/fetch.js"],"names":["objectTypes","callMethod","registerTypeConverter","performFetch","request","responseHandler","url","init","Error","onSuccess","onError","fetch","then","response","decodedBody","text","headers","forEach","value","key","statusCode","status","body","deserializeResponseHandler","realmId","info","id","undefined","Array","from","arguments","FETCHRESPONSEHANDLER"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,EAAqBC,qBAArB,QAAkD,OAAlD;AAEA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,eAA/B,EAAgD;AACrD,QAAM;AAAEC,IAAAA,GAAF;AAAO,OAAGC;AAAV,MAAmBH,OAAzB;;AACA,MAAI,OAAOE,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,MAAI,OAAOH,eAAP,KAA2B,QAA/B,EAAyC;AACvC,UAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAyBL,eAA/B,CARqD,CASrD;;AACAM,EAAAA,KAAK,CAACL,GAAD,EAAMC,IAAN,CAAL,CAAiBK,IAAjB,CAAsB,MAAOC,QAAP,IAAoB;AACxC,UAAMC,WAAW,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAA1B,CADwC,CAExC;;AACA,UAAMC,OAAO,GAAG,EAAhB;AACAH,IAAAA,QAAQ,CAACG,OAAT,CAAiBC,OAAjB,CAAyB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACrCH,MAAAA,OAAO,CAACG,GAAD,CAAP,GAAeD,KAAf;AACH,KAFD;AAGA,WAAO;AACDE,MAAAA,UAAU,EAAEP,QAAQ,CAACQ,MADpB;AAEDL,MAAAA,OAFC;AAGDM,MAAAA,IAAI,EAAER;AAHL,KAAP;AAKD,GAZD,EAYGF,IAZH,CAYQH,SAZR,EAYmBC,OAZnB;AAaD;;AAED,SAASa,0BAAT,CAAoCC,OAApC,EAA6CC,IAA7C,EAAmD;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAASD,IAAf;;AACA,MAAI,OAAOC,EAAP,KAAc,QAAlB,EAA4B;AAC1B,UAAM,IAAIlB,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,SAAO;AACLC,IAAAA,SAAS,EAAE,YAAW;AACpBR,MAAAA,UAAU,CAAC0B,SAAD,EAAYD,EAAZ,EAAgB,WAAhB,EAA6BE,KAAK,CAACC,IAAN,CAAWC,SAAX,CAA7B,CAAV;AACD,KAHI;AAILpB,IAAAA,OAAO,EAAE,YAAW;AAClBT,MAAAA,UAAU,CAAC0B,SAAD,EAAYD,EAAZ,EAAgB,SAAhB,EAA2BE,KAAK,CAACC,IAAN,CAAWC,SAAX,CAA3B,CAAV;AACD;AANI,GAAP;AAQD;;AAED5B,qBAAqB,CAACF,WAAW,CAAC+B,oBAAb,EAAmCR,0BAAnC,CAArB","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nimport { objectTypes } from \"./constants\";\nimport { callMethod, registerTypeConverter } from \"./rpc\";\n\nexport function performFetch(request, responseHandler) {\n  const { url, ...init } = request;\n  if (typeof url !== \"string\") {\n    throw new Error(\"Expected a URL\");\n  }\n  if (typeof responseHandler !== \"object\") {\n    throw new Error(\"Expected a response handler object\");\n  }\n  const { onSuccess, onError } = responseHandler;\n  // Delegate to fetch\n  fetch(url, init).then(async (response) => {\n    const decodedBody = await response.text();\n    // Pull out the headers of the response\n    const headers = {};\n    response.headers.forEach((value, key) => {\n        headers[key] = value;\n    });\n    return {\n          statusCode: response.status,\n          headers,\n          body: decodedBody,\n    };\n  }).then(onSuccess, onError);\n}\n\nfunction deserializeResponseHandler(realmId, info) {\n  const { id } = info;\n  if (typeof id !== \"number\") {\n    throw new Error(\"Expected a nummeric id\");\n  }\n  return {\n    onSuccess: function() {\n      callMethod(undefined, id, \"onSuccess\", Array.from(arguments));\n    },\n    onError: function() {\n      callMethod(undefined, id, \"onError\", Array.from(arguments));\n    },\n  }\n}\n\nregisterTypeConverter(objectTypes.FETCHRESPONSEHANDLER, deserializeResponseHandler);\n"]},"metadata":{},"sourceType":"module"}