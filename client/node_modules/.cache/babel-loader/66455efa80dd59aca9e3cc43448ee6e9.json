{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n/**\n * @param {array|object} args Arguments to clean.\n * @return {array|object} A recursive copy of the argument, with properties removed where value is undefined.\n */\n\nfunction cleanArguments(args) {\n  if (Array.isArray(args)) {\n    return args.map(cleanArguments);\n  } else if (typeof args === \"object\") {\n    const result = {};\n\n    for (const [k, v] of Object.entries(args)) {\n      if (typeof v !== \"undefined\") {\n        result[k] = v;\n      }\n    }\n\n    return result;\n  } else {\n    return args;\n  }\n}\n\nmodule.exports = {\n  cleanArguments,\n\n  /**\n   * Helper to wrap callback-taking C++ function into a Promise-returning JS function\n   * @example\n   * // floop() is a wrapper method on a type with a _floop C++ method.\n   * function floop(how, why) {\n   *   return promisify(cb => this._floop(how, why, cb));\n   * }\n   */\n  promisify(func) {\n    return new Promise((resolve, reject) => {\n      func((...cbargs) => {\n        if (cbargs.length < 1 || cbargs.length > 2) throw Error(`invalid cbargs length ${cbargs.length}`);\n        let error = cbargs[cbargs.length - 1];\n\n        if (error) {\n          reject(error);\n        } else if (cbargs.length == 2) {\n          resolve(cbargs[0]);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n\n  /**\n   * Determines the environment in which the package is being loaded.\n   * @returns A string representing the environment.\n   */\n  getEnvironment() {\n    // If process.release.name is an object with we're probably running in Node or Electron\n    // From: http://stackoverflow.com/a/24279593/1417293\n    if (typeof process === \"object\" && typeof process.release === \"object\" && process.release.name === \"node\") {\n      // Visual Studio Code defines the global.__debug__ object.\n      if (typeof global === \"object\" && global.__debug__) {\n        return \"vscodedebugger\";\n      }\n\n      return typeof process.versions === \"object\" && typeof process.versions.electron === \"string\" ? \"electron\" : \"node.js\";\n    } // When running via Jest, the jest object is defined.\n\n\n    if (typeof jest === \"object\") {\n      return \"node.js\";\n    }\n\n    if (typeof navigator === \"object\" && navigator.product === \"ReactNative\") {\n      // eslint-disable-line no-undef\n      // Visual Studio Code defines the global.__debug__ object.\n      if (typeof global !== \"undefined\" && global.__debug__) {\n        return \"vscodedebugger\";\n      } // Check if its in remote js debugging mode\n      // https://stackoverflow.com/a/50377644\n\n\n      if (typeof DedicatedWorkerGlobalScope !== \"undefined\") {\n        return \"chromedebugger\";\n      } // Otherwise, we must be in a \"normal\" react native situation.\n      // In that case, the Realm type should have been injected by the native code.\n      // If it hasn't, the user likely forgot to install the RealmJS CocoaPod\n\n\n      if (typeof Realm === \"undefined\") {\n        throw new Error(\"Missing Realm constructor. Did you run \\\"pod install\\\"? Please see https://realm.io/docs/react-native/latest/#missing-realm-constructor for troubleshooting\");\n      }\n\n      return \"reactnative\";\n    } // If we're not running in React Native but we already injected the Realm class,\n    // we are probably running in a pure jscore environment\n\n\n    if (typeof Realm !== \"undefined\") {\n      return \"jscore\";\n    } // Visual Studio Code defines the global.__debug__ object.\n\n\n    if (typeof global !== \"undefined\" && global.__debug__) {\n      return \"vscodedebugger\";\n    } // Finally, if the navigator.userAgent contains the string \"Chrome\", we're likely\n    // running via the chrome debugger, even if navigator.product isn't set to \"ReactNative\"\n\n\n    if (typeof navigator !== \"undefined\" && /Chrome/.test(navigator.userAgent)) {\n      // eslint-disable-line no-undef\n      return \"chromedebugger\";\n    }\n\n    throw new Error(\"Unknown execution context\");\n  },\n\n  /**\n   * @returns An object with names and versions of the various components making up the context.\n   */\n  getVersions() {\n    const packageJson = require(\"../package.json\");\n\n    const packageVersion = packageJson.version;\n    const environment = this.getEnvironment();\n\n    try {\n      if (environment === \"reactnative\") {\n        const {\n          Platform\n        } = require(\"react-native\");\n\n        return {\n          packageVersion,\n          platformContext: environment,\n          platformOs: Platform.OS,\n          // Android reports a number ...\n          platformVersion: `${Platform.Version}`\n        };\n      } else if (environment === \"node.js\" || environment === \"electron\") {\n        return {\n          packageVersion,\n          platformContext: environment,\n          platformOs: process.platform,\n          platformVersion: process.versions.electron || process.version\n        };\n      }\n    } catch (err) {\n      console.warn(\"Error getting versions:\", err.stack);\n    }\n\n    return {\n      packageVersion,\n      platformContext: environment,\n      platformOs: \"unknown\",\n      platformVersion: \"?.?.?\"\n    };\n  }\n\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/utils.js"],"names":["cleanArguments","args","Array","isArray","map","result","k","v","Object","entries","module","exports","promisify","func","Promise","resolve","reject","cbargs","length","Error","error","getEnvironment","process","release","name","global","__debug__","versions","electron","jest","navigator","product","DedicatedWorkerGlobalScope","Realm","test","userAgent","getVersions","packageJson","require","packageVersion","version","environment","Platform","platformContext","platformOs","OS","platformVersion","Version","platform","err","console","warn","stack"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\n/**\n * @param {array|object} args Arguments to clean.\n * @return {array|object} A recursive copy of the argument, with properties removed where value is undefined.\n */\nfunction cleanArguments(args) {\n    if (Array.isArray(args)) {\n        return args.map(cleanArguments);\n    } else if (typeof args === \"object\") {\n        const result = {};\n        for (const [k, v] of Object.entries(args)) {\n            if (typeof v !== \"undefined\") {\n                result[k] = v;\n            }\n        }\n        return result;\n    } else {\n        return args;\n    }\n}\n\nmodule.exports = {\n    cleanArguments,\n    \n    /**\n     * Helper to wrap callback-taking C++ function into a Promise-returning JS function\n     * @example\n     * // floop() is a wrapper method on a type with a _floop C++ method.\n     * function floop(how, why) {\n     *   return promisify(cb => this._floop(how, why, cb));\n     * }\n     */\n    promisify(func) {\n        return new Promise((resolve, reject) => {\n            func((...cbargs) => {\n                if (cbargs.length < 1 || cbargs.length > 2)\n                    throw Error(`invalid cbargs length ${cbargs.length}`)\n                let error = cbargs[cbargs.length-1];\n                if (error) {\n                    reject(error);\n                } else if (cbargs.length == 2) {\n                    resolve(cbargs[0]);\n                } else {\n                    resolve();\n                }\n            });\n        });\n    },\n\n    /**\n     * Determines the environment in which the package is being loaded.\n     * @returns A string representing the environment.\n     */\n    getEnvironment() {\n        // If process.release.name is an object with we're probably running in Node or Electron\n        // From: http://stackoverflow.com/a/24279593/1417293\n        if (typeof process === \"object\" && typeof process.release === \"object\" && process.release.name === \"node\") {\n    \n            // Visual Studio Code defines the global.__debug__ object.\n            if (typeof global === \"object\" && global.__debug__) {\n                return \"vscodedebugger\";\n            }\n    \n            return typeof process.versions === \"object\" && typeof process.versions.electron === \"string\" ? \"electron\" : \"node.js\";\n        }\n    \n        // When running via Jest, the jest object is defined.\n        if (typeof jest === \"object\") {\n            return \"node.js\";\n        }\n    \n        if (typeof navigator === \"object\" && navigator.product === \"ReactNative\") { // eslint-disable-line no-undef\n            // Visual Studio Code defines the global.__debug__ object.\n            if (typeof global !== \"undefined\" && global.__debug__) {\n                return \"vscodedebugger\"\n            }\n    \n            // Check if its in remote js debugging mode\n            // https://stackoverflow.com/a/50377644\n            if (typeof DedicatedWorkerGlobalScope !== \"undefined\") {\n                return \"chromedebugger\";\n            }\n    \n            // Otherwise, we must be in a \"normal\" react native situation.\n            // In that case, the Realm type should have been injected by the native code.\n            // If it hasn't, the user likely forgot to install the RealmJS CocoaPod\n            if (typeof Realm === \"undefined\") {\n                throw new Error(\"Missing Realm constructor. Did you run \\\"pod install\\\"? Please see https://realm.io/docs/react-native/latest/#missing-realm-constructor for troubleshooting\");\n            }\n    \n            return \"reactnative\";\n        }\n    \n        // If we're not running in React Native but we already injected the Realm class,\n        // we are probably running in a pure jscore environment\n        if (typeof Realm !== \"undefined\") {\n            return \"jscore\";\n        }\n    \n        // Visual Studio Code defines the global.__debug__ object.\n        if (typeof global !== \"undefined\" && global.__debug__) {\n            return \"vscodedebugger\";\n        }\n    \n        // Finally, if the navigator.userAgent contains the string \"Chrome\", we're likely\n        // running via the chrome debugger, even if navigator.product isn't set to \"ReactNative\"\n        if (typeof navigator !== \"undefined\" &&\n            /Chrome/.test(navigator.userAgent)) { // eslint-disable-line no-undef\n            return \"chromedebugger\";\n        }\n    \n        throw new Error(\"Unknown execution context\");\n    },\n\n    /**\n     * @returns An object with names and versions of the various components making up the context.\n     */\n    getVersions() {\n        const packageJson = require(\"../package.json\");\n        const packageVersion = packageJson.version;\n        const environment = this.getEnvironment();\n\n        try {\n            if (environment === \"reactnative\") {\n                const { Platform } = require(\"react-native\");\n                return {\n                    packageVersion,\n                    platformContext: environment,\n                    platformOs: Platform.OS,\n                    // Android reports a number ...\n                    platformVersion: `${Platform.Version}`,\n                };\n            } else if (environment === \"node.js\" || environment === \"electron\") {\n                return {\n                    packageVersion,\n                    platformContext: environment,\n                    platformOs: process.platform,\n                    platformVersion: process.versions.electron || process.version,\n                };\n            }\n        } catch (err) {\n            console.warn(\"Error getting versions:\", err.stack);\n        }\n        \n        return {\n            packageVersion,\n            platformContext: environment,\n            platformOs: \"unknown\",\n            platformVersion: \"?.?.?\",\n        };\n    },\n}\n"]},"metadata":{},"sourceType":"script"}