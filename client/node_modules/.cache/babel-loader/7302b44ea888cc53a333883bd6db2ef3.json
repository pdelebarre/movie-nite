{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieGenres from \"./components/Search/MovieGenres\"; // import DUMMY_MOVIES from \"./resources/dummy_movies\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n\n  const movieExists = id => {\n    return movies.some(movie => {\n      return movie.id === id;\n    });\n  };\n\n  const addMovie = movie => {\n    // console.log(`movie from App`, movie.poster_path);\n    if (movieExists(movie.id)) {\n      console.log(`duplicate!`, movie);\n      return;\n    }\n\n    let genres = MovieGenres.getGenres(movie.genre_ids);\n    let newMovie = { // id: movie.id, // uuidv4(),\n      // title: movie.title,\n      // genre: movie.genre, // TODO lookup genre\n      // poster_path: movie.poster_path,\n      ...movie,\n      genres: genres,\n      watched: false\n    };\n    setMovies([...movies, newMovie]);\n  };\n\n  const delMovie = id => {\n    setMovies(movies.filter(movie => movie.id !== id));\n  };\n\n  const markWatched = id => {\n    setMovies(movies.map(movie => movie.id === id ? { ...movie,\n      watched: !movie.watched\n    } : movie));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MovieGenres, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchMovie, {\n      onSelect: addMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Movies, {\n      movies: movies,\n      delMovie: delMovie,\n      markWatched: markWatched\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"m6SRVq9N0POigGpMlnh/6woD7xI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/App.js"],"names":["useState","Movies","SearchMovie","MovieGenres","App","movies","setMovies","movieExists","id","some","movie","addMovie","console","log","genres","getGenres","genre_ids","newMovie","watched","delMovie","filter","markWatched","map"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,WAAP,MAAwB,iCAAxB,C,CACA;;;;AAMA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMO,WAAW,GAAIC,EAAD,IAAQ;AAC1B,WAAOH,MAAM,CAACI,IAAP,CAAaC,KAAD,IAAW;AAC5B,aAAOA,KAAK,CAACF,EAAN,KAAaA,EAApB;AACD,KAFM,CAAP;AAGD,GAJD;;AAMA,QAAMG,QAAQ,GAAID,KAAD,IAAW;AAC1B;AAEA,QAAGH,WAAW,CAACG,KAAK,CAACF,EAAP,CAAd,EAA0B;AACxBI,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA0BH,KAA1B;AACA;AACD;;AAED,QAAII,MAAM,GAAGX,WAAW,CAACY,SAAZ,CAAsBL,KAAK,CAACM,SAA5B,CAAb;AAEA,QAAIC,QAAQ,GAAG,EACb;AACA;AACA;AACA;AACA,SAAGP,KALU;AAMbI,MAAAA,MAAM,EAACA,MANM;AAObI,MAAAA,OAAO,EAAE;AAPI,KAAf;AAUAZ,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYY,QAAZ,CAAD,CAAT;AACD,GArBD;;AAuBA,QAAME,QAAQ,GAAIX,EAAD,IAAQ;AACvBF,IAAAA,SAAS,CAACD,MAAM,CAACe,MAAP,CAAeV,KAAD,IAAWA,KAAK,CAACF,EAAN,KAAaA,EAAtC,CAAD,CAAT;AACD,GAFD;;AAIA,QAAMa,WAAW,GAAIb,EAAD,IAAQ;AAC1BF,IAAAA,SAAS,CACPD,MAAM,CAACiB,GAAP,CAAYZ,KAAD,IACTA,KAAK,CAACF,EAAN,KAAaA,EAAb,GAAkB,EAAE,GAAGE,KAAL;AAAYQ,MAAAA,OAAO,EAAE,CAACR,KAAK,CAACQ;AAA5B,KAAlB,GAA0DR,KAD5D,CADO,CAAT;AAKD,GAND;;AAQA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEC;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAEN,MAAhB;AAAwB,MAAA,QAAQ,EAAEc,QAAlC;AAA4C,MAAA,WAAW,EAAEE;AAAzD;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CApDD;;GAAMjB,G;;KAAAA,G;AAsDN,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport Movies from \"./components/Movies\";\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieGenres from \"./components/Search/MovieGenres\";\n// import DUMMY_MOVIES from \"./resources/dummy_movies\";\n\n\n\n\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n\n  const movieExists = (id) => {\n    return movies.some((movie) => {\n      return movie.id === id;\n    });\n  };\n\n  const addMovie = (movie) => {\n    // console.log(`movie from App`, movie.poster_path);\n\n    if(movieExists(movie.id)) {\n      console.log(`duplicate!`, movie);\n      return;\n    }\n\n    let genres = MovieGenres.getGenres(movie.genre_ids);\n\n    let newMovie = {\n      // id: movie.id, // uuidv4(),\n      // title: movie.title,\n      // genre: movie.genre, // TODO lookup genre\n      // poster_path: movie.poster_path,\n      ...movie,\n      genres:genres,\n      watched: false,\n    };\n\n    setMovies([...movies, newMovie]);\n  };\n\n  const delMovie = (id) => {\n    setMovies(movies.filter((movie) => movie.id !== id));\n  };\n\n  const markWatched = (id) => {\n    setMovies(\n      movies.map((movie) =>\n        movie.id === id ? { ...movie, watched: !movie.watched } : movie\n      )\n    );\n  };\n\n  return (\n    <div>\n      <MovieGenres/>\n      <SearchMovie onSelect={addMovie} />\n      {/* <MovieForm addMovie={addMovie} /> */}\n      <Movies movies={movies} delMovie={delMovie} markWatched={markWatched} />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}