{"ast":null,"code":"const {\n  normalKey\n} = require('../lib-util');\n/** Query building methods */\n\n\nconst methods = {\n  with: {\n    updateContext: (ctx, args) => {\n      ctx.with.push(args);\n    }\n  },\n  withRecursive: {\n    updateContext: (ctx, args) => {\n      ctx.recursive = true;\n      ctx.with.push(args);\n    }\n  },\n  from: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push({\n        args,\n        join: ', '\n      });\n    }\n  },\n  where: {\n    updateContext: (ctx, args) => {\n      ctx.whr.push(args);\n      ctx.target = ctx.whr;\n    }\n  },\n  return: {\n    updateContext: (ctx, args) => {\n      ctx.ret.push(Array.isArray(args) ? args.map(normalKey) : args);\n    }\n  },\n  distinct: {\n    getter: true,\n    updateContext: ctx => {\n      ctx.distinct = [];\n    }\n  },\n  groupBy: {\n    updateContext: (ctx, args) => {\n      ctx.grp.push(args);\n    }\n  },\n  having: {\n    updateContext: (ctx, args) => {\n      ctx.hav.push(args);\n      ctx.target = ctx.hav;\n    }\n  },\n  union: {\n    updateContext: (ctx, args) => {\n      ctx.setop.push({\n        type: 'union',\n        args\n      });\n    }\n  },\n  unionAll: {\n    updateContext: (ctx, args) => {\n      ctx.setop.push({\n        type: 'union all',\n        args\n      });\n    }\n  },\n  intersect: {\n    updateContext: (ctx, args) => {\n      ctx.setop.push({\n        type: 'intersect',\n        args\n      });\n    }\n  },\n  intersectAll: {\n    updateContext: (ctx, args) => {\n      ctx.setop.push({\n        type: 'intersect all',\n        args\n      });\n    }\n  },\n  except: {\n    updateContext: (ctx, args) => {\n      ctx.setop.push({\n        type: 'except',\n        args\n      });\n    }\n  },\n  exceptAll: {\n    updateContext: (ctx, args) => {\n      ctx.setop.push({\n        type: 'except all',\n        args\n      });\n    }\n  },\n  orderBy: {\n    updateContext: (ctx, args) => {\n      ctx.ord.push(args);\n    }\n  },\n  limit: {\n    updateContext: (ctx, args) => {\n      ctx.limit = args;\n    }\n  },\n  offset: {\n    updateContext: (ctx, args) => {\n      ctx.offset = args;\n    }\n  },\n  join: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push(ctx.join = {\n        args,\n        join: ' join '\n      });\n    }\n  },\n  leftJoin: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push(ctx.join = {\n        args,\n        join: ' left join '\n      });\n    }\n  },\n  rightJoin: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push(ctx.join = {\n        args,\n        join: ' right join '\n      });\n    }\n  },\n  fullJoin: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push(ctx.join = {\n        args,\n        join: ' full join '\n      });\n    }\n  },\n  crossJoin: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push(ctx.join = {\n        args,\n        join: ' cross join '\n      });\n    }\n  },\n  naturalJoin: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push(ctx.join = {\n        args,\n        join: ' natural join '\n      });\n    }\n  },\n  naturalLeftJoin: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push(ctx.join = {\n        args,\n        join: ' natural left join '\n      });\n    }\n  },\n  naturalRightJoin: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push(ctx.join = {\n        args,\n        join: ' natural right join '\n      });\n    }\n  },\n  naturalFullJoin: {\n    updateContext: (ctx, args) => {\n      ctx.frm.push(ctx.join = {\n        args,\n        join: ' natural full join '\n      });\n    }\n  },\n  on: {\n    updateContext: (ctx, args) => {\n      const {\n        join\n      } = ctx;\n\n      if (join.on) {\n        join.on.push(args);\n      } else {\n        ctx.target = join.on = [args];\n      }\n    }\n  },\n  using: {\n    updateContext: (ctx, args) => {\n      const {\n        join\n      } = ctx;\n\n      if (join.using) {\n        join.using.push(args);\n      } else {\n        join.using = [args];\n      }\n    }\n  },\n  delete: {\n    // getter: true,\n    updateContext: ctx => {\n      ctx.type = 'delete';\n    }\n  },\n  insert: {\n    updateContext: (ctx, args) => {\n      ctx.type = 'insert';\n      ctx.insert = args;\n    }\n  },\n  set: {\n    updateContext: (ctx, args) => {\n      ctx.type = 'update';\n      ctx.set.push(args);\n    }\n  },\n  express: {\n    updateContext: (ctx, args, count) => {\n      if (count.id === 0) {\n        count.id++;\n        ctx.frm.push(ctx.join = {\n          type: 'from',\n          args,\n          join: ', '\n        });\n      } else if (count.id === 1) {\n        count.id++;\n        ctx.whr.push(args);\n      } else if (count.id === 2) {\n        count.id++;\n        ctx.ret.push(args);\n      } else throw Error('Invalid express call');\n    }\n  }\n};\nmodule.exports = methods;","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-sq/methods.js"],"names":["normalKey","require","methods","with","updateContext","ctx","args","push","withRecursive","recursive","from","frm","join","where","whr","target","return","ret","Array","isArray","map","distinct","getter","groupBy","grp","having","hav","union","setop","type","unionAll","intersect","intersectAll","except","exceptAll","orderBy","ord","limit","offset","leftJoin","rightJoin","fullJoin","crossJoin","naturalJoin","naturalLeftJoin","naturalRightJoin","naturalFullJoin","on","using","delete","insert","set","express","count","id","Error","module","exports"],"mappings":"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","sourcesContent":["const { normalKey } = require('../lib-util')\n\n/** Query building methods */\nconst methods = {\n    with: {\n        updateContext: (ctx, args) => {\n            ctx.with.push(args)\n        }\n    },\n    withRecursive: {\n        updateContext: (ctx, args) => {\n            ctx.recursive = true\n            ctx.with.push(args)\n        }\n    },\n    from: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push({ args, join: ', ' })\n        }\n    },\n    where: {\n        updateContext: (ctx, args) => {\n            ctx.whr.push(args)\n            ctx.target = ctx.whr\n        }\n    },\n    return: {\n        updateContext: (ctx, args) => {\n            ctx.ret.push(Array.isArray(args) ? args.map(normalKey) : args)\n        }\n    },\n    distinct: {\n        getter: true,\n        updateContext: ctx => {\n            ctx.distinct = []\n        }\n    },\n    groupBy: {\n        updateContext: (ctx, args) => {\n            ctx.grp.push(args)\n        }\n    },\n    having: {\n        updateContext: (ctx, args) => {\n            ctx.hav.push(args)\n            ctx.target = ctx.hav\n        }\n    },\n    union: {\n        updateContext: (ctx, args) => {\n            ctx.setop.push({ type: 'union', args })\n        }\n    },\n    unionAll: {\n        updateContext: (ctx, args) => {\n            ctx.setop.push({ type: 'union all', args })\n        }\n    },\n    intersect: {\n        updateContext: (ctx, args) => {\n            ctx.setop.push({ type: 'intersect', args })\n        }\n    },\n    intersectAll: {\n        updateContext: (ctx, args) => {\n            ctx.setop.push({ type: 'intersect all', args })\n        }\n    },\n    except: {\n        updateContext: (ctx, args) => {\n            ctx.setop.push({ type: 'except', args })\n        }\n    },\n    exceptAll: {\n        updateContext: (ctx, args) => {\n            ctx.setop.push({ type: 'except all', args })\n        }\n    },\n    orderBy: {\n        updateContext: (ctx, args) => {\n            ctx.ord.push(args)\n        }\n    },\n    limit: {\n        updateContext: (ctx, args) => {\n            ctx.limit = args\n        }\n    },\n    offset: {\n        updateContext: (ctx, args) => {\n            ctx.offset = args\n        }\n    },\n    join: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push((ctx.join = { args, join: ' join ' }))\n        }\n    },\n    leftJoin: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push((ctx.join = { args, join: ' left join ' }))\n        }\n    },\n    rightJoin: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push((ctx.join = { args, join: ' right join ' }))\n        }\n    },\n    fullJoin: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push((ctx.join = { args, join: ' full join ' }))\n        }\n    },\n    crossJoin: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push((ctx.join = { args, join: ' cross join ' }))\n        }\n    },\n    naturalJoin: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push((ctx.join = { args, join: ' natural join ' }))\n        }\n    },\n    naturalLeftJoin: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push((ctx.join = { args, join: ' natural left join ' }))\n        }\n    },\n    naturalRightJoin: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push((ctx.join = { args, join: ' natural right join ' }))\n        }\n    },\n    naturalFullJoin: {\n        updateContext: (ctx, args) => {\n            ctx.frm.push((ctx.join = { args, join: ' natural full join ' }))\n        }\n    },\n    on: {\n        updateContext: (ctx, args) => {\n            const { join } = ctx\n            if (join.on) {\n                join.on.push(args)\n            } else {\n                ctx.target = join.on = [args]\n            }\n        }\n    },\n    using: {\n        updateContext: (ctx, args) => {\n            const { join } = ctx\n            if (join.using) {\n                join.using.push(args)\n            } else {\n                join.using = [args]\n            }\n        }\n    },\n    delete: {\n        // getter: true,\n        updateContext: ctx => {\n            ctx.type = 'delete'\n        }\n    },\n    insert: {\n        updateContext: (ctx, args) => {\n            ctx.type = 'insert'\n            ctx.insert = args\n        }\n    },\n    set: {\n        updateContext: (ctx, args) => {\n            ctx.type = 'update'\n            ctx.set.push(args)\n        }\n    },\n    express: {\n        updateContext: (ctx, args, count) => {\n            if (count.id === 0) {\n                count.id++\n                ctx.frm.push((ctx.join = { type: 'from', args, join: ', ' }))\n            } else if (count.id === 1) {\n                count.id++\n                ctx.whr.push(args)\n            } else if (count.id === 2) {\n                count.id++\n                ctx.ret.push(args)\n            } else throw Error('Invalid express call')\n        }\n    }\n}\n\nmodule.exports = methods;"]},"metadata":{},"sourceType":"script"}