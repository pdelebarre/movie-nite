{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\nimport { useEasybase } from \"easybase-react\";\nimport ebconfig from \"../ebconfig.js\";\nimport GENRES from \"../resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id); // console.log(\"genre\",result);\n\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nconst Main = () => {\n  _s();\n\n  const [refresh, setRefresh] = useState(false);\n  const {\n    db,\n    e,\n    useReturn\n  } = useEasybase();\n  const table = useEasybase({\n    ebconfig\n  }).db(\"MOVIES\");\n  const {\n    frame\n  } = useReturn(() => table.return().orderBy({\n    by: \"watched\",\n    sort: \"asc\"\n  }), [refresh]);\n\n  const headers = /*#__PURE__*/_jsxDEV(\"thead\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"watched\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"poster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n\n  const movieExists = async id => {\n    try {\n      let singleRecord = await table().return().where(e.eq(\"id\", id)).one();\n      return singleRecord !== null;\n    } catch (e) {}\n\n    return false;\n  };\n\n  const addMovie = async movie => {\n    // if (movieExists(movie.id)) {\n    //   console.log(`duplicate!`, movie);\n    //   return;\n    // }\n    let genres = getGenres(movie.genre_ids);\n    await table.insert({\n      title: movie.title,\n      genres: genres,\n      posterpath: movie.poster_path,\n      watched: false,\n      overview: movie.overview,\n      voteaverage: Number(movie.vote_average),\n      id: movie.id\n    }).one();\n    setRefresh(st => !st);\n  };\n\n  const delMovie = async id => {\n    let singleRecord = await table().return().where(e.eq(\"id\", id)).one();\n    await table.delete().where({\n      _key: singleRecord._key\n    }).one();\n    setRefresh(st => !st);\n  };\n\n  const markWatched = async id => {\n    let singleRecord = await table().return().where(e.eq(\"id\", id)).one();\n    let watched = singleRecord.watched;\n    await table.where({\n      _key: singleRecord._key\n    }).set({\n      watched: !watched\n    }).one();\n    setRefresh(st => !st);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(SearchMovie, {\n      onSelect: addMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.movies,\n      children: [headers, /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: frame.map((movie, index) => {\n          return /*#__PURE__*/_jsxDEV(Movie, {\n            movie: movie,\n            delMovie: delMovie,\n            markWatched: markWatched // index={movie[\"_key\"]}\n\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"qhZVIIoai2at+r7FtOGmhMDhz0w=\", true, function () {\n  return [useEasybase, useEasybase];\n});\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js"],"names":["React","useState","SearchMovie","classes","Movie","useEasybase","ebconfig","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","Main","refresh","setRefresh","db","e","useReturn","table","frame","return","orderBy","by","sort","headers","movieExists","singleRecord","where","eq","one","addMovie","movie","genres","insert","title","posterpath","poster_path","watched","overview","voteaverage","Number","vote_average","st","delMovie","delete","_key","markWatched","set","container","movies","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\n\nimport { useEasybase } from \"easybase-react\";\nimport ebconfig from \"../ebconfig.js\";\n\nimport GENRES from \"../resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    // console.log(\"genre\",result);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nconst Main = () => {\n  const [refresh, setRefresh] = useState(false);\n\n  const { db, e, useReturn } = useEasybase();\n  const table = useEasybase({ ebconfig }).db(\"MOVIES\");\n\n  const { frame } = useReturn(\n    () => table.return().orderBy({ by: \"watched\", sort: \"asc\" }),\n    [refresh]\n  );\n\n  const headers = (\n    <thead>\n      <tr>\n        <th>watched</th>\n        <th>title</th>\n        <th>genre</th>\n        <th>poster</th>\n        <th>delete</th>\n      </tr>\n    </thead>\n  );\n\n  const movieExists = async (id) => {\n    try{\n      let singleRecord = await table().return().where(e.eq(\"id\", id)).one();\n      return (singleRecord!==null);\n    } catch(e){\n\n    }\n    return false;\n  };\n\n  const addMovie = async (movie) => {\n    // if (movieExists(movie.id)) {\n    //   console.log(`duplicate!`, movie);\n    //   return;\n    // }\n\n    let genres = getGenres(movie.genre_ids);\n\n      await table\n        .insert({\n          title: movie.title,\n          genres: genres,\n          posterpath: movie.poster_path,\n          watched: false,\n          overview: movie.overview,\n          voteaverage: Number(movie.vote_average),\n          id: movie.id,\n        })\n        .one();\n\n\n    setRefresh((st) => !st);\n  };\n\n  const delMovie = async (id) => {\n    let singleRecord = await table().return().where(e.eq(\"id\", id)).one();\n\n    await table.delete().where({ _key: singleRecord._key }).one();\n\n    setRefresh((st) => !st);\n  };\n\n  const markWatched = async (id) => {\n    let singleRecord = await table().return().where(e.eq(\"id\", id)).one();\n    let watched = singleRecord.watched;\n\n    await table\n      .where({ _key: singleRecord._key })\n      .set({ watched: !watched })\n      .one();\n\n    setRefresh((st) => !st);\n  };\n\n  return (\n    <div className={classes.container}>\n      {/* TODO:fix first call and call when non empty */}\n      <SearchMovie onSelect={addMovie} />\n\n      <table className={classes.movies}>\n        {headers}\n        <tbody>\n          {frame.map((movie, index) => {\n            return (\n              <Movie\n                key={movie.id}\n                movie={movie}\n                delMovie={delMovie}\n                markWatched={markWatched}\n                // index={movie[\"_key\"]}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}