{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nimport { keys, objectTypes } from \"./constants\";\nimport { _anonymousRPC, _facebookRPC, _functionRPC, _googleRPC, _appleRPC, _emailPasswordRPC, _userApiKeyRPC, _serverApiKeyRPC, _jwtRPC } from \"./rpc\";\nexport default class Credentials {\n  static anonymous() {\n    return _anonymousRPC();\n  }\n\n  static facebook(token) {\n    return _facebookRPC(token);\n  }\n\n  static apple(token) {\n    return _appleRPC(token);\n  }\n\n  static emailPassword(email, password) {\n    return _emailPasswordRPC(email, password);\n  }\n\n  static userApiKey(user_key) {\n    return _userApiKeyRPC(user_key);\n  }\n\n  static function(payload) {\n    return _functionRPC(payload);\n  }\n\n  static serverApiKey(server_key) {\n    return _serverApiKeyRPC(server_key);\n  }\n\n  static google(authCode) {\n    return _googleRPC(authCode);\n  }\n\n  static jwt(token) {\n    return _jwtRPC(token);\n  }\n\n}\nexport function createCredentials(realmId, info) {\n  const credentialsProxy = Object.create(Credentials.prototype); // FIXME: This is currently necessary because util/createMethod expects\n  // the realm id to be present on any object that is used over rpc\n\n  credentialsProxy[keys.realm] = \"(Credentials object)\";\n  credentialsProxy[keys.id] = info.id;\n  credentialsProxy[keys.type] = objectTypes.CREDENTIALS;\n  Object.assign(credentialsProxy, info.data);\n  return credentialsProxy;\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/credentials.js"],"names":["keys","objectTypes","_anonymousRPC","_facebookRPC","_functionRPC","_googleRPC","_appleRPC","_emailPasswordRPC","_userApiKeyRPC","_serverApiKeyRPC","_jwtRPC","Credentials","anonymous","facebook","token","apple","emailPassword","email","password","userApiKey","user_key","function","payload","serverApiKey","server_key","google","authCode","jwt","createCredentials","realmId","info","credentialsProxy","Object","create","prototype","realm","id","type","CREDENTIALS","assign","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASA,IAAT,EAAeC,WAAf,QAAkC,aAAlC;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,YAAtC,EAAoDC,UAApD,EAAgEC,SAAhE,EAA2EC,iBAA3E,EAA8FC,cAA9F,EAA8GC,gBAA9G,EAAgIC,OAAhI,QAA+I,OAA/I;AAEA,eAAe,MAAMC,WAAN,CAAkB;AACb,SAATC,SAAS,GAAG;AACf,WAAOV,aAAa,EAApB;AACH;;AAEc,SAARW,QAAQ,CAACC,KAAD,EAAQ;AACnB,WAAOX,YAAY,CAACW,KAAD,CAAnB;AACH;;AAEW,SAALC,KAAK,CAACD,KAAD,EAAQ;AAChB,WAAOR,SAAS,CAACQ,KAAD,CAAhB;AACH;;AAEmB,SAAbE,aAAa,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAClC,WAAOX,iBAAiB,CAACU,KAAD,EAAQC,QAAR,CAAxB;AACH;;AAEgB,SAAVC,UAAU,CAACC,QAAD,EAAW;AACxB,WAAOZ,cAAc,CAACY,QAAD,CAArB;AACH;;AAEc,SAARC,QAAQ,CAACC,OAAD,EAAU;AACrB,WAAOlB,YAAY,CAACkB,OAAD,CAAnB;AACH;;AAEkB,SAAZC,YAAY,CAACC,UAAD,EAAa;AAC5B,WAAOf,gBAAgB,CAACe,UAAD,CAAvB;AACH;;AAEY,SAANC,MAAM,CAACC,QAAD,EAAW;AACpB,WAAOrB,UAAU,CAACqB,QAAD,CAAjB;AACH;;AAES,SAAHC,GAAG,CAACb,KAAD,EAAQ;AACd,WAAOJ,OAAO,CAACI,KAAD,CAAd;AACH;;AAnC4B;AAsCjC,OAAO,SAASc,iBAAT,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0C;AAC7C,QAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAActB,WAAW,CAACuB,SAA1B,CAAzB,CAD6C,CAG7C;AACA;;AACAH,EAAAA,gBAAgB,CAAC/B,IAAI,CAACmC,KAAN,CAAhB,GAA+B,sBAA/B;AAEAJ,EAAAA,gBAAgB,CAAC/B,IAAI,CAACoC,EAAN,CAAhB,GAA4BN,IAAI,CAACM,EAAjC;AACAL,EAAAA,gBAAgB,CAAC/B,IAAI,CAACqC,IAAN,CAAhB,GAA8BpC,WAAW,CAACqC,WAA1C;AACAN,EAAAA,MAAM,CAACO,MAAP,CAAcR,gBAAd,EAAgCD,IAAI,CAACU,IAArC;AAEA,SAAOT,gBAAP;AACH","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nimport { keys, objectTypes } from \"./constants\";\nimport { _anonymousRPC, _facebookRPC, _functionRPC, _googleRPC, _appleRPC, _emailPasswordRPC, _userApiKeyRPC, _serverApiKeyRPC, _jwtRPC } from \"./rpc\";\n\nexport default class Credentials {\n    static anonymous() {\n        return _anonymousRPC();\n    }\n\n    static facebook(token) {\n        return _facebookRPC(token);\n    }\n\n    static apple(token) {\n        return _appleRPC(token);\n    }\n\n    static emailPassword(email, password) {\n        return _emailPasswordRPC(email, password);\n    }\n\n    static userApiKey(user_key) {\n        return _userApiKeyRPC(user_key);\n    }\n\n    static function(payload) {\n        return _functionRPC(payload);\n    }\n\n    static serverApiKey(server_key) {\n        return _serverApiKeyRPC(server_key);\n    }\n\n    static google(authCode) {\n        return _googleRPC(authCode);\n    }\n\n    static jwt(token) {\n        return _jwtRPC(token);\n    }\n}\n\nexport function createCredentials(realmId, info) {\n    const credentialsProxy = Object.create(Credentials.prototype);\n\n    // FIXME: This is currently necessary because util/createMethod expects\n    // the realm id to be present on any object that is used over rpc\n    credentialsProxy[keys.realm] = \"(Credentials object)\";\n\n    credentialsProxy[keys.id] = info.id;\n    credentialsProxy[keys.type] = objectTypes.CREDENTIALS;\n    Object.assign(credentialsProxy, info.data);\n\n    return credentialsProxy;\n}"]},"metadata":{},"sourceType":"module"}