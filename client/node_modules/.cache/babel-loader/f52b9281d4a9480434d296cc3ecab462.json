{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, forwardRef, useState } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useMergedRef, useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { toaster } from '../../toaster';\nimport manageTableCellFocusInteraction from './manageTableCellFocusInteraction';\nimport { TableRowConsumer } from './TableRowContext';\n\nfunction executeArrowKeyOverride(override) {\n  if (!override) {\n    return;\n  }\n\n  if (typeof override === 'function') {\n    override();\n    return;\n  }\n\n  if (typeof override === 'string') {\n    document.querySelector(override).focus();\n    return;\n  } // This needs to be the node, not a React ref.\n\n\n  override.focus();\n}\n\nvar pseudoSelectors = {\n  _focus: '&[data-isselectable=\"true\"]:focus, &[aria-expanded=\"true\"][aria-haspopup=\"true\"]'\n};\nvar internalStyles = {\n  boxSizing: 'border-box',\n  flex: 1,\n  display: 'flex',\n  alignItems: 'center',\n  flexShrink: 0,\n  overflow: 'hidden'\n};\nvar TableCell = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TableCell(props, forwardedRef) {\n  var children = props.children,\n      _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      onClick = props.onClick,\n      onKeyPress = props.onKeyPress,\n      onKeyDown = props.onKeyDown,\n      isSelectable = props.isSelectable,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? -1 : _props$tabIndex,\n      className = props.className,\n      rightView = props.rightView,\n      arrowKeysOverrides = props.arrowKeysOverrides,\n      rest = _objectWithoutProperties(props, [\"children\", \"appearance\", \"onClick\", \"onKeyPress\", \"onKeyDown\", \"isSelectable\", \"tabIndex\", \"className\", \"rightView\", \"arrowKeysOverrides\"]);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      cellRef = _useState2[0],\n      setCellRef = _useState2[1];\n\n  var handleRef = useMergedRef(setCellRef, forwardedRef);\n\n  var handleKeyDown = function handleKeyDown(e) {\n    var _props$arrowKeysOverr = props.arrowKeysOverrides,\n        arrowKeysOverrides = _props$arrowKeysOverr === void 0 ? {} : _props$arrowKeysOverr;\n\n    if (isSelectable) {\n      var key = e.key;\n\n      if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {\n        e.preventDefault();\n\n        try {\n          // Support arrow key overrides.\n          var override = arrowKeysOverrides[key.slice('Arrow'.length).toLowerCase()];\n          if (override === false) return;\n          if (override) return executeArrowKeyOverride(override);\n          manageTableCellFocusInteraction(key, cellRef);\n        } catch (error) {\n          toaster.danger('Keyboard interaction not possible');\n          console.error('Keyboard interaction not possible', error);\n        }\n      } else if (key === 'Escape') {\n        if (cellRef && cellRef instanceof Node) cellRef.blur();\n      }\n    }\n\n    safeInvoke(onKeyDown, e);\n  };\n\n  var _useStyleConfig = useStyleConfig('TableCell', {\n    appearance: appearance\n  }, pseudoSelectors, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, [\"className\"]);\n\n  return /*#__PURE__*/React.createElement(TableRowConsumer, null, function (height) {\n    return /*#__PURE__*/React.createElement(Pane, _extends({\n      ref: handleRef,\n      height: height,\n      className: cx(themedClassName, className),\n      tabIndex: isSelectable ? tabIndex : undefined,\n      \"data-isselectable\": isSelectable,\n      onClick: onClick,\n      onKeyDown: handleKeyDown\n    }, boxProps, rest), children, rightView || null);\n  });\n}));\nTableCell.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /*\n   * Makes the TableCell focusable. Used by EditableCell.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * Optional node to be placed on the right side of the table cell.\n   * Useful for icons and icon buttons.\n   */\n  rightView: PropTypes.node,\n\n  /**\n   * Advanced arrow keys overrides for selectable cells.\n   * A string will be used as a selector.\n   */\n  arrowKeysOverrides: PropTypes.shape({\n    up: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    down: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    left: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    right: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])])\n  }),\n\n  /**\n   * Class name passed to the table cell.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n});\nexport default TableCell;","map":{"version":3,"sources":["../../../src/table/src/TableCell.js"],"names":["override","document","pseudoSelectors","_focus","internalStyles","boxSizing","flex","display","alignItems","flexShrink","overflow","TableCell","memo","forwardRef","children","appearance","onClick","onKeyPress","onKeyDown","isSelectable","tabIndex","className","rightView","arrowKeysOverrides","rest","props","cellRef","setCellRef","useState","handleRef","useMergedRef","handleKeyDown","key","e","executeArrowKeyOverride","manageTableCellFocusInteraction","toaster","console","safeInvoke","themedClassName","boxProps","useStyleConfig","cx","Pane","PropTypes","up","down","left","right","string"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useState } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { useMergedRef, useStyleConfig } from '../../hooks'\nimport { Pane } from '../../layers'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { toaster } from '../../toaster'\nimport manageTableCellFocusInteraction from './manageTableCellFocusInteraction'\nimport { TableRowConsumer } from './TableRowContext'\n\nfunction executeArrowKeyOverride(override) {\n  if (!override) {\n    return\n  }\n\n  if (typeof override === 'function') {\n    override()\n    return\n  }\n\n  if (typeof override === 'string') {\n    document.querySelector(override).focus()\n    return\n  }\n\n  // This needs to be the node, not a React ref.\n  override.focus()\n}\n\nconst pseudoSelectors = {\n  _focus: '&[data-isselectable=\"true\"]:focus, &[aria-expanded=\"true\"][aria-haspopup=\"true\"]'\n}\n\nconst internalStyles = {\n  boxSizing: 'border-box',\n  flex: 1,\n  display: 'flex',\n  alignItems: 'center',\n  flexShrink: 0,\n  overflow: 'hidden'\n}\n\nconst TableCell = memo(\n  forwardRef(function TableCell(props, forwardedRef) {\n    const {\n      children,\n      appearance = 'default',\n      onClick,\n      onKeyPress,\n      onKeyDown,\n      isSelectable,\n      tabIndex = -1,\n      className,\n      rightView,\n      arrowKeysOverrides,\n      ...rest\n    } = props\n\n    const [cellRef, setCellRef] = useState(null)\n    const handleRef = useMergedRef(setCellRef, forwardedRef)\n\n    const handleKeyDown = e => {\n      const { arrowKeysOverrides = {} } = props\n\n      if (isSelectable) {\n        const { key } = e\n        if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {\n          e.preventDefault()\n          try {\n            // Support arrow key overrides.\n            const override = arrowKeysOverrides[key.slice('Arrow'.length).toLowerCase()]\n            if (override === false) return\n            if (override) return executeArrowKeyOverride(override)\n\n            manageTableCellFocusInteraction(key, cellRef)\n          } catch (error) {\n            toaster.danger('Keyboard interaction not possible')\n            console.error('Keyboard interaction not possible', error)\n          }\n        } else if (key === 'Escape') {\n          if (cellRef && cellRef instanceof Node) cellRef.blur()\n        }\n      }\n\n      safeInvoke(onKeyDown, e)\n    }\n\n    const { className: themedClassName, ...boxProps } = useStyleConfig(\n      'TableCell',\n      { appearance },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    return (\n      <TableRowConsumer>\n        {height => {\n          return (\n            <Pane\n              ref={handleRef}\n              height={height}\n              className={cx(themedClassName, className)}\n              tabIndex={isSelectable ? tabIndex : undefined}\n              data-isselectable={isSelectable}\n              onClick={onClick}\n              onKeyDown={handleKeyDown}\n              {...boxProps}\n              {...rest}\n            >\n              {children}\n              {rightView || null}\n            </Pane>\n          )\n        }}\n      </TableRowConsumer>\n    )\n  })\n)\n\nTableCell.propTypes = {\n  /**\n   * Composes the Pane component as the base.\n   */\n  ...Pane.propTypes,\n\n  /*\n   * Makes the TableCell focusable. Used by EditableCell.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * Optional node to be placed on the right side of the table cell.\n   * Useful for icons and icon buttons.\n   */\n  rightView: PropTypes.node,\n\n  /**\n   * Advanced arrow keys overrides for selectable cells.\n   * A string will be used as a selector.\n   */\n  arrowKeysOverrides: PropTypes.shape({\n    up: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    down: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    left: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    right: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])])\n  }),\n\n  /**\n   * Class name passed to the table cell.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default TableCell\n"]},"metadata":{},"sourceType":"module"}