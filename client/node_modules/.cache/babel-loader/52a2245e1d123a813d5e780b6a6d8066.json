{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('../../lib-util'),\n    mapJoin = _require.mapJoin;\n\nmodule.exports = function (ctx, array) {\n  var keys = uniqueKeys(array);\n  return {\n    columns: columns(ctx, keys),\n    values: values(ctx, array, keys)\n  };\n}; // gets unique keys in object array\n\n\nvar uniqueKeys = function uniqueKeys(array) {\n  var keys = {};\n\n  var _iterator = _createForOfIteratorHelper(array),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var object = _step.value;\n\n      for (var key in object) {\n        keys[key] = true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return Object.keys(keys);\n}; // gets column string from unique keys of object array\n\n\nvar columns = mapJoin(function (ctx, arg) {\n  return ctx.mapKey(arg);\n}); // gets values string of object array\n\nvar values = function values(ctx, source, keys) {\n  var txt = 'values ';\n\n  for (var i = 0; i < source.length; ++i) {\n    if (i !== 0) txt += ', ';\n    txt += '(';\n    var object = source[i];\n\n    for (var j = 0; j < keys.length; ++j) {\n      if (j !== 0) txt += ', ';\n      txt += value(ctx, object[keys[j]]);\n    }\n\n    txt += ')';\n  }\n\n  return txt;\n};\n\nvar value = function value(ctx, arg) {\n  if (arg === undefined) return 'default';\n  return ctx.build(arg);\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-sq/common/values_array.js"],"names":["require","mapJoin","module","exports","ctx","array","keys","uniqueKeys","columns","values","object","key","Object","arg","mapKey","source","txt","i","length","j","value","undefined","build"],"mappings":";;eAAoBA,OAAO,CAAC,gBAAD,C;IAAnBC,O,YAAAA,O;;AAERC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC/B,MAAMC,IAAI,GAAGC,UAAU,CAACF,KAAD,CAAvB;AACA,SAAO;AACLG,IAAAA,OAAO,EAAEA,OAAO,CAACJ,GAAD,EAAME,IAAN,CADX;AAELG,IAAAA,MAAM,EAAEA,MAAM,CAACL,GAAD,EAAMC,KAAN,EAAaC,IAAb;AAFT,GAAP;AAID,CAND,C,CAQA;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAF,KAAK,EAAI;AAC1B,MAAMC,IAAI,GAAG,EAAb;;AAD0B,6CAELD,KAFK;AAAA;;AAAA;AAE1B,wDAA4B;AAAA,UAAjBK,MAAiB;;AAC1B,WAAK,IAAMC,GAAX,IAAkBD,MAAlB,EAA0B;AACxBJ,QAAAA,IAAI,CAACK,GAAD,CAAJ,GAAY,IAAZ;AACD;AACF;AANyB;AAAA;AAAA;AAAA;AAAA;;AAO1B,SAAOC,MAAM,CAACN,IAAP,CAAYA,IAAZ,CAAP;AACD,CARD,C,CAUA;;;AACA,IAAME,OAAO,GAAGP,OAAO,CAAC,UAACG,GAAD,EAAMS,GAAN;AAAA,SAAcT,GAAG,CAACU,MAAJ,CAAWD,GAAX,CAAd;AAAA,CAAD,CAAvB,C,CAEA;;AACA,IAAMJ,MAAM,GAAG,SAATA,MAAS,CAACL,GAAD,EAAMW,MAAN,EAAcT,IAAd,EAAuB;AACpC,MAAIU,GAAG,GAAG,SAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtC,QAAIA,CAAC,KAAK,CAAV,EAAaD,GAAG,IAAI,IAAP;AACbA,IAAAA,GAAG,IAAI,GAAP;AACA,QAAMN,MAAM,GAAGK,MAAM,CAACE,CAAD,CAArB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACY,MAAzB,EAAiC,EAAEC,CAAnC,EAAsC;AACpC,UAAIA,CAAC,KAAK,CAAV,EAAaH,GAAG,IAAI,IAAP;AACbA,MAAAA,GAAG,IAAII,KAAK,CAAChB,GAAD,EAAMM,MAAM,CAACJ,IAAI,CAACa,CAAD,CAAL,CAAZ,CAAZ;AACD;;AACDH,IAAAA,GAAG,IAAI,GAAP;AACD;;AACD,SAAOA,GAAP;AACD,CAbD;;AAeA,IAAMI,KAAK,GAAG,SAARA,KAAQ,CAAChB,GAAD,EAAMS,GAAN,EAAc;AAC1B,MAAIA,GAAG,KAAKQ,SAAZ,EAAuB,OAAO,SAAP;AACvB,SAAOjB,GAAG,CAACkB,KAAJ,CAAUT,GAAV,CAAP;AACD,CAHD","sourcesContent":["const { mapJoin } = require('../../lib-util')\n\nmodule.exports = (ctx, array) => {\n  const keys = uniqueKeys(array)\n  return {\n    columns: columns(ctx, keys),\n    values: values(ctx, array, keys)\n  }\n}\n\n// gets unique keys in object array\nconst uniqueKeys = array => {\n  const keys = {}\n  for (const object of array) {\n    for (const key in object) {\n      keys[key] = true\n    }\n  }\n  return Object.keys(keys)\n}\n\n// gets column string from unique keys of object array\nconst columns = mapJoin((ctx, arg) => ctx.mapKey(arg))\n\n// gets values string of object array\nconst values = (ctx, source, keys) => {\n  let txt = 'values '\n  for (let i = 0; i < source.length; ++i) {\n    if (i !== 0) txt += ', '\n    txt += '('\n    const object = source[i]\n    for (let j = 0; j < keys.length; ++j) {\n      if (j !== 0) txt += ', '\n      txt += value(ctx, object[keys[j]])\n    }\n    txt += ')'\n  }\n  return txt\n}\n\nconst value = (ctx, arg) => {\n  if (arg === undefined) return 'default'\n  return ctx.build(arg)\n}\n"]},"metadata":{},"sourceType":"script"}