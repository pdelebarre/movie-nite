{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import { useMongoDB } from \"./store/mongodb\";\n// import { useRealmApp } from \"./store/realm\";\n\nimport api from './api/queries';\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\";\nimport GENRES from \"./resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n  _s();\n\n  // const { loginApiKey, logOut, user } = useRealmApp();\n  // const { db } = useMongoDB();\n  // handleLogIn();\n  const [movies, setMovies] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async movie => {\n    console.log(`adding `, movie);\n    const genres = getGenres(movie.genre_ids);\n    const payload = {\n      id: movie.id,\n      title: movie.title,\n      genres: genres,\n      poster_path: movie.poster_path,\n      overview: movie.overview,\n      vote_average: Number(movie.vote_average),\n      watched: false\n    };\n    await api.insertMovie(payload).then(res => {\n      window.alert(`Movie inserted successfully`);\n    });\n  };\n\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      // if (user && db) {\n      //   const authoredMovies = await db.collection(\"movies\").find({},{sort:{ \"watched\": 1 }});\n      //   setMovies(authoredMovies);\n      // }\n      const authoredMovies = await api.getAllMovies();\n      setMovies(authoredMovies);\n    }\n\n    wrapMovieQuery();\n  }, [refresh]); // async function handleLogIn() {\n  //   await loginApiKey();\n  // }\n\n  const isDuplicate = async movie => {\n    const dupe = await api.getMovieById(movie.id); // db.collection(\"movies\").findOne({ id: movie.id });\n\n    console.log(\"dupe?\", dupe);\n    return !(dupe === null);\n  };\n\n  const onAddHandler = async movie => {\n    console.log(`in App, adding: `, movie); // let dupe = await isDuplicate(movie);\n    // dupe ? console.log(`dupe`, movie) : addMovie(movie);\n\n    addMovie(movie);\n    setRefresh(st => !st);\n  };\n\n  const onWatchedHandler = async movie => {\n    const payload = { ...movie\n    };\n    payload.watched = !payload.watched;\n    await api.updateMovieById(movie.id, payload).then(res => {\n      window.alert(`Movie updated successfully`);\n    }); // await db\n    //   .collection(\"movies\")\n    //   .updateOne({ id: movie.id }, { $set: { watched: !movie.watched } })\n    //   .then((result) =>\n    //     console.log(`Successfully flagged item with _id: ${result.insertedId}`)\n    //   )\n    //   .catch((err) => console.error(`Failed to flag item: ${err}`));\n  };\n\n  const onRemoveHandler = async movie => {\n    await api.deleteMovieById(movie.id).then(result => console.log(`Successfully deleted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to delete item: ${err}`));\n  }; // return user && db && user.state === \"active\" && (\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MovieList, {\n      movies: movies // user={user}\n      // logOut={logOut}\n      ,\n      onWatchedHandler: onWatchedHandler,\n      onRemoveHandler: onRemoveHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchMovie, {\n      onAddHandler: onAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ZICf+dYt4/Dl2kiIXEE58vJPRk0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/client/src/App.js"],"names":["React","useState","useEffect","api","SearchMovie","MovieList","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","App","movies","setMovies","refresh","setRefresh","addMovie","movie","genres","payload","title","poster_path","overview","vote_average","Number","watched","insertMovie","then","res","window","alert","wrapMovieQuery","authoredMovies","getAllMovies","isDuplicate","dupe","getMovieById","onAddHandler","st","onWatchedHandler","updateMovieById","onRemoveHandler","deleteMovieById","insertedId","catch","err","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import { useMongoDB } from \"./store/mongodb\";\n// import { useRealmApp } from \"./store/realm\";\nimport api from './api/queries';\n\nimport SearchMovie from \"./components/Movie/SearchMovie\";\nimport MovieList from \"./components/Movie/MovieList\";\n\n\nimport GENRES from \"./resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nfunction App() {\n\n  // const { loginApiKey, logOut, user } = useRealmApp();\n  // const { db } = useMongoDB();\n\n  // handleLogIn();\n\n  const [movies, setMovies] = useState([]);\n\n  const [refresh, setRefresh] = useState(false);\n\n  const addMovie = async (movie) => {\n    console.log(`adding `, movie);\n\n    const genres = getGenres(movie.genre_ids);\n\n    const payload = { id: movie.id,\n      title: movie.title,\n      genres: genres,\n      poster_path: movie.poster_path,\n      overview: movie.overview,\n      vote_average: Number(movie.vote_average),\n      watched: false }\n\n    await api.insertMovie(payload).then(res => {\n        window.alert(`Movie inserted successfully`)\n    })\n\n\n    \n  };\n\n  useEffect(() => {\n    async function wrapMovieQuery() {\n      // if (user && db) {\n      //   const authoredMovies = await db.collection(\"movies\").find({},{sort:{ \"watched\": 1 }});\n      //   setMovies(authoredMovies);\n      // }\n      const authoredMovies = await api.getAllMovies();\n      setMovies(authoredMovies);\n    }\n    wrapMovieQuery();\n  }, [refresh]);\n\n  // async function handleLogIn() {\n\n  //   await loginApiKey();\n  // }\n\n  const isDuplicate = async (movie) => {\n    const dupe = await api.getMovieById(movie.id)\n    \n    \n    // db.collection(\"movies\").findOne({ id: movie.id });\n    console.log(\"dupe?\", dupe);\n\n    return !(dupe === null);\n  };\n\n  const onAddHandler = async (movie) => {\n    console.log(`in App, adding: `, movie);\n    // let dupe = await isDuplicate(movie);\n    // dupe ? console.log(`dupe`, movie) : addMovie(movie);\n    addMovie(movie);\n    setRefresh((st) => !st);\n  };\n\n  const onWatchedHandler = async (movie) => {\n    const payload = {...movie}\n    payload.watched=!payload.watched\n\n    await api.updateMovieById(movie.id, payload).then(res => {\n        window.alert(`Movie updated successfully`)\n        \n    })\n\n    // await db\n    //   .collection(\"movies\")\n    //   .updateOne({ id: movie.id }, { $set: { watched: !movie.watched } })\n    //   .then((result) =>\n    //     console.log(`Successfully flagged item with _id: ${result.insertedId}`)\n    //   )\n    //   .catch((err) => console.error(`Failed to flag item: ${err}`));\n\n  };\n\n  const onRemoveHandler = async (movie) => {\n    await api.deleteMovieById(movie.id)\n    .then((result) =>\n        console.log(`Successfully deleted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to delete item: ${err}`));\n  };\n\n  // return user && db && user.state === \"active\" && (\n    return (\n    <div>\n      <MovieList\n        movies={movies}\n        // user={user}\n        // logOut={logOut}\n        onWatchedHandler={onWatchedHandler}\n        onRemoveHandler={onRemoveHandler}\n      />\n      <SearchMovie onAddHandler={onAddHandler} />\n\n    </div>\n  ) \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}