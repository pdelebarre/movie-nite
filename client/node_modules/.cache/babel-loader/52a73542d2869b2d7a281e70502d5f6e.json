{"ast":null,"code":"const {\n  buildTaggedTemplate\n} = require('../lib-util');\n\nconst dateToYYYYMMDD = d => [d.getFullYear(), ('0' + (d.getMonth() + 1)).slice(-2), ('0' + d.getDate()).slice(-2)].join('-');\n\nconst build = (ctx, arg) => {\n  // compiled expression string\n  if (arg.exp) return arg.exp; // tagged template argument\n\n  if (arg.tag) return buildTaggedTemplate(ctx, arg.tag); // expression, subquery or fragment argument\n\n  return ctx.build(arg.arg);\n};\n\nconst unaryPre = op => ({\n  minArgs: 1,\n  maxArgs: 1,\n  build: (ctx, args) => `(${op} ${build(ctx, args[0])})`\n});\n\nconst unaryPost = op => ({\n  minArgs: 1,\n  maxArgs: 1,\n  build: (ctx, args) => `(${build(ctx, args[0])} ${op})`\n});\n\nconst unaryFunction = op => ({\n  minArgs: 1,\n  maxArgs: 1,\n  build: (ctx, args) => `${op}(${build(ctx, args[0])})`\n});\n\nconst binary = op => ({\n  minArgs: 2,\n  maxArgs: 2,\n  build: (ctx, args) => `(${build(ctx, args[0])} ${op} ${build(ctx, args[1])})`\n});\n\nconst dateBinary = op => ({\n  minArgs: 2,\n  maxArgs: 2,\n  build: (ctx, args) => {\n    const inDate = args[1].arg;\n\n    if (typeof inDate.getMonth === 'function') {\n      args[1].arg = dateToYYYYMMDD(inDate);\n    }\n\n    return `date(${build(ctx, args[0])}, 'YYYY-MM-DD') ${op} ${build(ctx, args[1])}`;\n  }\n});\n\nconst ternary = (op1, op2) => ({\n  minArgs: 3,\n  maxArgs: 3,\n  build: (ctx, args) => `(${build(ctx, args[0])} ${op1} ${build(ctx, args[1])} ${op2} ${build(ctx, args[2])})`\n});\n\nconst nary = op => ({\n  minArgs: 1,\n  maxArgs: Number.MAX_SAFE_INTEGER,\n  build: (ctx, args) => {\n    if (args.length === 1) return build(ctx, args[0]);\n    let txt = '(';\n\n    for (let i = 0; i < args.length; ++i) {\n      if (i !== 0) txt += ` ${op} `;\n      txt += build(ctx, args[i]);\n    }\n\n    return txt + ')';\n  }\n});\n\nconst naryFunction = fn => ({\n  minArgs: 1,\n  maxArgs: Number.MAX_SAFE_INTEGER,\n  build: (ctx, args) => {\n    let txt = `${fn}(`;\n\n    for (let i = 0; i < args.length; ++i) {\n      if (i !== 0) txt += `, `;\n      txt += build(ctx, args[i]);\n    }\n\n    return txt + ')';\n  }\n});\n\nconst oneValue = {\n  minArgs: 1,\n  maxArgs: 1,\n  build: (ctx, args) => build(ctx, args[0])\n};\nconst compositeValue = {\n  minArgs: 1,\n  maxArgs: Number.MAX_SAFE_INTEGER,\n  build: (ctx, args) => {\n    if (args.length === 1) return build(ctx, args[0]);\n    let txt = '';\n\n    for (let i = 0; i < args.length; ++i) {\n      if (i !== 0) txt += ', ';\n      txt += build(ctx, args[i]);\n    }\n\n    return args.length > 1 ? `(${txt})` : txt;\n  }\n};\n\nconst buildValuesList = (ctx, values) => {\n  if (values.length === 0) throw Error('Error: .in operation values list empty');\n  let txt = '(';\n\n  for (let i = 0; i < values.length; ++i) {\n    if (i !== 0) txt += ', ';\n    txt += ctx.build(values[i]);\n  }\n\n  return txt + ')';\n};\n\nconst membership = op => ({\n  minArgs: 2,\n  maxArgs: 2,\n  build: (ctx, [arg1, arg2]) => `(${build(ctx, arg1)} ${op} ${Array.isArray(arg2.arg) ? buildValuesList(ctx, arg2.arg) : build(ctx, arg2)})`\n});\n\nconst quantifiedComparison = op => ({\n  minArgs: 2,\n  maxArgs: 2,\n  build: (ctx, args) => `(${build(ctx, args[0])} ${op}(${build(ctx, args[1])}))`\n});\n\nmodule.exports = {\n  build,\n  unaryFunction,\n  unaryPre,\n  unaryPost,\n  binary,\n  ternary,\n  nary,\n  naryFunction,\n  oneValue,\n  compositeValue,\n  membership,\n  quantifiedComparison,\n  dateBinary\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-expression/util.js"],"names":["buildTaggedTemplate","require","dateToYYYYMMDD","d","getFullYear","getMonth","slice","getDate","join","build","ctx","arg","exp","tag","unaryPre","op","minArgs","maxArgs","args","unaryPost","unaryFunction","binary","dateBinary","inDate","ternary","op1","op2","nary","Number","MAX_SAFE_INTEGER","length","txt","i","naryFunction","fn","oneValue","compositeValue","buildValuesList","values","Error","membership","arg1","arg2","Array","isArray","quantifiedComparison","module","exports"],"mappings":"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","sourcesContent":["const { buildTaggedTemplate } = require('../lib-util')\n\nconst dateToYYYYMMDD = d => [\n    d.getFullYear(),\n    ('0' + (d.getMonth() + 1)).slice(-2),\n    ('0' + d.getDate()).slice(-2)\n].join('-');\n\nconst build = (ctx, arg) => {\n    // compiled expression string\n    if (arg.exp) return arg.exp\n    // tagged template argument\n    if (arg.tag) return buildTaggedTemplate(ctx, arg.tag)\n    // expression, subquery or fragment argument\n    return ctx.build(arg.arg)\n}\n\nconst unaryPre = op => ({\n    minArgs: 1,\n    maxArgs: 1,\n    build: (ctx, args) => `(${op} ${build(ctx, args[0])})`\n})\n\nconst unaryPost = op => ({\n    minArgs: 1,\n    maxArgs: 1,\n    build: (ctx, args) => `(${build(ctx, args[0])} ${op})`\n})\n\nconst unaryFunction = op => ({\n    minArgs: 1,\n    maxArgs: 1,\n    build: (ctx, args) => `${op}(${build(ctx, args[0])})`\n})\n\nconst binary = op => ({\n    minArgs: 2,\n    maxArgs: 2,\n    build: (ctx, args) => `(${build(ctx, args[0])} ${op} ${build(ctx, args[1])})`\n})\n\nconst dateBinary = op => ({\n    minArgs: 2,\n    maxArgs: 2,\n    build: (ctx, args) => {\n        const inDate = args[1].arg;\n        if (typeof inDate.getMonth === 'function') {\n            args[1].arg = dateToYYYYMMDD(inDate);\n        }\n        return `date(${build(ctx, args[0])}, 'YYYY-MM-DD') ${op} ${build(ctx, args[1])}`\n    }\n})\n\n\nconst ternary = (op1, op2) => ({\n    minArgs: 3,\n    maxArgs: 3,\n    build: (ctx, args) =>\n        `(${build(ctx, args[0])} ${op1} ${build(ctx, args[1])} ${op2} ${build(\n            ctx,\n            args[2]\n        )})`\n})\n\nconst nary = op => ({\n    minArgs: 1,\n    maxArgs: Number.MAX_SAFE_INTEGER,\n    build: (ctx, args) => {\n        if (args.length === 1) return build(ctx, args[0])\n        let txt = '('\n        for (let i = 0; i < args.length; ++i) {\n            if (i !== 0) txt += ` ${op} `\n            txt += build(ctx, args[i])\n        }\n        return txt + ')'\n    }\n})\n\nconst naryFunction = fn => ({\n    minArgs: 1,\n    maxArgs: Number.MAX_SAFE_INTEGER,\n    build: (ctx, args) => {\n        let txt = `${fn}(`\n        for (let i = 0; i < args.length; ++i) {\n            if (i !== 0) txt += `, `\n            txt += build(ctx, args[i])\n        }\n        return txt + ')'\n    }\n})\n\nconst oneValue = {\n    minArgs: 1,\n    maxArgs: 1,\n    build: (ctx, args) => build(ctx, args[0])\n}\n\nconst compositeValue = {\n    minArgs: 1,\n    maxArgs: Number.MAX_SAFE_INTEGER,\n    build: (ctx, args) => {\n        if (args.length === 1) return build(ctx, args[0])\n        let txt = ''\n        for (let i = 0; i < args.length; ++i) {\n            if (i !== 0) txt += ', '\n            txt += build(ctx, args[i])\n        }\n        return args.length > 1 ? `(${txt})` : txt\n    }\n}\n\nconst buildValuesList = (ctx, values) => {\n    if (values.length === 0) throw Error('Error: .in operation values list empty')\n    let txt = '('\n    for (let i = 0; i < values.length; ++i) {\n        if (i !== 0) txt += ', '\n        txt += ctx.build(values[i])\n    }\n    return txt + ')'\n}\n\nconst membership = op => ({\n    minArgs: 2,\n    maxArgs: 2,\n    build: (ctx, [arg1, arg2]) =>\n        `(${build(ctx, arg1)} ${op} ${Array.isArray(arg2.arg)\n            ? buildValuesList(ctx, arg2.arg)\n            : build(ctx, arg2)\n        })`\n})\n\nconst quantifiedComparison = op => ({\n    minArgs: 2,\n    maxArgs: 2,\n    build: (ctx, args) => `(${build(ctx, args[0])} ${op}(${build(ctx, args[1])}))`\n})\n\nmodule.exports = {\n    build,\n    unaryFunction,\n    unaryPre,\n    unaryPost,\n    binary,\n    ternary,\n    nary,\n    naryFunction,\n    oneValue,\n    compositeValue,\n    membership,\n    quantifiedComparison,\n    dateBinary\n}\n"]},"metadata":{},"sourceType":"script"}