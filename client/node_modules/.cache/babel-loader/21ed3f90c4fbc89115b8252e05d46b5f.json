{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import SearchMovie from\"./Movie/SearchMovie\";import classes from\"./Movies.module.css\";import Movie from\"./Movie/Movie\";import{useEasybase}from\"easybase-react\";import ebconfig from\"../ebconfig.js\";import{useState,useEffect}from\"react\";import GENRES from\"../resources/genres\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var getGenres=function getGenres(genre_ids){var genres_array=[];genre_ids.map(function(id){var result=GENRES.find(function(genre){return genre.id===id;});// console.log(\"genre\",result);\ngenres_array.push(result.name);return genres_array;});console.log(genres_array.toString());return genres_array.toString();};var Main=function Main(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),refresh=_useState2[0],setRefresh=_useState2[1];var table=useEasybase({ebconfig:ebconfig}).db(\"MOVIES\");var _useEasybase=useEasybase(),db=_useEasybase.db,e=_useEasybase.e,useReturn=_useEasybase.useReturn;// 1st param is a function, returning a `db().return` instance without having been executed\n// 2nd param is dependencies that cause a re-fetch when changed\nvar _useReturn=useReturn(function(){return db().return();},[refresh]),frame=_useReturn.frame;console.log(\"List of movies\");console.log(frame);var headers=/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"watched\"}),/*#__PURE__*/_jsx(\"th\",{children:\"title\"}),/*#__PURE__*/_jsx(\"th\",{children:\"genre\"}),/*#__PURE__*/_jsx(\"th\",{children:\"poster\"}),/*#__PURE__*/_jsx(\"th\",{children:\"delete\"})]})});// use easybase's hooks to access the data.\n//   const { Frame, useFrameEffect, configureFrame, sync } = useEasybase();\n//   // const [movies, setMovies] = useState([]);\n//   useEffect(() => {\n//     // configureFrame sets up our Frame to access the appropriate list of data.\n//     // in this case, it's only showing the first 10 rows, for the table LISTOFDATA\n//     configureFrame({ limit: 10, offset: 0, tableName: \"MOVIES\" });\n//     sync();\n//     // this *should* be [configureFrame, sync] because we want the useEffect hook to fire if\n//     // those values change. However, easybase-react *always* updates them, so we need to pass\n//     // an empty array. And then disable the warning in the linter. I consider this a bug in easybase.\n//     // eslint-disable-next-line\n//   }, []);\n//   useFrameEffect(() => {\n//     console.log(\"Frame changed!\");\n//   });\n//   useEffect(() => {\n//     mounted();\n//   }, [])\n//   const { frame } = useReturn(() => {\n//     console.log(\"getting data...\");\n//     db(\"MOVIES\").return();\n//     console.log(`movies`, frame);\n//   }, []);\n//   const movieExists = (id) => {\n//     return movies.some((movie) => {\n//       return movie.id === id;\n//     });\n//   };\nvar addMovie=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(movie){var genres;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0://     if (movieExists(movie.id)) {\n//       console.log(`duplicate!`, movie);\n//       return;\n//     }\ngenres=getGenres(movie.genre_ids);_context.prev=1;_context.next=4;return table.insert({title:movie.title,genres:genres,posterpath:movie.poster_path,watched:false,overview:movie.overview,voteaverage:Number(movie.vote_average),id:movie.id}).one();case 4:_context.next=9;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](1);alert(\"Error on input format\");case 9:setRefresh(function(st){return!st;});case 10:case\"end\":return _context.stop();}}},_callee,null,[[1,6]]);}));return function addMovie(_x){return _ref.apply(this,arguments);};}();var delMovie=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id){var singleRecord;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return table.return().where(e.eq(\"id\",id)).one();case 2:singleRecord=_context2.sent;_context2.next=5;return table.delete().where({_key:singleRecord._key}).one();case 5:setRefresh(function(st){return!st;});case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function delMovie(_x2){return _ref2.apply(this,arguments);};}();var markWatched=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id){var singleRecord,watched;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return table.return().where(e.eq(\"id\",id)).one();case 2:singleRecord=_context3.sent;watched=singleRecord.watched;_context3.next=6;return table.where({_key:singleRecord._key}).set({watched:!watched}).one();case 6:setRefresh(function(st){return!st;});case 7:case\"end\":return _context3.stop();}}},_callee3);}));return function markWatched(_x3){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:classes.container,children:[/*#__PURE__*/_jsx(SearchMovie,{onSelect:addMovie}),/*#__PURE__*/_jsxs(\"table\",{className:classes.movies,children:[headers,/*#__PURE__*/_jsx(\"tbody\",{children:frame.map(function(movie,index){return/*#__PURE__*/_jsx(Movie,{movie:movie,delMovie:delMovie,markWatched:markWatched// index={movie[\"_key\"]}\n},movie.id);})})]})]});};export default Main;","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js"],"names":["React","SearchMovie","classes","Movie","useEasybase","ebconfig","useState","useEffect","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","Main","refresh","setRefresh","table","db","e","useReturn","return","frame","headers","addMovie","movie","genres","insert","title","posterpath","poster_path","watched","overview","voteaverage","Number","vote_average","one","alert","st","delMovie","where","eq","singleRecord","delete","_key","markWatched","set","container","movies","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\n\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\n\nimport { useEasybase } from \"easybase-react\";\n\nimport ebconfig from \"../ebconfig.js\";\n\nimport { useState, useEffect } from \"react\";\n\nimport GENRES from \"../resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    // console.log(\"genre\",result);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nconst Main = () => {\n  const [refresh, setRefresh] = useState(false);\n\n  const table = useEasybase({ ebconfig }).db(\"MOVIES\");\n\n  const { db, e, useReturn } = useEasybase();\n\n  // 1st param is a function, returning a `db().return` instance without having been executed\n  // 2nd param is dependencies that cause a re-fetch when changed\n  const { frame } = useReturn(() => db().return(), [refresh]);\n\n  console.log(\"List of movies\");\n  console.log(frame);\n\n  const headers = (\n    <thead>\n      <tr>\n        <th>watched</th>\n        <th>title</th>\n        <th>genre</th>\n        <th>poster</th>\n        <th>delete</th>\n      </tr>\n    </thead>\n  );\n\n  // use easybase's hooks to access the data.\n  //   const { Frame, useFrameEffect, configureFrame, sync } = useEasybase();\n  //   // const [movies, setMovies] = useState([]);\n\n  //   useEffect(() => {\n  //     // configureFrame sets up our Frame to access the appropriate list of data.\n  //     // in this case, it's only showing the first 10 rows, for the table LISTOFDATA\n  //     configureFrame({ limit: 10, offset: 0, tableName: \"MOVIES\" });\n  //     sync();\n  //     // this *should* be [configureFrame, sync] because we want the useEffect hook to fire if\n  //     // those values change. However, easybase-react *always* updates them, so we need to pass\n  //     // an empty array. And then disable the warning in the linter. I consider this a bug in easybase.\n  //     // eslint-disable-next-line\n  //   }, []);\n\n  //   useFrameEffect(() => {\n  //     console.log(\"Frame changed!\");\n  //   });\n\n  //   useEffect(() => {\n  //     mounted();\n  //   }, [])\n\n  //   const { frame } = useReturn(() => {\n  //     console.log(\"getting data...\");\n  //     db(\"MOVIES\").return();\n  //     console.log(`movies`, frame);\n  //   }, []);\n\n  //   const movieExists = (id) => {\n  //     return movies.some((movie) => {\n  //       return movie.id === id;\n  //     });\n  //   };\n\n  const addMovie = async (movie) => {\n    //     if (movieExists(movie.id)) {\n    //       console.log(`duplicate!`, movie);\n    //       return;\n    //     }\n\n    let genres = getGenres(movie.genre_ids);\n    try {\n      await table\n        .insert({\n          title: movie.title,\n          genres: genres,\n          posterpath: movie.poster_path,\n          watched: false,\n          overview: movie.overview,\n          voteaverage: Number(movie.vote_average),\n          id: movie.id,\n        })\n        .one();\n    } catch (_) {\n      alert(\"Error on input format\");\n    }\n\n    setRefresh((st) => !st);\n  };\n\n  const delMovie = async (id) => {\n    let singleRecord = await table.return().where(e.eq(\"id\", id)).one();\n\n    await table.delete().where({ _key: singleRecord._key }).one();\n\n    setRefresh((st) => !st);\n  };\n\n  const markWatched = async (id) => {\n    let singleRecord = await table.return().where(e.eq(\"id\", id)).one();\n    let watched = singleRecord.watched;\n\n    await table\n      .where({ _key: singleRecord._key })\n      .set({ watched: !watched })\n      .one();\n\n    setRefresh((st) => !st);\n  };\n\n  return (\n    <div className={classes.container}>\n      <SearchMovie onSelect={addMovie} />\n      {/* <Movies movies={Frame()} delMovie={delMovie} markWatched={markWatched} /> */}\n\n      <table className={classes.movies}>\n        {headers}\n        <tbody>\n          {frame.map((movie, index) => {\n            return (\n              <Movie\n                key={movie.id}\n                movie={movie}\n                delMovie={delMovie}\n                markWatched={markWatched}\n                // index={movie[\"_key\"]}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}