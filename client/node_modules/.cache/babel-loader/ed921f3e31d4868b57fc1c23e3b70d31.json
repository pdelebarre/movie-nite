{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\"use strict\";\n\nconst {\n  EJSON\n} = require(\"bson\");\n\nconst {\n  promisify\n} = require(\"./utils.js\");\n\nconst instanceMethods = {\n  registerUser(email, password) {\n    return promisify(cb => this._registerUser(email, password, cb));\n  },\n\n  confirmUser(token, token_id) {\n    return promisify(cb => this._confirmUser(token, token_id, cb));\n  },\n\n  resendConfirmationEmail(email) {\n    return promisify(cb => this._resendConfirmationEmail(email, cb));\n  },\n\n  sendResetPasswordEmail(email) {\n    return promisify(cb => this._sendResetPasswordEmail(email, cb));\n  },\n\n  resetPassword(password, token, token_id) {\n    return promisify(cb => this._resetPassword(password, token, token_id, cb));\n  },\n\n  callResetPasswordFunction(email, password, ...args) {\n    const stringifiedArgs = EJSON.stringify(args, {\n      relaxed: false\n    });\n    return promisify(cb => this._callResetPasswordFunction(email, password, stringifiedArgs, cb));\n  }\n\n};\nconst staticMethods = {// none\n};\nmodule.exports = {\n  static: staticMethods,\n  instance: instanceMethods\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/email-password-auth-methods.js"],"names":["EJSON","require","promisify","instanceMethods","registerUser","email","password","cb","_registerUser","confirmUser","token","token_id","_confirmUser","resendConfirmationEmail","_resendConfirmationEmail","sendResetPasswordEmail","_sendResetPasswordEmail","resetPassword","_resetPassword","callResetPasswordFunction","args","stringifiedArgs","stringify","relaxed","_callResetPasswordFunction","staticMethods","module","exports","static","instance"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,MAAD,CAAzB;;AAEA,MAAM;AAACC,EAAAA;AAAD,IAAcD,OAAO,CAAC,YAAD,CAA3B;;AAEA,MAAME,eAAe,GAAG;AACpBC,EAAAA,YAAY,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC1B,WAAOJ,SAAS,CAACK,EAAE,IAAI,KAAKC,aAAL,CAAmBH,KAAnB,EAA0BC,QAA1B,EAAoCC,EAApC,CAAP,CAAhB;AACH,GAHmB;;AAKpBE,EAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACzB,WAAOT,SAAS,CAACK,EAAE,IAAI,KAAKK,YAAL,CAAkBF,KAAlB,EAAyBC,QAAzB,EAAmCJ,EAAnC,CAAP,CAAhB;AACH,GAPmB;;AASpBM,EAAAA,uBAAuB,CAACR,KAAD,EAAQ;AAC3B,WAAOH,SAAS,CAACK,EAAE,IAAI,KAAKO,wBAAL,CAA8BT,KAA9B,EAAqCE,EAArC,CAAP,CAAhB;AACH,GAXmB;;AAapBQ,EAAAA,sBAAsB,CAACV,KAAD,EAAQ;AAC1B,WAAOH,SAAS,CAACK,EAAE,IAAI,KAAKS,uBAAL,CAA6BX,KAA7B,EAAoCE,EAApC,CAAP,CAAhB;AACH,GAfmB;;AAiBpBU,EAAAA,aAAa,CAACX,QAAD,EAAWI,KAAX,EAAkBC,QAAlB,EAA4B;AACrC,WAAOT,SAAS,CAACK,EAAE,IAAI,KAAKW,cAAL,CAAoBZ,QAApB,EAA8BI,KAA9B,EAAqCC,QAArC,EAA+CJ,EAA/C,CAAP,CAAhB;AACH,GAnBmB;;AAqBpBY,EAAAA,yBAAyB,CAACd,KAAD,EAAQC,QAAR,EAAkB,GAAGc,IAArB,EAA2B;AAChD,UAAMC,eAAe,GAAGrB,KAAK,CAACsB,SAAN,CAAgBF,IAAhB,EAAsB;AAAEG,MAAAA,OAAO,EAAE;AAAX,KAAtB,CAAxB;AACA,WAAOrB,SAAS,CAACK,EAAE,IAAI,KAAKiB,0BAAL,CAAgCnB,KAAhC,EAAuCC,QAAvC,EAAiDe,eAAjD,EAAkEd,EAAlE,CAAP,CAAhB;AACH;;AAxBmB,CAAxB;AA2BA,MAAMkB,aAAa,GAAG,CAClB;AADkB,CAAtB;AAIAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAEH,aADK;AAEbI,EAAAA,QAAQ,EAAE1B;AAFG,CAAjB","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\"use strict\";\n\nconst { EJSON } = require(\"bson\");\n\nconst {promisify} = require(\"./utils.js\");\n\nconst instanceMethods = {\n    registerUser(email, password) {\n        return promisify(cb => this._registerUser(email, password, cb));\n    },\n\n    confirmUser(token, token_id) {\n        return promisify(cb => this._confirmUser(token, token_id, cb));\n    },\n\n    resendConfirmationEmail(email) {\n        return promisify(cb => this._resendConfirmationEmail(email, cb));\n    },\n\n    sendResetPasswordEmail(email) {\n        return promisify(cb => this._sendResetPasswordEmail(email, cb));\n    },\n\n    resetPassword(password, token, token_id) {\n        return promisify(cb => this._resetPassword(password, token, token_id, cb));\n    },\n\n    callResetPasswordFunction(email, password, ...args) {\n        const stringifiedArgs = EJSON.stringify(args, { relaxed: false });\n        return promisify(cb => this._callResetPasswordFunction(email, password, stringifiedArgs, cb));\n    },\n};\n\nconst staticMethods = {\n    // none\n};\n\nmodule.exports = {\n    static: staticMethods,\n    instance: instanceMethods,\n};\n"]},"metadata":{},"sourceType":"script"}