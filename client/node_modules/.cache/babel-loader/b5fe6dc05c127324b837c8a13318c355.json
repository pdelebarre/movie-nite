{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n'use strict';\n\nimport { keys, objectTypes } from './constants';\nimport { getterForProperty, createMethods } from './util';\nimport { deserialize } from './rpc';\nexport default class Session {}\nObject.defineProperties(Session.prototype, {\n  connectionState: {\n    get: getterForProperty('connectionState', false)\n  },\n  state: {\n    get: getterForProperty('state', false)\n  },\n  url: {\n    get: getterForProperty('url', false)\n  }\n});\ncreateMethods(Session.prototype, objectTypes.SESSION, ['_refreshAccessToken', '_simulateError', 'addProgressNotification', 'removeProgressNotification', 'addConnectionNotification', 'removeConnectionNotification', 'isConnected', 'resume', 'pause', '_waitForDownloadCompletion', '_waitForUploadCompletion']);\nexport function createSession(realmId, info) {\n  let sessionProxy = Object.create(Session.prototype); // FIXME: This is currently necessary because util/createMethod expects\n  // the realm id to be present on any object that is used over rpc\n\n  sessionProxy[keys.realm] = \"(Session object)\";\n\n  if (info && info.data && info.data.user) {\n    sessionProxy[keys.id] = info.id;\n    sessionProxy[keys.type] = objectTypes.SESSION;\n    sessionProxy.user = deserialize(realmId, info.data.user);\n    sessionProxy.config = deserialize(realmId, info.data.config);\n  }\n\n  return sessionProxy;\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/session.js"],"names":["keys","objectTypes","getterForProperty","createMethods","deserialize","Session","Object","defineProperties","prototype","connectionState","get","state","url","SESSION","createSession","realmId","info","sessionProxy","create","realm","data","user","id","type","config"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASA,IAAT,EAAeC,WAAf,QAAkC,aAAlC;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,QAAjD;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,eAAe,MAAMC,OAAN,CAAc;AAI7BC,MAAM,CAACC,gBAAP,CAAwBF,OAAO,CAACG,SAAhC,EAA2C;AACvCC,EAAAA,eAAe,EAAE;AAAEC,IAAAA,GAAG,EAAER,iBAAiB,CAAC,iBAAD,EAAoB,KAApB;AAAxB,GADsB;AAEvCS,EAAAA,KAAK,EAAE;AAAED,IAAAA,GAAG,EAAER,iBAAiB,CAAC,OAAD,EAAU,KAAV;AAAxB,GAFgC;AAGvCU,EAAAA,GAAG,EAAE;AAAEF,IAAAA,GAAG,EAAER,iBAAiB,CAAC,KAAD,EAAQ,KAAR;AAAxB;AAHkC,CAA3C;AAMAC,aAAa,CAACE,OAAO,CAACG,SAAT,EAAoBP,WAAW,CAACY,OAAhC,EAAyC,CAClD,qBADkD,EAElD,gBAFkD,EAGlD,yBAHkD,EAIlD,4BAJkD,EAKlD,2BALkD,EAMlD,8BANkD,EAOlD,aAPkD,EAQlD,QARkD,EASlD,OATkD,EAUlD,4BAVkD,EAWlD,0BAXkD,CAAzC,CAAb;AAcA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;AACzC,MAAIC,YAAY,GAAGX,MAAM,CAACY,MAAP,CAAcb,OAAO,CAACG,SAAtB,CAAnB,CADyC,CAGzC;AACA;;AACAS,EAAAA,YAAY,CAACjB,IAAI,CAACmB,KAAN,CAAZ,GAA2B,kBAA3B;;AAEA,MAAIH,IAAI,IAAIA,IAAI,CAACI,IAAb,IAAqBJ,IAAI,CAACI,IAAL,CAAUC,IAAnC,EAAyC;AACrCJ,IAAAA,YAAY,CAACjB,IAAI,CAACsB,EAAN,CAAZ,GAAwBN,IAAI,CAACM,EAA7B;AACAL,IAAAA,YAAY,CAACjB,IAAI,CAACuB,IAAN,CAAZ,GAA0BtB,WAAW,CAACY,OAAtC;AACAI,IAAAA,YAAY,CAACI,IAAb,GAAoBjB,WAAW,CAACW,OAAD,EAAUC,IAAI,CAACI,IAAL,CAAUC,IAApB,CAA/B;AACAJ,IAAAA,YAAY,CAACO,MAAb,GAAsBpB,WAAW,CAACW,OAAD,EAAUC,IAAI,CAACI,IAAL,CAAUI,MAApB,CAAjC;AACH;;AAED,SAAOP,YAAP;AACH","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport { keys, objectTypes } from './constants';\nimport { getterForProperty, createMethods } from './util';\nimport { deserialize } from './rpc';\n\nexport default class Session {\n\n}\n\nObject.defineProperties(Session.prototype, {\n    connectionState: { get: getterForProperty('connectionState', false) },\n    state: { get: getterForProperty('state', false) },\n    url: { get: getterForProperty('url', false) },\n});\n\ncreateMethods(Session.prototype, objectTypes.SESSION, [\n    '_refreshAccessToken',\n    '_simulateError',\n    'addProgressNotification',\n    'removeProgressNotification',\n    'addConnectionNotification',\n    'removeConnectionNotification',\n    'isConnected',\n    'resume',\n    'pause',\n    '_waitForDownloadCompletion',\n    '_waitForUploadCompletion',\n]);\n\nexport function createSession(realmId, info) {\n    let sessionProxy = Object.create(Session.prototype);\n\n    // FIXME: This is currently necessary because util/createMethod expects\n    // the realm id to be present on any object that is used over rpc\n    sessionProxy[keys.realm] = \"(Session object)\";\n\n    if (info && info.data && info.data.user) {\n        sessionProxy[keys.id] = info.id;\n        sessionProxy[keys.type] = objectTypes.SESSION;\n        sessionProxy.user = deserialize(realmId, info.data.user);\n        sessionProxy.config = deserialize(realmId, info.data.config);\n    }\n\n    return sessionProxy;\n}\n"]},"metadata":{},"sourceType":"module"}