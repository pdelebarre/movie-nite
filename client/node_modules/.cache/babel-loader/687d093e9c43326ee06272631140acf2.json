{"ast":null,"code":"var _jsxFileName = \"/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\nimport { useEasybase } from \"easybase-react\";\nimport ebconfig from \"../ebconfig.js\";\nimport GENRES from \"../resources/genres\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getGenres = genre_ids => {\n  let genres_array = [];\n  genre_ids.map(id => {\n    const result = GENRES.find(genre => genre.id === id); // console.log(\"genre\",result);\n\n    genres_array.push(result.name);\n    return genres_array;\n  });\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nconst Main = () => {\n  _s();\n\n  const [refresh, setRefresh] = useState(false);\n  const table = useEasybase({\n    ebconfig\n  }).db(\"MOVIES\");\n  const {\n    db,\n    e,\n    useReturn\n  } = useEasybase();\n  const {\n    frame\n  } = useReturn(() => db().return(), [refresh]);\n  console.log(\"List of movies\");\n  console.log(frame);\n\n  const headers = /*#__PURE__*/_jsxDEV(\"thead\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"watched\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"poster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n\n  const addMovie = async movie => {\n    //     if (movieExists(movie.id)) {\n    //       console.log(`duplicate!`, movie);\n    //       return;\n    //     }\n    let genres = getGenres(movie.genre_ids);\n\n    try {\n      await table.insert({\n        title: movie.title,\n        genres: genres,\n        posterpath: movie.poster_path,\n        watched: false,\n        overview: movie.overview,\n        voteaverage: Number(movie.vote_average),\n        id: movie.id\n      }).one();\n    } catch (_) {\n      alert(\"Error on input format\");\n    }\n\n    setRefresh(st => !st);\n  };\n\n  const delMovie = async id => {\n    let singleRecord = await table.return().where(e.eq(\"id\", id)).one();\n    await table.delete().where({\n      _key: singleRecord._key\n    }).one();\n    setRefresh(st => !st);\n  };\n\n  const markWatched = async id => {\n    let singleRecord = await table.return().where(e.eq(\"id\", id)).one();\n    let watched = singleRecord.watched;\n    await table.where({\n      _key: singleRecord._key\n    }).set({\n      watched: !watched\n    }).one();\n    setRefresh(st => !st);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(SearchMovie, {\n      onSelect: addMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.movies,\n      children: [headers, /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: frame.map((movie, index) => {\n          return /*#__PURE__*/_jsxDEV(Movie, {\n            movie: movie,\n            delMovie: delMovie,\n            markWatched: markWatched // index={movie[\"_key\"]}\n\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"wY68LVVTBtZS4goVhPCXXDaSs+A=\", true, function () {\n  return [useEasybase, useEasybase];\n});\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/src/components/Main.js"],"names":["React","useState","SearchMovie","classes","Movie","useEasybase","ebconfig","GENRES","getGenres","genre_ids","genres_array","map","id","result","find","genre","push","name","console","log","toString","Main","refresh","setRefresh","table","db","e","useReturn","frame","return","headers","addMovie","movie","genres","insert","title","posterpath","poster_path","watched","overview","voteaverage","Number","vote_average","one","_","alert","st","delMovie","singleRecord","where","eq","delete","_key","markWatched","set","container","movies","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport SearchMovie from \"./Movie/SearchMovie\";\nimport classes from \"./Movies.module.css\";\nimport Movie from \"./Movie/Movie\";\n\nimport { useEasybase } from \"easybase-react\";\nimport ebconfig from \"../ebconfig.js\";\n\nimport GENRES from \"../resources/genres\";\n\nconst getGenres = (genre_ids) => {\n  let genres_array = [];\n  genre_ids.map((id) => {\n    const result = GENRES.find((genre) => genre.id === id);\n    // console.log(\"genre\",result);\n    genres_array.push(result.name);\n    return genres_array;\n  });\n\n  console.log(genres_array.toString());\n  return genres_array.toString();\n};\n\nconst Main = () => {\n  const [refresh, setRefresh] = useState(false);\n\n  const table = useEasybase({ ebconfig }).db(\"MOVIES\");\n\n  const { db, e, useReturn } = useEasybase();\n\n  const { frame } = useReturn(() => db().return(), [refresh]);\n\n  console.log(\"List of movies\");\n  console.log(frame);\n\n  const headers = (\n    <thead>\n      <tr>\n        <th>watched</th>\n        <th>title</th>\n        <th>genre</th>\n        <th>poster</th>\n        <th>delete</th>\n      </tr>\n    </thead>\n  );\n\n\n\n  const addMovie = async (movie) => {\n    //     if (movieExists(movie.id)) {\n    //       console.log(`duplicate!`, movie);\n    //       return;\n    //     }\n\n    let genres = getGenres(movie.genre_ids);\n    try {\n      await table\n        .insert({\n          title: movie.title,\n          genres: genres,\n          posterpath: movie.poster_path,\n          watched: false,\n          overview: movie.overview,\n          voteaverage: Number(movie.vote_average),\n          id: movie.id,\n        })\n        .one();\n    } catch (_) {\n      alert(\"Error on input format\");\n    }\n\n    setRefresh((st) => !st);\n  };\n\n  const delMovie = async (id) => {\n    let singleRecord = await table.return().where(e.eq(\"id\", id)).one();\n\n    await table.delete().where({ _key: singleRecord._key }).one();\n\n    setRefresh((st) => !st);\n  };\n\n  const markWatched = async (id) => {\n    let singleRecord = await table.return().where(e.eq(\"id\", id)).one();\n    let watched = singleRecord.watched;\n\n    await table\n      .where({ _key: singleRecord._key })\n      .set({ watched: !watched })\n      .one();\n\n    setRefresh((st) => !st);\n  };\n\n  return (\n    <div className={classes.container}>\n      <SearchMovie onSelect={addMovie} />\n   \n      <table className={classes.movies}>\n        {headers}\n        <tbody>\n          {frame.map((movie, index) => {\n            return (\n              <Movie\n                key={movie.id}\n                movie={movie}\n                delMovie={delMovie}\n                markWatched={markWatched}\n                // index={movie[\"_key\"]}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}