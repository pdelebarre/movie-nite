{"ast":null,"code":"const {\n  isTaggedTemplate,\n  buildTaggedTemplate\n} = require('./tagged_template');\n\nconst isObject = arg => arg && arg.constructor.prototype === Object.prototype;\n\nconst buildCall = callbackfn => (ctx, args) => isTaggedTemplate(args) ? buildTaggedTemplate(ctx, args) : callbackfn(ctx, args);\n\nconst mapJoin = (callbackfn, separator = ', ') => (ctx, args) => {\n  let txt = '';\n\n  for (let i = 0; i < args.length; ++i) {\n    if (i !== 0) txt += separator;\n    txt += callbackfn(ctx, args[i]);\n  }\n\n  return txt;\n};\n\nconst mapJoinWrap = (callbackfn, separator = ', ', open = '(', close = ')') => (ctx, args) => {\n  let txt = open;\n\n  for (let i = 0; i < args.length; ++i) {\n    if (i !== 0) txt += separator;\n    txt += callbackfn(ctx, args[i]);\n  }\n\n  return txt + close;\n};\n\nconst objectMapJoin = (callbackfn, separator = ', ') => (ctx, object) => {\n  let txt = '';\n  const keys = Object.keys(object);\n\n  for (let i = 0; i < keys.length; ++i) {\n    if (i !== 0) txt += separator;\n    const key = keys[i];\n    txt += callbackfn(ctx, key, object[key]);\n  }\n\n  return txt;\n};\n\nmodule.exports = {\n  isObject,\n  buildCall,\n  mapJoin,\n  mapJoinWrap,\n  objectMapJoin\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/lib-util/build_utils.js"],"names":["isTaggedTemplate","buildTaggedTemplate","require","isObject","arg","constructor","prototype","Object","buildCall","callbackfn","ctx","args","mapJoin","separator","txt","i","length","mapJoinWrap","open","close","objectMapJoin","object","keys","key","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAA4CC,OAAO,CAAC,mBAAD,CAAzD;;AAEA,MAAMC,QAAQ,GAAGC,GAAG,IAAIA,GAAG,IAAIA,GAAG,CAACC,WAAJ,CAAgBC,SAAhB,KAA8BC,MAAM,CAACD,SAApE;;AAEA,MAAME,SAAS,GAAGC,UAAU,IAAI,CAACC,GAAD,EAAMC,IAAN,KAC9BX,gBAAgB,CAACW,IAAD,CAAhB,GACIV,mBAAmB,CAACS,GAAD,EAAMC,IAAN,CADvB,GAEIF,UAAU,CAACC,GAAD,EAAMC,IAAN,CAHhB;;AAKA,MAAMC,OAAO,GAAG,CAACH,UAAD,EAAaI,SAAS,GAAG,IAAzB,KAAkC,CAACH,GAAD,EAAMC,IAAN,KAAe;AAC/D,MAAIG,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC,QAAIA,CAAC,KAAK,CAAV,EAAaD,GAAG,IAAID,SAAP;AACbC,IAAAA,GAAG,IAAIL,UAAU,CAACC,GAAD,EAAMC,IAAI,CAACI,CAAD,CAAV,CAAjB;AACD;;AACD,SAAOD,GAAP;AACD,CAPD;;AASA,MAAMG,WAAW,GAAG,CAACR,UAAD,EAAaI,SAAS,GAAG,IAAzB,EAA+BK,IAAI,GAAG,GAAtC,EAA2CC,KAAK,GAAG,GAAnD,KAA2D,CAC7ET,GAD6E,EAE7EC,IAF6E,KAG1E;AACH,MAAIG,GAAG,GAAGI,IAAV;;AACA,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC,QAAIA,CAAC,KAAK,CAAV,EAAaD,GAAG,IAAID,SAAP;AACbC,IAAAA,GAAG,IAAIL,UAAU,CAACC,GAAD,EAAMC,IAAI,CAACI,CAAD,CAAV,CAAjB;AACD;;AACD,SAAOD,GAAG,GAAGK,KAAb;AACD,CAVD;;AAYA,MAAMC,aAAa,GAAG,CAACX,UAAD,EAAaI,SAAS,GAAG,IAAzB,KAAkC,CAACH,GAAD,EAAMW,MAAN,KAAiB;AACvE,MAAIP,GAAG,GAAG,EAAV;AACA,QAAMQ,IAAI,GAAGf,MAAM,CAACe,IAAP,CAAYD,MAAZ,CAAb;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,IAAI,CAACN,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC,QAAIA,CAAC,KAAK,CAAV,EAAaD,GAAG,IAAID,SAAP;AACb,UAAMU,GAAG,GAAGD,IAAI,CAACP,CAAD,CAAhB;AACAD,IAAAA,GAAG,IAAIL,UAAU,CAACC,GAAD,EAAMa,GAAN,EAAWF,MAAM,CAACE,GAAD,CAAjB,CAAjB;AACD;;AACD,SAAOT,GAAP;AACD,CATD;;AAWAU,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,QADe;AAEfK,EAAAA,SAFe;AAGfI,EAAAA,OAHe;AAIfK,EAAAA,WAJe;AAKfG,EAAAA;AALe,CAAjB","sourcesContent":["const { isTaggedTemplate, buildTaggedTemplate } = require('./tagged_template')\n\nconst isObject = arg => arg && arg.constructor.prototype === Object.prototype\n\nconst buildCall = callbackfn => (ctx, args) =>\n  isTaggedTemplate(args)\n    ? buildTaggedTemplate(ctx, args)\n    : callbackfn(ctx, args)\n\nconst mapJoin = (callbackfn, separator = ', ') => (ctx, args) => {\n  let txt = ''\n  for (let i = 0; i < args.length; ++i) {\n    if (i !== 0) txt += separator\n    txt += callbackfn(ctx, args[i])\n  }\n  return txt\n}\n\nconst mapJoinWrap = (callbackfn, separator = ', ', open = '(', close = ')') => (\n  ctx,\n  args\n) => {\n  let txt = open\n  for (let i = 0; i < args.length; ++i) {\n    if (i !== 0) txt += separator\n    txt += callbackfn(ctx, args[i])\n  }\n  return txt + close\n}\n\nconst objectMapJoin = (callbackfn, separator = ', ') => (ctx, object) => {\n  let txt = ''\n  const keys = Object.keys(object)\n  for (let i = 0; i < keys.length; ++i) {\n    if (i !== 0) txt += separator\n    const key = keys[i]\n    txt += callbackfn(ctx, key, object[key])\n  }\n  return txt\n}\n\nmodule.exports = {\n  isObject,\n  buildCall,\n  mapJoin,\n  mapJoinWrap,\n  objectMapJoin\n}"]},"metadata":{},"sourceType":"script"}