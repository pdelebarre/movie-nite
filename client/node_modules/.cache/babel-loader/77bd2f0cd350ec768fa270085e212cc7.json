{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { memo, useState, useCallback } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useStyleConfig } from '../../hooks';\nimport { Pane } from '../../layers';\nimport ScrollbarSize from './ScrollbarSize';\nvar emptyObject = {};\nvar internalStyles = {\n  display: 'flex',\n  flexShrink: 0\n};\nvar TableHead = /*#__PURE__*/memo(function TableHead(props) {\n  var _props$accountForScro = props.accountForScrollbar,\n      accountForScrollbar = _props$accountForScro === void 0 ? true : _props$accountForScro,\n      children = props.children,\n      className = props.className,\n      rest = _objectWithoutProperties(props, [\"accountForScrollbar\", \"children\", \"className\"]);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      scrollbarWidth = _useState2[0],\n      setScrollBarWidth = _useState2[1];\n\n  var handleScrollbarSize = useCallback(function (width) {\n    setScrollBarWidth(width);\n  });\n\n  var _useStyleConfig = useStyleConfig('TableHead', emptyObject, emptyObject, internalStyles),\n      themedClassName = _useStyleConfig.className,\n      themeHeight = _useStyleConfig.height,\n      boxProps = _objectWithoutProperties(_useStyleConfig, [\"className\", \"height\"]);\n\n  var height = rest.height || themeHeight;\n  return /*#__PURE__*/React.createElement(Pane, _extends({\n    paddingRight: scrollbarWidth,\n    className: cx(themedClassName, className),\n    height: height\n  }, boxProps, rest), children, \" \", accountForScrollbar && /*#__PURE__*/React.createElement(ScrollbarSize, {\n    handleScrollbarSize: handleScrollbarSize\n  }));\n});\nTableHead.propTypes = _objectSpread(_objectSpread({}, Pane.propTypes), {}, {\n  /**\n   * The height of the table head.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * This should always be true if you are using TableHead together with a TableBody.\n   * Because TableBody has `overflowY: scroll` by default.\n   */\n  accountForScrollbar: PropTypes.bool\n});\nexport default TableHead;","map":{"version":3,"sources":["../../../src/table/src/TableHead.js"],"names":["emptyObject","internalStyles","display","flexShrink","TableHead","memo","accountForScrollbar","children","className","rest","props","scrollbarWidth","setScrollBarWidth","useState","handleScrollbarSize","useCallback","themedClassName","themeHeight","boxProps","useStyleConfig","height","cx","Pane","PropTypes","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,QAAA,EAAA,WAAA,QAAA,OAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,cAAA,QAAA,aAAA;AACA,SAAA,IAAA,QAAA,cAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AAEA,IAAMA,WAAW,GAAjB,EAAA;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EADc,MAAA;AAErBC,EAAAA,UAAU,EAAE;AAFS,CAAvB;AAKA,IAAMC,SAAS,GAAA,aAAGC,IAAI,CAAC,SAAA,SAAA,CAAA,KAAA,EAA0B;AAC/C,MAAA,qBAAA,GAAqEK,KAArE,CAAA,mBAAA;AAAA,MAAQJ,mBAAR,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,qBAAA;AAAA,MAAoCC,QAApC,GAAqEG,KAArE,CAAA,QAAA;AAAA,MAA8CF,SAA9C,GAAqEE,KAArE,CAAA,SAAA;AAAA,MAA4DD,IAA5D,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,qBAAA,EAAA,UAAA,EAAA,WAAA,CAAA,CAAA;;AACA,MAAA,SAAA,GAA4CI,QAAQ,CAApD,CAAoD,CAApD;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAAOF,cAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAAuBC,iBAAvB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAEA,MAAME,mBAAmB,GAAGC,WAAW,CAAC,UAAA,KAAA,EAAS;AAC/CH,IAAAA,iBAAiB,CAAjBA,KAAiB,CAAjBA;AADF,GAAuC,CAAvC;;AAIA,MAAA,eAAA,GAAyEO,cAAc,CAAA,WAAA,EAAA,WAAA,EAAA,WAAA,EAAvF,cAAuF,CAAvF;AAAA,MAAmBH,eAAnB,GAAA,eAAA,CAAA,SAAA;AAAA,MAA4CC,WAA5C,GAAA,eAAA,CAAA,MAAA;AAAA,MAA4DC,QAA5D,GAAA,wBAAA,CAAA,eAAA,EAAA,CAAA,WAAA,EAAA,QAAA,CAAA,CAAA;;AAOA,MAAME,MAAM,GAAGX,IAAI,CAAJA,MAAAA,IAAf,WAAA;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,YAAY,EADd,cAAA;AAEE,IAAA,SAAS,EAAEY,EAAE,CAAA,eAAA,EAFf,SAEe,CAFf;AAGE,IAAA,MAAM,EAAED;AAHV,GAAA,EAAA,QAAA,EAAA,IAAA,CAAA,EAAA,QAAA,EAAA,GAAA,EAOcd,mBAAmB,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,mBAAmB,EAAEQ;AAApC,GAAA,CAPrC,CADF;AAjBF,CAAsB,CAAtB;AA8BAV,SAAS,CAATA,SAAAA,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAIKkB,IAAI,CAJTlB,SAAAA,CAAAA,EAAAA,EAAAA,EAAAA;AAME;AACF;AACA;AACEgB,EAAAA,MAAM,EAAEG,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAT1DnB,MAS8B,CAApBmB,CATVnB;;AAWE;AACF;AACA;AACA;AACEE,EAAAA,mBAAmB,EAAEiB,SAAS,CAACC;AAfjCpB,CAAAA,CAAAA;AAkBA,eAAA,SAAA","sourcesContent":["import React, { memo, useState, useCallback } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { useStyleConfig } from '../../hooks'\nimport { Pane } from '../../layers'\nimport ScrollbarSize from './ScrollbarSize'\n\nconst emptyObject = {}\n\nconst internalStyles = {\n  display: 'flex',\n  flexShrink: 0\n}\n\nconst TableHead = memo(function TableHead(props) {\n  const { accountForScrollbar = true, children, className, ...rest } = props\n  const [scrollbarWidth, setScrollBarWidth] = useState(0)\n\n  const handleScrollbarSize = useCallback(width => {\n    setScrollBarWidth(width)\n  })\n\n  const { className: themedClassName, height: themeHeight, ...boxProps } = useStyleConfig(\n    'TableHead',\n    emptyObject,\n    emptyObject,\n    internalStyles\n  )\n\n  const height = rest.height || themeHeight\n\n  return (\n    <Pane\n      paddingRight={scrollbarWidth}\n      className={cx(themedClassName, className)}\n      height={height}\n      {...boxProps}\n      {...rest}\n    >\n      {children} {accountForScrollbar && <ScrollbarSize handleScrollbarSize={handleScrollbarSize} />}\n    </Pane>\n  )\n})\n\nTableHead.propTypes = {\n  /**\n   * Composes the Pane component as the base.\n   */\n  ...Pane.propTypes,\n\n  /**\n   * The height of the table head.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * This should always be true if you are using TableHead together with a TableBody.\n   * Because TableBody has `overflowY: scroll` by default.\n   */\n  accountForScrollbar: PropTypes.bool\n}\n\nexport default TableHead\n"]},"metadata":{},"sourceType":"module"}