{"ast":null,"code":"const createExpressionCompiler = require('./compile');\n\nconst {\n  normalKey\n} = require('../lib-util');\n\nconst aggregator = op => columnName => `${op}(${normalKey(columnName)})`;\n\nmodule.exports = ({\n  defaultContext,\n  expression\n}) => {\n  const {\n    expressions\n  } = expression;\n  const newContext = createNewContext(defaultContext);\n  const compile = createExpressionCompiler(expressions);\n\n  const builder = () => {}; // must not be object literal\n\n\n  const chain = createChain(builder);\n  Object.defineProperties(builder, { ...builderProperties({\n      compile,\n      newContext\n    }),\n    ...methodProperties({\n      expressions,\n      chain\n    })\n  });\n  const ret = chain();\n  ret.max = aggregator('max');\n  ret.min = aggregator('min');\n  ret.avg = aggregator('avg');\n  ret.count = aggregator('count');\n  ret.sum = aggregator('sum');\n  return ret;\n};\n\nconst builderProperties = ({\n  compile,\n  newContext\n}) => ({\n  _build: {\n    value: function (inherit) {\n      return compile(newContext(inherit), this.current);\n    }\n  },\n  query: {\n    get: function () {\n      return this._build();\n    }\n  },\n  unparameterized: {\n    get: function () {\n      return this._build({\n        unparameterized: true\n      }).text;\n    }\n  }\n});\n\nconst createNewContext = defaultContext => {\n  const {\n    build,\n    parameterize,\n    escape,\n    mapKey\n  } = defaultContext;\n  return inherit => {\n    const {\n      params = [],\n      unparameterized = false\n    } = inherit || {};\n    return {\n      // EasyQB instance properties\n      build,\n      parameterize,\n      escape,\n      mapKey,\n      // inherited properties\n      params,\n      unparameterized\n    };\n  };\n};\n\nconst createChain = prototype => {\n  const chain = current => {\n    const fn = (...args) => chain({\n      prev: current,\n      args\n    });\n\n    fn.current = current;\n    Object.setPrototypeOf(fn, prototype);\n    return fn;\n  };\n\n  return chain;\n};\n\nconst methodProperties = ({\n  expressions,\n  chain\n}) => {\n  const properties = {};\n\n  for (const name in expressions) {\n    properties[name] = {\n      get: function () {\n        return chain({\n          prev: this.current,\n          name\n        });\n      }\n    };\n  }\n\n  return properties;\n};","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/EasyQB/src/builder-expression/index.js"],"names":["createExpressionCompiler","require","normalKey","aggregator","op","columnName","module","exports","defaultContext","expression","expressions","newContext","createNewContext","compile","builder","chain","createChain","Object","defineProperties","builderProperties","methodProperties","ret","max","min","avg","count","sum","_build","value","inherit","current","query","get","unparameterized","text","build","parameterize","escape","mapKey","params","prototype","fn","args","prev","setPrototypeOf","properties","name"],"mappings":"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","sourcesContent":["const createExpressionCompiler = require('./compile')\nconst { normalKey } = require('../lib-util');\n\nconst aggregator = (op) => (columnName) => `${op}(${normalKey(columnName)})`;\n\nmodule.exports = ({ defaultContext, expression }) => {\n  const { expressions } = expression\n  const newContext = createNewContext(defaultContext)\n  const compile = createExpressionCompiler(expressions)\n  const builder = () => {} // must not be object literal\n  const chain = createChain(builder)\n  Object.defineProperties(builder, {\n    ...builderProperties({ compile, newContext }),\n    ...methodProperties({ expressions, chain }),\n  })\n  const ret = chain();\n  ret.max = aggregator('max');\n  ret.min = aggregator('min');\n  ret.avg = aggregator('avg');\n  ret.count = aggregator('count');\n  ret.sum = aggregator('sum');\n  return ret;\n}\n\nconst builderProperties = ({ compile, newContext }) => ({\n  _build: {\n    value: function(inherit) {\n      return compile(newContext(inherit), this.current)\n    }\n  },\n  query: {\n    get: function() {\n      return this._build()\n    }\n  },\n  unparameterized: {\n    get: function() {\n      return this._build({ unparameterized: true }).text\n    }\n  }\n})\n\nconst createNewContext = defaultContext => {\n  const { build, parameterize, escape, mapKey } = defaultContext\n  return inherit => {\n    const { params = [], unparameterized = false } = inherit || {}\n    return {\n      // EasyQB instance properties\n      build,\n      parameterize,\n      escape,\n      mapKey,\n\n      // inherited properties\n      params,\n      unparameterized\n    }\n  }\n}\n\nconst createChain = prototype => {\n  const chain = current => {\n    const fn = (...args) => chain({ prev: current, args })\n    fn.current = current\n    Object.setPrototypeOf(fn, prototype)\n    return fn\n  }\n  return chain\n}\n\nconst methodProperties = ({ expressions, chain }) => {\n  const properties = {}\n  for (const name in expressions) {\n    properties[name] = {\n      get: function() {\n        return chain({ prev: this.current, name })\n      }\n    }\n  }\n  return properties\n}\n"]},"metadata":{},"sourceType":"script"}