{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n'use strict';\n\nimport { NativeModules } from 'react-native';\nimport { keys, objectTypes } from './constants';\nimport Collection from './collections';\nimport List, { createList } from './lists';\nimport Results, { createResults } from './results';\nimport RealmObject, * as objects from './objects';\nimport User, { createUser } from './user';\nimport { createAsyncOpenTask } from './async-open-task';\nimport App, { createApp } from './app';\nimport Credentials, { createCredentials } from './credentials';\nimport * as rpc from './rpc';\nimport * as util from './util';\nimport { createSession } from './session';\nimport { invalidateCache } from './cache';\nimport { performFetch } from \"./fetch\";\nimport { createEmailPasswordAuth } from './email-password-auth';\nconst {\n  debugHosts,\n  debugPort\n} = NativeModules.Realm;\nrpc.registerTypeConverter(objectTypes.LIST, createList);\nrpc.registerTypeConverter(objectTypes.RESULTS, createResults);\nrpc.registerTypeConverter(objectTypes.OBJECT, objects.createObject);\nrpc.registerTypeConverter(objectTypes.REALM, createRealm);\nrpc.registerTypeConverter(objectTypes.USER, createUser);\nrpc.registerTypeConverter(objectTypes.SESSION, createSession);\nrpc.registerTypeConverter(objectTypes.ASYNCOPENTASK, createAsyncOpenTask);\nrpc.registerTypeConverter(objectTypes.APP, createApp);\nrpc.registerTypeConverter(objectTypes.CREDENTIALS, createCredentials);\nrpc.registerTypeConverter(objectTypes.EMAILPASSWORDAUTH, createEmailPasswordAuth);\n\nfunction createRealm(_, info) {\n  let realm = Object.create(Realm.prototype);\n  setupRealm(realm, info);\n  return realm;\n}\n\nfunction setupRealm(realm, info) {\n  realm[keys.id] = info.id;\n  realm[keys.realm] = info.realmId;\n  realm[keys.type] = objectTypes.REALM;\n  ['empty', 'schema', 'schemaVersion', 'isInTransaction', 'isClosed'].forEach(name => {\n    Object.defineProperty(realm, name, {\n      get: util.getterForProperty(name)\n    });\n  });\n\n  for (let key in info.data) {\n    realm[key] = rpc.deserialize(info.id, info.data[key]);\n  }\n}\n\nfunction getObjectType(realm, type) {\n  if (typeof type == 'function') {\n    return objects.typeForConstructor(realm[keys.realm], type);\n  }\n\n  return type;\n}\n\nexport default class Realm {\n  constructor(config) {\n    let schemas = typeof config === 'object' && config.schema;\n    let constructors = schemas ? {} : null;\n\n    for (let i = 0, len = schemas ? schemas.length : 0; i < len; i++) {\n      let item = schemas[i];\n\n      if (typeof item == 'function') {\n        let schema = item.schema;\n\n        if (!schema || typeof schema != 'object') {\n          throw new Error(\"Realm object constructor must have a 'schema' property.\");\n        }\n\n        let {\n          name,\n          properties\n        } = schema;\n\n        if (!name || typeof name != 'string') {\n          throw new Error(`Failed to read ObjectSchema: name must be of type 'string', got (${typeof name})`);\n        } else if (!properties || typeof properties != 'object') {\n          throw new Error(`Failed to read ObjectSchema: properties must be of type 'object', got (${typeof properties})`);\n        }\n\n        schemas.splice(i, 1, schema);\n        constructors[name] = item;\n      }\n    }\n\n    let info = rpc.createRealm(Array.from(arguments));\n    setupRealm(this, info); // This will create mappings between the id, path, and potential constructors.\n\n    objects.registerConstructors(info.realmId, this.path, constructors);\n  }\n\n  create(type, ...args) {\n    let method = util.createMethod(objectTypes.REALM, 'create', true);\n    return method.apply(this, [getObjectType(this, type), ...args]);\n  }\n\n  objects(type, ...args) {\n    let method = util.createMethod(objectTypes.REALM, 'objects');\n    return method.apply(this, [getObjectType(this, type), ...args]);\n  }\n\n  objectForPrimaryKey(type, ...args) {\n    let method = util.createMethod(objectTypes.REALM, 'objectForPrimaryKey');\n    return method.apply(this, [getObjectType(this, type), ...args]);\n  }\n\n} // Non-mutating methods:\n\nutil.createMethods(Realm.prototype, objectTypes.REALM, ['addListener', 'removeListener', 'removeAllListeners', 'writeCopyTo', '_waitForDownload', '_objectForObjectId']); // Mutating methods:\n\nutil.createMethods(Realm.prototype, objectTypes.REALM, ['delete', 'deleteModel', 'deleteAll', 'write', 'compact', 'close', 'beginTransaction', 'commitTransaction', 'cancelTransaction'], true);\nObject.defineProperties(Realm, {\n  Collection: {\n    value: Collection\n  },\n  List: {\n    value: List\n  },\n  Results: {\n    value: Results\n  },\n  Object: {\n    value: RealmObject\n  },\n  App: {\n    value: App\n  },\n  Credentials: {\n    value: Credentials\n  },\n  User: {\n    value: User\n  },\n  defaultPath: {\n    get: util.getterForProperty('defaultPath', false),\n    set: util.setterForProperty('defaultPath')\n  },\n  schemaVersion: {\n    value: function (_path, _encryptionKey) {\n      return rpc.callMethod(undefined, Realm[keys.id], 'schemaVersion', Array.from(arguments));\n    }\n  },\n  deleteFile: {\n    value: function (config) {\n      return rpc.callMethod(undefined, Realm[keys.id], 'deleteFile', Array.from(arguments));\n    }\n  },\n  copyBundledRealmFiles: {\n    value: function () {\n      return rpc.callMethod(undefined, Realm[keys.id], 'copyBundledRealmFiles', []);\n    }\n  },\n  clearTestState: {\n    value: function () {\n      objects.clearRegisteredConstructors();\n      invalidateCache();\n      rpc.clearTestState();\n    }\n  },\n  _asyncOpen: {\n    value: function (config, callback) {\n      return rpc.asyncOpenRealm(Realm[keys.id], config, callback);\n    }\n  },\n  exists: {\n    value: function (config) {\n      return rpc.callMethod(undefined, Realm[keys.id], 'exists', Array.from(arguments));\n    }\n  }\n});\n\nfor (let i = 0, len = debugHosts.length; i < len; i++) {\n  try {\n    Realm[keys.id] = rpc.createSession(debugHosts[i] + \":\" + debugPort, {\n      performFetch\n    });\n    break;\n  } catch (e) {\n    // Only throw exception after all hosts have been tried.\n    if (i < len - 1) {\n      continue;\n    } // Log the original exception for debugging purposes.\n\n\n    console.error(e);\n    throw new Error('Realm failed to connect to the embedded debug server inside the app. ' + 'If attempting to use Chrome debugging from a device, ensure the device is ' + 'reachable on the same network as this machine.');\n  }\n}","map":{"version":3,"sources":["/Volumes/LaCie/Dev/myProjects/movie-nite/node_modules/realm/lib/browser/index.js"],"names":["NativeModules","keys","objectTypes","Collection","List","createList","Results","createResults","RealmObject","objects","User","createUser","createAsyncOpenTask","App","createApp","Credentials","createCredentials","rpc","util","createSession","invalidateCache","performFetch","createEmailPasswordAuth","debugHosts","debugPort","Realm","registerTypeConverter","LIST","RESULTS","OBJECT","createObject","REALM","createRealm","USER","SESSION","ASYNCOPENTASK","APP","CREDENTIALS","EMAILPASSWORDAUTH","_","info","realm","Object","create","prototype","setupRealm","id","realmId","type","forEach","name","defineProperty","get","getterForProperty","key","data","deserialize","getObjectType","typeForConstructor","constructor","config","schemas","schema","constructors","i","len","length","item","Error","properties","splice","Array","from","arguments","registerConstructors","path","args","method","createMethod","apply","objectForPrimaryKey","createMethods","defineProperties","value","defaultPath","set","setterForProperty","schemaVersion","_path","_encryptionKey","callMethod","undefined","deleteFile","copyBundledRealmFiles","clearTestState","clearRegisteredConstructors","_asyncOpen","callback","asyncOpenRealm","exists","e","console","error"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport { NativeModules } from 'react-native';\nimport { keys, objectTypes } from './constants';\nimport Collection from './collections';\nimport List, { createList } from './lists';\nimport Results, { createResults } from './results';\nimport RealmObject, * as objects from './objects';\nimport User, { createUser } from './user';\nimport { createAsyncOpenTask } from './async-open-task';\nimport App, { createApp } from './app';\nimport Credentials, { createCredentials } from './credentials';\nimport * as rpc from './rpc';\nimport * as util from './util';\nimport { createSession } from './session';\nimport { invalidateCache } from './cache';\nimport { performFetch } from \"./fetch\";\nimport { createEmailPasswordAuth } from './email-password-auth';\n\nconst {debugHosts, debugPort} = NativeModules.Realm;\n\nrpc.registerTypeConverter(objectTypes.LIST, createList);\nrpc.registerTypeConverter(objectTypes.RESULTS, createResults);\nrpc.registerTypeConverter(objectTypes.OBJECT, objects.createObject);\nrpc.registerTypeConverter(objectTypes.REALM, createRealm);\nrpc.registerTypeConverter(objectTypes.USER, createUser);\nrpc.registerTypeConverter(objectTypes.SESSION, createSession);\nrpc.registerTypeConverter(objectTypes.ASYNCOPENTASK, createAsyncOpenTask);\nrpc.registerTypeConverter(objectTypes.APP, createApp);\nrpc.registerTypeConverter(objectTypes.CREDENTIALS, createCredentials);\nrpc.registerTypeConverter(objectTypes.EMAILPASSWORDAUTH, createEmailPasswordAuth);\n\nfunction createRealm(_, info) {\n    let realm = Object.create(Realm.prototype);\n    setupRealm(realm, info);\n    return realm;\n}\n\nfunction setupRealm(realm, info) {\n    realm[keys.id] = info.id;\n    realm[keys.realm] = info.realmId;\n    realm[keys.type] = objectTypes.REALM;\n\n    [\n        'empty',\n        'schema',\n        'schemaVersion',\n        'isInTransaction',\n        'isClosed',\n    ].forEach((name) => {\n        Object.defineProperty(realm, name, {get: util.getterForProperty(name)});\n    });\n    for (let key in info.data) {\n        realm[key] = rpc.deserialize(info.id, info.data[key]);\n    }\n}\n\nfunction getObjectType(realm, type) {\n    if (typeof type == 'function') {\n        return objects.typeForConstructor(realm[keys.realm], type);\n    }\n    return type;\n}\n\nexport default class Realm {\n    constructor(config) {\n        let schemas = typeof config === 'object' && config.schema;\n        let constructors = schemas ? {} : null;\n\n        for (let i = 0, len = schemas ? schemas.length : 0; i < len; i++) {\n            let item = schemas[i];\n\n            if (typeof item == 'function') {\n                let schema = item.schema;\n                if (!schema || typeof schema != 'object') {\n                    throw new Error(\"Realm object constructor must have a 'schema' property.\");\n                }\n\n                let {name, properties} = schema;\n                if (!name || typeof name != 'string') {\n                    throw new Error(`Failed to read ObjectSchema: name must be of type 'string', got (${typeof name})`);\n                } else if (!properties || typeof properties != 'object') {\n                    throw new Error(`Failed to read ObjectSchema: properties must be of type 'object', got (${typeof properties})`);\n                }\n\n                schemas.splice(i, 1, schema);\n                constructors[name] = item;\n            }\n        }\n\n        let info = rpc.createRealm(Array.from(arguments));\n        setupRealm(this, info);\n\n        // This will create mappings between the id, path, and potential constructors.\n        objects.registerConstructors(info.realmId, this.path, constructors);\n    }\n\n    create(type, ...args) {\n        let method = util.createMethod(objectTypes.REALM, 'create', true);\n        return method.apply(this, [getObjectType(this, type), ...args]);\n    }\n\n    objects(type, ...args) {\n        let method = util.createMethod(objectTypes.REALM, 'objects');\n        return method.apply(this, [getObjectType(this, type), ...args]);\n    }\n\n    objectForPrimaryKey(type, ...args) {\n        let method = util.createMethod(objectTypes.REALM, 'objectForPrimaryKey');\n        return method.apply(this, [getObjectType(this, type), ...args]);\n    }\n}\n\n// Non-mutating methods:\nutil.createMethods(Realm.prototype, objectTypes.REALM, [\n    'addListener',\n    'removeListener',\n    'removeAllListeners',\n    'writeCopyTo',\n    '_waitForDownload',\n    '_objectForObjectId',\n]);\n\n// Mutating methods:\nutil.createMethods(Realm.prototype, objectTypes.REALM, [\n    'delete',\n    'deleteModel',\n    'deleteAll',\n    'write',\n    'compact',\n    'close',\n    'beginTransaction',\n    'commitTransaction',\n    'cancelTransaction',\n], true);\n\nObject.defineProperties(Realm, {\n    Collection: {\n        value: Collection,\n    },\n    List: {\n        value: List,\n    },\n    Results: {\n        value: Results,\n    },\n    Object: {\n        value: RealmObject,\n    },\n    App: {\n        value: App,\n    },\n    Credentials: {\n        value: Credentials,\n    },\n    User: {\n        value: User,\n    },\n    defaultPath: {\n        get: util.getterForProperty('defaultPath', false),\n        set: util.setterForProperty('defaultPath'),\n    },\n    schemaVersion: {\n        value: function(_path, _encryptionKey) {\n            return rpc.callMethod(undefined, Realm[keys.id], 'schemaVersion', Array.from(arguments));\n        }\n    },\n    deleteFile: {\n        value: function(config) {\n            return rpc.callMethod(undefined, Realm[keys.id], 'deleteFile', Array.from(arguments));\n        }\n    },\n    copyBundledRealmFiles: {\n        value: function() {\n            return rpc.callMethod(undefined, Realm[keys.id], 'copyBundledRealmFiles', []);\n        }\n    },\n    clearTestState: {\n        value: function() {\n            objects.clearRegisteredConstructors();\n            invalidateCache();\n            rpc.clearTestState();\n        },\n    },\n    _asyncOpen: {\n        value: function(config, callback) {\n            return rpc.asyncOpenRealm(Realm[keys.id], config, callback);\n        },\n    },\n    exists: {\n        value: function(config) {\n            return rpc.callMethod(undefined, Realm[keys.id], 'exists', Array.from(arguments));\n        }\n    },\n});\n\nfor (let i = 0, len = debugHosts.length; i < len; i++) {\n    try {\n        Realm[keys.id] = rpc.createSession(debugHosts[i] + \":\" + debugPort, { performFetch });\n        break;\n    } catch (e) {\n        // Only throw exception after all hosts have been tried.\n        if (i < len - 1) {\n            continue;\n        }\n\n        // Log the original exception for debugging purposes.\n        console.error(e);\n\n        throw new Error(\n            'Realm failed to connect to the embedded debug server inside the app. ' +\n            'If attempting to use Chrome debugging from a device, ensure the device is ' +\n            'reachable on the same network as this machine.'\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}